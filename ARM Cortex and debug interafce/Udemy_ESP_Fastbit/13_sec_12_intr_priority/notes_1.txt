Let's say you have 2 peripherals ADC and TIMER, and let's say the priority value of ADC peripheral is 5, and priority value of timer peripheral is 4. In this case, Timer peripheral priority value is lesser than the priority value of ADC; hence TIMER interrupt is more URGENT than ADC interrupt. What we say is, TIMER priority is HIGHER than ADC priority.

That means, in ARM Cortex Mx processor lesser the priority value higher the priority, that is higher the urgency. If both interrupts hit the NVIC at the same time, NVIC allows TIMER interrupt first. TIMER ISR will be executed first by the processor.

Let's explore the interrupt priority register of the ARM Cortex Mx processor. Because, this is a place where you configure the priority for interrupts. Interrupt priority register is part of NVIC register set. Here you can see that, we have 60 interrupt priority registers to cover all 240 IRQs. By using these registers you can configure priority levels for IRQs only remember that. You cannot use these registers to configure priority for system exceptions. 

As I said, there are 60 interrupt priority registers from IPR0 to IPR59. And by using each priority register you can configure priority for 4 IRQs. This is a 32 bit register, and by using this register you can configure priority for 4 IRQs. 60 into 4, which covers all 240 IRQs. Let's see the real implementation of interrupt priority register. As I said, priority register is of 32 bits and that 32 bit register is divided into 4 section, and each section is of 8 bits. Each 8 bits section is used to control or set the priority for each IRQs. For example, in the IPR0 register, the first 8 bits will be used to configure the priority for IRQ0, then IRQ1, 2,3 like that. This is a real implementation of these 8 bits.

Out of these 8 bits, all bits are not implemented remember that. Only few bits are implemented. For example, in this case, the MCU vendor may implement just 3 bits in this register and a rest of the bits are not implemented. That's how the real implementation is. That depends on the microcontroller vendor. For example, the microcontroller vendor X may implement only 3 bits and the microcontroller Y may implement 4 bits. If only 3 bits are implemented, then there are 8 priority levels. Like this, so these are the different priority level. 00 to 0xE0. If there is any IRQ with this priority value, then it will be of highest priority interrupt. And if there is any priority with this priority value, then it will be a lowest priority interrupt. Like that. If 4 bits are implemented, then there are 16 priority level. In our STM32 microcontroller, the manufacturer implements 4 bits.

That's why, in our microcontroller we have 16 priority level. If you want to configure the priority for system exceptions, then you should be looking at system control block not into the NVIC registers. In the system control block you have registers called system handler priority registers. These registers System handler priority registers. By using these registers you can configure the priority for system exception.

what happens if two interrupts of the same priority hit the processor at the same time. Now the answer is, in this case, the sub priority value of the interrupts will be checked to resolve the conflict. And interrupt with lower sub priority value will be allowed first.

When the processor is running interrupt handler, and another interrupt arrives, then the pre-empt priority values will be compared, and interrupt with higher pre-empt priority will be allowed to run. Sub priority value is used only when two interrupts with the same pre-empt priority values occur at the same time remember that. In this case, the interrupt with higher sub priority will be handled first. That means, sub priority is used to resolve the conflict only when two interrupts with the same pre-empt priority values occur at the same time. Based on pre-empt priority and sub priority we have priority groupings.

There are various priority groups, and by default in ARM Cortex Mx processors the priority group is 0.Priority group depends on the usage of this interrupt priority register. As I said the default priority group is 0. In this case, bit 1 to 7 are considered as pre-empt priority and bit 0 is considered as sub priority. If there are 2 interrupts having same pre-empt priority values occur at the same time, then this bit will be used to resolve the conflict. That's it. Suppose, if the priority group is 5, then 7 to 6 that is these two bits are used as pre-empt priority, and all these bits are used as sub priority. In this case, we have got only 4 priority level. Because, there are only two bits allocated for pre-empt priority. We have 4 different priority values or priority levels, like that. This is a concept behind priority grouping. By the way, you can control the priority grouping by changing the value of this register. Application interrupt and reset control register which is part of SCB you have to modify these bit fields, by default this is 0.

( watch lec 57-58 )
