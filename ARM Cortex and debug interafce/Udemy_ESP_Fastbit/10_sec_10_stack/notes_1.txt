Stack memory is part of the main memory. The main memory could be internal RAM or it could be a external RAM. The stack memory is mainly reserved for the purpose of temporary storage of data, what we call as transient data. Stack memory is a mainly consumed during function or interrupt/exception handling.Stack memory is accessed in last in first out fashion. That is LIFO fashion. The stack can be accessed using PUSH and POP instructions or using any memory manipulation instruction such as load or store. Most of the processor architecture supports using a dedicated instruction such as PUSH and POP in order to manipulate a stack memory. The stack is traced using a stack pointer register. So, most of the processor architecture carry a special register called stack pointer register. And that stack pointer register in used to trace the consumption of stack memory. When you use PUSH and POP instructions a those instructions directly affect stack pointer register. That means, they can increment or decrement the stack pointer register values.

In ARM Cortex Mx processor the register R13 is considered as SP, that is stack pointer register. The stack memory is mainly used for temporary storage of processor register values, it can be used for temporary storage of local variables of the functions, when you write a 'C' function and when you create a local variable then the memory for that local variable will be reserved in stack memory. And when that function exits those memory will be reclaimed or deleted. That's why, stack memory dynamically expands and shrinks during runtime of the program. During system exception or interrupt, stack memory will be used to save the context of the currently executing code. Context of a currently executing code is nothing but collection of some general purpose registers, processors status register, and the return address. All these information will be a temporarily stored in stack memory in order to handle the interrupt or the exception.

Geneally, the RAM is divided into 3 parts. One part is reserved for stack memory. Another part of the RAM can be reserved for "Heap", and rest of the RAM can be reserved for "global data" storage. Global data section part of the RAM will be utilized when the program contains global data and static local variable. When you have lots of global data in your program, then those global data will be stored in this part of the RAM. Your program can read write into this RAM locations. Even you can store instructions here and execute it. You can even use this as a program memory.Another part of the RAM can be used for heap. That is it will be utilized during dynamic memory allocation. Let's say, in your program you use a malloc or free APIs. The dynamic memory allocation APIs from the standard library. Those libraries a reserve the space or memory from this part of the RAM. You have to inform the standard library or compiler which part of the RAM you want to reserved for "heap" or" stack" or "global data".That settings you have to do in your tool chain or from your linker scripts.

If you are not using any standard library dynamic memory allocation APIs, then you can write your own dynamic memory allocation APIs, and you can write in such a way that it can reserve the memory from this part of the RAM.That's for dynamic memory allocation.

In Cortex Mx processor stack consumption model or stack operation model is full descending. Let me explain that. There are different stack operation models. Such as full ascending stack, full descending stack, empty ascending stack, and empty descending stack. Out of all these 4 ARM Cortex Mx processors use full descending stack operation model.
