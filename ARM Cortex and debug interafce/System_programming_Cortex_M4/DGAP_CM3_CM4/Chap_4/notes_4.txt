In typical Cortex-M microcontrollers, there can be three types of reset:
• Power on reset: reset everything in the microcontroller. This includes the processor and its debug support component and peripherals.
• System reset: reset just the processor and peripherals, but not the debug support component of the processor.
• Processor reset: reset the processor only.

During system debug or processor reset operations, the debug components in the Cortex-M3 or Cortex-M4 processors are not reset so that the connection between the debug host (e.g., debugger software running on a computer) and the microcontroller can be maintained. The debug host can generate a system reset or processor reset via a register in the System Control Block (SCB). The duration of Power on reset and System reset depends on the microcontroller design. In some cases the reset lasts a number of milli seconds as the reset controller needs to wait for a clock source such as a crystal oscillator to stabilize.

After reset and before the processor starts executing the program, the Cortex-M processors read the first two words from the memory (Figure 4.30). The beginning of the memory space contains the vector table, and the first two words in the vector table are the initial value for the Main Stack Pointer (MSP), and the reset vector, which is the starting address of the reset handler (as described in section 4.5.3 and Figure 4.26). After these two words are read by the processor, the processor then sets up the MSP and the Program Counter (PC) with these values.

The setup of the MSP is necessary because some exceptions such as the NMI or HardFault handler could potentially occur shortly after the reset, and the stack memory and hence the MSP will then be needed to push some of the processor status to the stack before exception handling. Note that for most C development environments, the C startup code will also update the value of the MSP before entering the main program main(). This two-step stack initialization allows a microcontroller device with external memory to use the external memory for the stack. For example, it can boot up with the stack placed in a small internal on-chip SRAM, and initialize an external memory controller while in the reset handler, and then execute the C startup code, which then sets up the stack memory to the external memory.

Because the stack operations in the Cortex-M3 or Cortex-M4 processors are based on full descending stack (SP decrement before store), the initial SP value should be set to the first memory after the top of the stack region. For example, if you have a stack memory range from 0x20007C00 to 0x20007FFF (1Kbytes), the initial stack value should be set to 0x20008000, as shown in Figure 4.31.
