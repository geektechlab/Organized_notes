This method is fast, but it could miss stack overflows that happen in the middle of a context switch.
 
This method is fast, but it could miss stack overflows that happen in the middle of a context switch. So, by configuring the macro configCHECK_FOR_STACK_OVERFLOW to 2, FreeRTOS will apply the same method of the function uxTaskGetStackHighWaterMark(), that is it will fill the stack with a watermark value and it will call the vApplicationStackOverflowHook in case the latest 20 bytes of the stack have changed from their expected value. Since FreeRTOS performs this check at every context switch, this mode impacts on overall performances, and it should be used only during the firmware development (especially for high tick frequencies).

Cortex-M based MCUs offer two assembly instructions to enter in low-power modes: WFI and WFE. But which one is more suitable to be called from the idle hook? The WFI instruction will keep the MCU core OFF until an interrupt is raised. This could be either the interrupt of the SysTick timer or of another peripheral. The WFE instruction, instead, is conditional: it does not enter in sleep mode if the event register is set (the WFI always enter and then re-exit, if an interrupt is pending, wasting several CPU cycles). Moreover, it allows to wake up the processor if we are using events associated to a given peripheral instead of interrupts, while it is still able to wake up in case of interrupts. For these reasons, the WFE instruction is always preferred to the WFI one in idle loops.
