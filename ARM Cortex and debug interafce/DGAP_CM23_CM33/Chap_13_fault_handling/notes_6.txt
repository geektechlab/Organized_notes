Fault exceptions are not uncommon during the development of software. Fortunately,
there are several ways to obtain the required information to determine the cause of the
issue(s). These are as follows:
• Instruction trace: If the device you are using supports Embedded Trace Macrocell (ETM) or
Micro Trace Buffer (MTB), the ETM and MTB can be utilized to understand how the fault
occurred, i.e., to view the instructions that were executed just before the fault exception.
This information can then be used to identify the processor operations that led to the
failure. It is also possible to set up the debug environment to automatically halt the
processor when the fault handler has started (see Section 13.4.3). The Cortex-M23 and
Cortex-M33 processors support both the ETM and the MTB, but please note, the devices based on these processors might not always include these features. When using ETM trace,
a debug probe with the Trace Port capture function is required. Although instruction trace
using the MTB does not require a Trace Port capture function, it provides less information
than the ETM as it only captures a limited history. Further information on the ETM and the
MTB can be found in Chapter 16.
• Event trace: Sometimes fault exceptions can be related to exception handling (e.g., the
system configuration was unexpectedly changed by an exception handler). If you are using
the Cortex-M33 or other Armv8-M Mainline processors, the event trace capability in the
Data Watchpoint and Trace unit (For more information on the DWT, see Chapter 16,
Section 16.3.4) can help you to not only determine what exception has taken place but
might also help you to determine the cause of the issue. An event trace can either be
captured with a low-cost debug probe with Single Wire Output (SWO) support or with a
debug probe with Trace Port support.
• Stack trace: Even with a low-cost debugger without a trace capture capability, you should
be able to extract the stack frame when entering a fault exception if the stack pointer
configuration was still valid at the point of the fault event. Assuming that you stopped the
processor at the beginning of the fault handler (see the vector catch feature description in
Section 13.4.3), you would then be in a position to examine the processor status and the
contents of the memory. The stack frame created when the processor enters the fault
exception provides useful information for debugging, e.g., the stacked Program Counter
(PC) indicates where the program was executed to when the fault exception was triggered.
Using the information gleaned from the stack frame and the values in the Fault Status
Registers, a determination can then be made of the source of the issue.
• Fault status and fault address registers: If you are using the Cortex-M33 or other Armv8-M
Mainline processors, the information in the fault status and fault address registers could
provide important clues as to what has gone wrong. Some debug tools have a built-in
capability to analyze errors based on the information obtained from those registers. To
assist further, you can use a communication interface to output the contents of those
registers to a console to further assist the debugging process. An example of a fault handler
that can report the stacked PC and fault status registers can be found in Section 13.9.

There are several key changes in fault handling when comparing Armv8-M processors to
the previous generations of the Cortex-M processors:
When comparing Armv6-M processors to the Cortex-M23 processor (Armv8-M Baseline),
the changes are:
• The HardFault is now handled by the Secure state when TrustZone is enabled and when
AIRCR.BFHFNMINS is 0 (i.e., default). This means that if a device has TrustZone implemented and the Secure world is used, a fault event occurrence will always execute
the HardFault handler in the Secure world first. When this occurs, the Secure HardFault
handler is then able to carry out the required security checks (in case the fault is related to a
security attack) and once it does, is then able to, optionally, (a) utilize a communication
interface to inform users of a fault, (b) enter halting, or (c) trigger a self-reset.
• If the Secure world has been locked down and the software developer does not have Secure
debug permission, the processor cannot enter halting state while in the Secure world’s
HardFault exception. If the Secure HardFault handler does not utilize a communication
interface to report the fault, a Non-secure software developer would have no easy way of
debugging the system. It is, therefore, useful if Non-secure software enables the Nonsecure UsageFault and Non-secure MemManage Fault so that these fault events can be
debugged by Non-secure software developers. Additional information about handling
faults in the Secure world is covered in Chapter 18.
• The addition of stack limit checking for the Secure stack pointers.
• An extension of the EXC_RETURN code: Because of the extension of the EXC_RETURN
code and because there are additional stack pointers, the fault exception handlers for
reporting errors might need to be updated. Further information on this can be found in
Section 13.9.
When comparing Armv7-M processors to the Cortex-M33 processor (Armv8-M Mainline),
the changes include those mentioned above (from Armv6-M to Armv8-M Baseline), and
additionally:
• The addition of stack limit checking for Non-secure stack pointers (i.e., both the Secure and
the Non-secure stack pointer has stack limit checking).
• The addition, when TrustZone is implemented, of the SecureFault exception.
