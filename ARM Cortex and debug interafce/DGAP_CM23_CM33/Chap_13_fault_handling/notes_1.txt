A summary of the fault exceptions available in Arm Cortex-M23 and Cortex-M33 processors are listed in Table 13.1.
MemManage Fault, BusFault, UsageFault, and SecureFault are often referred to as
configurable faults because they can be enabled/disabled by software, and because their
exception priority levels are programmable.

( TABLE 13.1 Fault exceptions availability in Armv8-M processors. )

To detect the error type that was triggered in the fault handler, the Cortex-M33 processor
has several Fault Status Registers (FSRs). The status bits inside these FSRs indicate the fault
type that has been detected. Although it might not pin-point exactly when or where things
had gone wrong, locating the source of the problem is made easier when these additional
pieces of information are available. Additionally, in some instances, the faulting address is
also captured by Fault Address Registers (FARs). Further information on FSRs and FARs
are covered in Section 13.5.

Memory management (MemManage) fault causes:

MemManage faults can be caused by a violation of access rules, which are defined by the
MPU’s configuration. For example:
• Unprivileged tasks trying to access a memory region, which is privileged access only.
• Access to a memory location which is not defined by any defined MPU region (except the
Private Peripheral Bus (PPB), which is always accessible by privileged code).
• Writing to a memory location which is defined as Read-Only by the MPU.
• A program execution in a memory region that is marked as eXecute Never (XN).
The accesses that trigger the fault exception could be data accesses during a program
execution, program fetches, or stack operations during exception handling sequences.

When the TrustZone security extension is implemented, there can be two MPUs in the
processor: one Secure and one Non-secure.
• For data access during a program execution:
- The selection of the MPU is based on the security state of the processor—i.e., whether the
processor is in Secure or Non-secure states.
• For instruction fetches:
- The selection of the MPU is based on the security attribute of the program address. This
allows the program to fetch instructions from the other security state (this is needed
when calling functions/subroutines that are in the other security domain).
- For instruction fetches that trigger a MemManage fault, the fault triggers only when the
failed program location enters the execution stage.
• For a MemManage fault triggered by stack operations during an exception handling
sequence:
- The MPU selected is based on the security state of the interrupted background code.
- If the MemManage fault occurred during stack pushing in the exception entrance
sequence, it is called a stacking error.
- If the MemManage fault occurred during stack popping in the exception exit sequence, it
is called an unstacking error.
The MemManage fault can also be triggered when attempting to execute program code in
the eXecute Never (XN) regions, e.g., the PERIPHERAL region, the DEVICE region or the
SYSTEM region (Table 6.4). This fault occurs even when the Cortex-M23 and Cortex-M33
processors do not have the optional MPU implemented.

Bus faults

Bus faults can be triggered by error responses received from the processor bus interface
during a memory access. For example:
• An instruction fetch (read)—also called prefetch abort in traditional Arm processors.
• A data read or data write—also called data abort in traditional Arm processors.
In addition to the aforementioned memory access, the bus fault can also occur during the
stacking and unstacking of an exception handling sequence. If the bus error is caused by:
• stack pushing during the exception entry sequence, it is called a stacking error.
• stack popping during the exception exit sequence, it is called an unstacking error.
If the bus error happens during an instruction fetch, the bus fault only triggers when the
failed program location enters the execution stage. Therefore, even though a branch shadow
access would result in a bus error response, the bus fault exception would not be triggered
because the instruction would not enter the execution stage. (Note: A branch shadow contains
instructions that are fetched by the processor but which are not executed because of a previous branch operation.)
Please note, if a bus error is returned at a vector fetch, the HardFault exception is activated
even when the Bus Fault exception is enabled.
There are several reasons why a memory system might return an error response.
These are:
• When the processor attempts to access an invalid memory location: When this happens, the
transfer is sent to a default slave module in the bus system. The default slave returns an
error response and triggers the processor’s bus fault exception.
• When the device is not ready to accept a transfer: For example, when it tries to access
DRAM without initializing the DRAM controller it might trigger a bus error. This behavior
is device specific.
• When the bus slave receiving the transfer request returns an error response: This could
happen if the transfer type/size is not supported by the bus slave or if the peripheral
determines that the operation is not allowed.
• When unprivileged software accesses a privileged-access only register on the Private
Peripheral Bus (PPB). This violates the default memory access permission (see
Section 6.4.4).
• When a system level TrustZone access permission control component (e.g., a memory
protection controller, a peripheral protection controller, or other types of TrustZone access
filter components. Section 7.5 refers) detects a disallowed transfer, these components,
optionally, generate a bus error response when blocking the disallowed transfer.
Bus faults can be classified into:
• Synchronous bus faults—fault exceptions that happen as soon as the memory access
instruction is executed. When this happens, the processor is not allowed to complete the
faulting instruction and cannot continue. During the entry to the fault exception, the return
address in the exception stack frame points to the faulting instruction (Note: In early
versions of the Arm Cortex-M document a synchronous bus fault was referred to as a
precise bus fault).
• Asynchronous bus faults—fault exceptions that happen sometime after the memory access
instruction has been executed. This happens if the bus error response is not immediately
received by the processor. (Note: In early versions of the Arm Cortex-M document an
asynchronous bus fault was referred to as an imprecise bus fault.)
The reason a bus fault becomes asynchronous (imprecise) is due to the presence of write
buffers or caches in the processor’s bus interface. For example, when the processor writes data
to a Device-E address (i.e., a device address location, which allows an instruction to be completed while the actual transfer is still ongoing, see Table 6.3 and Fig. 6.3), the processor can
complete the write instruction and execute the next instruction(s). At the same time, the write
operation is handled by the write buffer at the bus interface. If the bus slave responds with a
bus error, by the time the processor receives the bus error, the processor could have executed
several other instructions after the write, and as a result, the bus fault is asynchronous (i.e., the
fault event timing is decoupled from the processor’s pipeline). Similarly, the presence of a
data cache can also delay a write transfer and thus result in an asynchronous bus fault.
Write buffer and data caches allow the processor system to achieve a high performance but
the downside to this is that it can make debugging more difficult. This is because when an
asynchronous bus fault exception has been triggered the processor could have executed several instructions. If one of those instructions is a branch instruction, and if the branch target is
accessible via several execution paths, it could be hard to tell, unless you have access to instruction trace information (Sections 16.3.6 and 16.3.7), where the faulting memory access
took place.
In the Cortex-M23 and Cortex-M33 processors, there are no internal caches and internal
write buffers. Therefore, bus errors received by way of the execution of data access instructions
are always synchronous. If a system level cache is present, the cache unit usually forwards
asynchronous bus errors back to the processor in the form of an interrupt signal(s).

Usage Faults

There are a wide range of reasons for a Usage Fault exception. This could be:
• The execution of an undefined instruction (including the execution of floating-point
instructions when the floating-point unit is disabled or is not present).
• The execution of coprocessor instructions or Arm Custom Instructions—Although, the
Cortex-M33 processor supports coprocessor instructions and Arm Custom Instructions,
for the instruction to execute successfully, the coprocessor or hardware accelerator
specified by the instruction needs to be present, enabled, and must not return an error
response to the processor. Otherwise, a Usage Fault is triggered. The Cortex-M23 does not
support coprocessor and Arm Custom Instructions.
• Trying to switch to Arm state—Classic Arm processors, such as the Arm7TDMI®, support
both the Arm and Thumb instruction sets, while the Cortex-M processors only support
Thumb ISA. Software ported from classic Arm processors could contain code that switches
the processor to Arm state and which then needs to be updated in order to run on the
Cortex-M processor.
• An invalid EXC_RETURN code occurring during an exception-return sequence (see
Section 8.10 for information on the EXC_RETURN code). An example of this would be
trying to return to Thread level, but when the stacked IPSR in the stack frame is nonzero
(i.e., there are still other exception(s) active).
• An unaligned memory access on the Cortex-M23 processor, or when using an unaligned
address with the Armv8-M Mainline processor (e.g., the Cortex-M33 processor) for
multiple load or multiple store instructions (including load double and store double, see
Section 6.6).
• An exception return with Interrupt-Continuable Instruction (ICI) bits in the unstacked
xPSR, but where the instruction being executed after the exception return is not a multipleload/store instruction.
• A violation of stack limit checking (see Section 11.4). This is new in Armv8-M and is not
available in either the Armv6-M or the Armv7-M.
It is also possible, by setting up the Configuration Control Register (CCR, see Sections
10.5.5.4 and 10.5.5.5), to generate usage faults for the following instances:
• Divide by zero
• All unaligned memory accesses
Please note, to enable the floating-point unit or to use the coprocessor instructions (e.g.,
MCR, MRC, see Section 5.21) software needs to write to:
• The Coprocessor Access Control Register (CPACR, see Section 14.2.3), and
• If TrustZone is implemented, the Non-secure Access Control Register (NSACR, see
Section 14.2.4).
If these steps are not carried out, a UsageFault is generated when attempts are made to
access the FPU or the coprocessor(s).
