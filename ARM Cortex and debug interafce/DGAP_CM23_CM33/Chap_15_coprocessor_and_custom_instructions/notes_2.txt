Comparing the coprocessor and the Arm Custom Instructions with
memory mapped hardware accelerators
Before the Cortex-M33 processor was available, chip designers had already integrated
hardware accelerators into many of their projects using memory mapped hardware
(Fig. 15.3).
In many ways, this is similar to the coprocessor interface solution; however, the coprocessor interface method has a number of advantages:
• The coprocessor’s interface between the processor and the coprocessor hardware is 64-bit
wide and can handle 64-bit and 32-bit transfers. Whereas, the AMBA® AHB bus interface
on the Cortex-M33 processor is 32 bits, and therefore, the coprocessor interface provides a
higher bandwidth.
• When using a memory mapped register to transfer data, we first need an instruction to
place the address value (or base address value of the accelerator) into one of the processor’s
register. Then another instruction is needed to carry out the actual data transfer. In contrast
to the memory map register method, a coprocessor instruction contains the coprocessor
number and its register number(s), thus there is no need to use a separate instruction to set
up the address.
• A coprocessor instruction can transfer data between the processor and the coprocessor
register, as well as pass control information (i.e., custom-defined opcode) at the same time.
Whereas for memory mapped hardware accelerators you will need to transfer the control
information with an additional memory access.
• The data transfers between the processor and the coprocessor hardware is not affected by
other activities on the bus systems. For example, it is not delayed by another bus transfer,
which could have multiple clock cycles of wait states.
All these advantages also apply to the Arm custom instructions.

several coprocessor numbers are reserved inside Arm
processors:
• CP15 is used for various system control functions (used by Cortex-A and Cortex-R
processors, not used by Cortex-M processors)
• CP14 is reserved for debug functions (used by Cortex-A and Cortex-R processors, not used
by Cortex-M processors)
• CP10 and CP11 are reserved for the floating-point unit (used by all Cortex processors)

( FIG. 15.5 Concept of a coprocessor interface in the CortexM33 processor which greatly simplifies the design of coprocessors. )

the initial decode of the coprocessor instructions is handled by the instruction decoder in the main processor, with the transfer of control information and data between the processor and the coprocessors controlled by using simple handshaking signals (Fig. 15.5).

The coprocessor interface and the Arm Custom Instructions features, both use the concept
of a coprocessor ID value. The instruction set architecture uses a bitfield (4-bit) to define
which coprocessor is accessed, meaning, in theory, that there could be up to 16 coprocessors
attached to a processor. However, only coprocessors ID #0–#7 are allocated for customdefined solution(s), with these eight units being either:
• coprocessors connected via the coprocessor interface, or
• custom data path units inside the processor.
Other coprocessor numbers are reserved for internal use by the Arm processor (e.g., CP10
and CP11 are used by the FPU and by the Helium processing unit for the Cortex-M55
processor).
Please note, software cannot change how each coprocessor ID is used.

( TABLE 15.1 ACLE defined intrinsic functions for coprocessor access. )

To utilize the coprocessor instructions in the C programming environment, the Arm
C language extension (ACLE) [3] defines a range of intrinsic functions to access the coprocessor instructions. These are shown in Table 15.1.
To use these intrinsic functions, you must include the Arm ACLE header file:
#include <arm_acle.h>
The header file is available when the “__ARM_FEATURE_COPROC” feature macro is
defined.
An example of reading a coprocessor register is as follow:
unsigned int val;
// CP[x],op1,CRn,CRm,op2
val = __arm_mrc(1, 0, 0, 0, 0);
// coprocessor #1, Opc1=0, CRn=c0, CRm=c0, Opc2=0

and when writing a coprocessor register:
unsigned int val;
// CP[x],op1, value,CRn,CRm,op2
__arm_mcr(1, 0, val, 0, 4, 0);
// coprocessor #1, Opc1=0, CRn=c0, CRm=c0, Opc2=0
There are also additional intrinsic functions which can be used to support other data types
(Table 15.2).
When using the intrinsic functions listed in Table 15.2, the constant character string (that is,
“*special_register”) is based on the following format:
cp<coprocessor>:<opc1>:c<CRn>:c<CRm>:<op2>
There is an equivalent alternative syntax that can be used and this is:
p<coprocessor>:<opc1>:c<CRn>:c<CRm>:<op2>
The following code shows how a coprocessor register can be read using one of the intrinsic
functions listed in Table 15.2:
unsigned int val;
val = __arm_rsr("cp1:0:c0:c0:0"); // coproc #1, op1=0, op2=0
To write to a coprocessor register, the following code can be used:
unsigned int val;
__arm_wsr("cp1:0:c0:c0:0", val); // coproc #1, op1=0, op2=0
Using various programming techniques, for example, C macros, it is straightforward to
create easy-to-use software wrappers that layer on top of those intrinsic functions. The use
of the software wrappers can make the software much more readable.

( read more from book if want to read )
