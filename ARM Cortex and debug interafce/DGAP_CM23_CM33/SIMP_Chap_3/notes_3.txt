Similar to many other security technologies, TrustZone for Armv8-M works by providing a partitioning mechanism to ensure software components can only gain access to resources that are allocated to them. Such an arrangement ensures that an attacker (e.g., a hacker) cannot gain full control of the system or access secret data if one of the software components has been compromised. While previous generations of the Cortex-M processor already provided privileged and unprivileged levels, the  aforementioned is inadequate for securing systems. For example:
• Software vulnerabilities in privileged codes like peripheral drivers (including interrupt handlers) can potentially allow hackers to gain privileged execution level and hence have full access to the system.
• Microcontrollers with preloaded on-chip firmware might need to be protected against untrusted software developers as hackers could pose as software developers, purchase the chips and then try to reverse engineer them.

In some of the latest IoT microcontroller designs, the chips have a range of preloaded firmware for IoT connectivity. This firmware might include preloaded security certificates or security keys, which allow software developers to create applications that establish secure connections to cloud services by accessing APIs in the preloaded firmware. TrustZone technology is a very good fit in such instances and Fig. 3.15 demonstrates an example of this fit. In such TrustZone based systems, it is expected that:
• The security keys (including crypto keys) are not accessible from the Non-secure world— all cryptography operations are handled by the preloaded firmware.
• Security resources, such as secure storage, unique ID and True Random Number Generator (TRNG) are also protected. TRNG needs to be protected as it might contain entropy for session keys generation (session keys are used for protecting a secure internet connection).
• The firmware update mechanism is also protected. When the protection feature is enabled, only program images that are validated (e.g., correctly signed using crypto operations) can be used to update. Such protection is used with the Life Cycle State (LCS) management support of the product and with the debug authentication feature. An example of LCS management can be defined at chip level as (Table 3.9).
• The chip contains Non-volatile memory (NVM) for LCS management. NVM’s have a protection mechanism to prevent the reversing of the LCS.
• The Secure software would, optionally, implement system health check services that run in the background when the system is deployed. This can be triggered by a Secure timer interrupt so it is run periodically. The priority level of this timer interrupt can be configured at a higher level than the other Non-secure interrupts so that it cannot be blocked by Non-secure software.

When IoT systems are connected to the internet, they could, potentially, be under attack via connectivity interfaces (e.g., WiFi). As the applications get ever-more complex, there could, inevitably, be bugs in those applications that could result in vulnerabilities and which can then be exploited by hackers. In previous Cortex-M system designs, if a hacker gained privileged level execution, he could gain full control of the system and could potentially then modify the flash program memory to their own version. If that scenario came to fruition, the IoT system would then either need to be replaced or an engineer would have to be on-site to reprogram the device. In a TrustZone capable IoT microcontroller, the situation is much better. Since the security critical resources are protected, the hacker:
• Cannot reprogram/erase the flash memory
• Cannot steal the secret keys
• Cannot clone the device
• Cannot stop Secure software services (e.g., health checking services)

If a health checking service is implemented, it could potentially detect the attack (or detect abnormal system behavior) and trigger system recovery actions. Since the flash memory would not have been modified, the system would be able to recover by simply restarting.

In addition to IoT microcontrollers, TrustZone is used for:
• Firmware protection: In some instances, microcontroller vendors need to integrate thirdparty software components into a device and need to ensure that the firmware assets cannot be reverse engineered. TrustZone technology enables the firmware assets to be protected, while still allowing software developers to make use of the software components.
• Protecting the operations of a certified software stack: Since the operation of critical Secure operations can be protected, some of the certified software like Bluetooth software stacks can use TrustZone to protect its operations. Even if a Non-secure application was programmed incorrectly or crashes, the protected Bluetooth operations remain functional and its certification is not voided.
• Consolidation of multiple processors into one: Previously, in some of the complex SoC designs, there were multiple Cortex-M processor subsystems to isolate Secure and Nonsecure data processing. With the TrustZone capability available in the Cortex-M23 and Cortex-M33 processors, it is now possible to merge some of those processor systems.
• Providing a sandboxed software execution environment: In some operating system designs, the security partitioning feature enables the OS to execute software components in a sandboxed environment.

There are, of course, some designs where the processor is just used in a simple system arrangement without the need for IoT security. For example, a smart sensor with an integrated processor might have a serial interface (e.g., I2C/SPI) for connection to a “trusted” host processor. As a result, the need for a TrustZone security extension is optional.
