If the TrustZone security extension is implemented, a number of hardware units, including some of the system components inside the processor, such as the NVIC, will contain both Secure and Non-secure information. To help separate the information, banking of registers is sometimes used. There are a number of arrangements for handling security in registers in the System Control Space. They are as follows:

(1) The register is banked (e.g., Vector Table Offset Register, VTOR, Fig. 7.2) Physically, there are two versions of the same register, for example, VTOR_S and VTOR_NS. When in Secure state, Secure software accessing SCB->VTOR (SCB is the System Control Block, a data structure defined in the CMSIS-CORE header file) sees the Secure VTOR (VTOR_S). When in Non-secure state, Non-secure software accessing SCB->VTOR sees the Non-secure VTOR (VTOR_NS).
(2) The register is not banked (e.g., Software Trigger Interrupt Register, STIR, Fig. 7.3) Physically, there is only one version of the register and the register does not have any banked contents. However, the behavior of the register can either be identical or different between the Secure and Non-secure states. For SCB->STIR, only Secure software can use this register to trigger Secure interrupts (IRQs).
(3) Some bit fields of the register are banked (e.g., System Control Register, SCR, Fig. 7.4) Some bit fields of the registers are banked but some bit fields are not. Secure software sees the Secure version of the banked bit fields and Non-secure software sees the Nonsecure version.

In Chapter 6, the memory map diagram (Fig. 6.1) showed a System Control Space (SCS) at address 0xE000E000 and a SCS Non-secure alias at address 0xE002E000. The SCS Non-secure alias allows Secure software to access the SCS using the behavior of Non-secure software:
- It is able to access the Non-secure version of banked registers or banked bit fields in the register, and
- It is able to mimic the action of Non-secure software
As a result of this feature, the CMSIS-CORE header files for the Cortex-M23 and the CortexM33 processors support additional data structures to allow Secure software to access the registers in the SCS Non-secure alias address range. These data structures are listed in Table 7.3.

One of the key functions of TrustZone for Armv8-M is to allow Secure software to provide APIs that can service Non-secure software (an  example of this is shown in Fig. 7.5). Since the Secure APIs can process and transfer data on behalf of Non-secure applications, and can themselves access the Secure memory, these Secure APIs have to verify the pointers to ensure that the pointers they have received from the Non-secure applications are indeed pointing to the Non-secure addresses. If that was not the case, it would be essential to stop Non-secure software from erroneously using those APIs to access or modify Secure data.

( FIG. 7.5 Pointer checking is needed to enable the Secure API to process data on behalf of Non-secure software. )

The pointer check functions for the Secure APIs must:
(1) Ensure that the whole data structure/array to be accessed on behalf of Non-secure
software is in a Non-secure space––just checking the starting address is not enough.
(2) Ensure that the Non-secure software does have access permission for the data.
For example, Non-secure software calling the API can be unprivileged and should not, therefore, be allowed to access memory ranges that are privileged access only. Accordingly, the security check must look up the MPU permissions to prevent the Nonsecure unprivileged software using these APIs to attack the Non-secure privileged software.

Traditionally, Arm architecture offers memory access instructions which are unprivileged. Using these instructions (Table 7.4), privileged software, such as the APIs inside an OS, can access memory as unprivileged. However, there are some limitations with this solution:
• These instructions are not available for Armv8-M baseline and Armv6-M architectures.
• These instructions only cover unprivileged access, but there is no TrustZone variant (there are no instructions for Non-secure access).
• There is no standardized C language feature to force the C compilers to use these instructions instead of the normal load/store instructions.
• It cannot be used in the application scenario where the actual memory access is not carried out by the processor (e.g., where the API is a DMA memory copy service and where the transfers are handled by the DMA controller).
• If an access violation takes place, the APIs need to deal with the fault exceptions, which can be complicated.

In Armv8-M, the TT instructions provide a new mechanism to handle the pointer check by allowing software to determine the security attribute and access permission of a memory location (i.e., the pointer that is passed to a Secure API). This allows security checking to be checked at the beginning of the API service (instead of during the operation when the data is being accessed), thus enabling the APIs to use other hardware resources (e.g., DMA controllers) to access the memory. By moving the pointer checking to the beginning of the API service makes for easier error handling. To make programming easier, the Arm C Language Extension (ACLE) [2] defines a number of C intrinsic functions to provide pointer checks. After the pointer checks are completed, the data processing is then handled in standard C/C++ code.

A TT instruction has one input and one output (Fig. 7.6):
• 32-bit input––an address
• 32-bit output––a 32-bit value which contains multiple bit fields TT and TTT instructions are available in both Secure and Non-secure states. If these two instructions are executed in the Non-secure state, only MREGION, MRVALID, R and RW fields are available (Fig. 7.7).
