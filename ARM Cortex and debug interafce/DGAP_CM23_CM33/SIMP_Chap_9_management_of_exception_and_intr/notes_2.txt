The System Control Block (SCB) contains a collection of registers for:
• System management (including system exceptions).
• Fault handling (further information on this is available in Chapter 13).
• Access management for the Coprocessor and the Arm Custom Instructions feature (further
information on this is available in Chapter 15).
• Software to determine the processor’s available features using a number of ID registers
(this is essential in some applications because of the configurability of the processors).

( very imp: TABLE 9.15 Summary of the SCB registers for system exception management )

• To trigger PendSV/NMI/SysTick exception, software needs to access the ICSR.
• To manage (e.g., to enable) configurable fault exceptions (i.e., BusFault, UsageFault,
MemManage Fault, and SecureFault) for the Cortex-M33 processor, software needs to
access the SHCSR

Interrupt Control and State Register (SCB->ICSR)

The ICSR register is used by application code to:
• Set and clear the pending status of system exceptions, including SysTick, PendSV,
and NMI.
• Determine the current executing exception/interrupt number by reading VECTACTIVE.

The ICSR, in addition to being used for software purposes, is also be used by the debugger
to determine the processor’s interrupt/exception status. The VECTACTIVE field in the SCB-
>ICSR is equivalent to the IPSR and is easily accessed by a debugger. The bit fields of the ICSR
are listed in Table 9.16.
In this register, a fair number of the bit fields are for use by the debugger to determine the
system’s exception status. In many applications, only the system exception’s pending bits and
STTNS are used by the software.

( very imp: TABLE 9.16 Interrupt Control and State Register (SCB->ICSR, 0xE000ED04) )

System Handler Priority Registers (SCB->SHP[n])

Some of the priority levels of system exceptions are programmable. The programmable
level registers for system exceptions have the same width as the interrupt priority level registers.

For Armv8-M Mainline (e.g., the Cortex-M33 processor):
• Priority levels for SVC, PendSV, and SysTick, fault exceptions and the Debug Monitor
exception are programmable.
• The SCB data structure defined SHPR (Fig. 9.2) is an array with twelve 8-bit unsigned
integers. Some of the bytes are not used and are tied to 0.
• The priority level bit fields are 8-bit wide, with configurable number of implemented bits
(ranging from 3 to 8). The unimplemented bits are always 0.

( very imp: TABLE 9.17 Banking of priority level registers for system exceptions )

Application Interrupt and Reset Control Register (SCB->AIRCR)

The AIRCR register (Table 9.18) is used for:
• Controlling priority grouping in exception/interrupt priority management.
• Providing information about the Endianness of the system (can be used by software as well
as the debugger).
• Providing a self-reset feature.
The priority grouping feature is covered in Section 8.5.2.

( very imp: TABLE 9.18 Application Interrupt and Reset Control Register (SCB->AIRCR, 0xE000ED0C) )

SYSRESETREQ (and SYSRESETREQS) is used for software-generated reset and is used by
the debugger to reset a hardware target that is under development. Further information on
this topic is covered in Chapter 10, Section 10.5.3.

there are some differences between the AIRCR in Armv8-M and the same registers in the architectures of Armv6-M and Armv7-M. For example:
• If TrustZone is implemented, there are new bit fields that are available to the Secure
software. These new bit fields include SYSRESETREQS (for managing the accessibility of
the self-reset feature), PRIS (for prioritizing Secure exceptions), and BFHFNMINS (for
defining the target security states for BusFault, HardFault, and the NMI exceptions).
• The VECTRESET bit in the AIRCR of Armv7-M which generates the processor only reset
has been removed. This bit was available in the Cortex-M3 and Cortex-M4 processors.
Since this bit was reserved for debugger use, the removal of this bit does not require
changes to the software (Note: software should be using SYSRESETREQ for reset
generation rather than using VECTRESET. This is because the reset of just the processor
without resetting the peripherals could, in some applications, cause a problem).

System Handler Control and State Register (SCB->SHCSR)

With Armv8-M Mainline, configurable fault exceptions (including UsageFault, Memory
management (MemManage) faults, BusFault, and SecureFault exceptions) can be enabled
by writing to the enable bits in the System Handler Control and State Register (SHCSR,
0xE000ED24). The pending status of faults and the active status of most of the system exceptions are also available in this register (Table 9.19).

( very imp: TABLE 9.19 System Handler Control and State Register (SCB->SHCSR, 0xE000ED24) )

In most instances, this register is used by application code for enabling configurable fault
handlers (i.e., MemManage Fault, BusFault, UsageFault, and SecureFault).
Important: Be careful when writing to this register; make sure that the active status bits of
the system exceptions (bits 0–11) are not accidentally changed. For example, when enabling
the BusFault exception, you could use the following read-modify-write operation:
SCB->SHCSR j= 1<<17; // Enable Bus Fault exception
Otherwise, if a single write operation is used (i.e., not a read-modify-write), the active state
of a system exception could accidentally be cleared. This would result in a fault exception
being generated when the active system exception handler executed an exception exit.
