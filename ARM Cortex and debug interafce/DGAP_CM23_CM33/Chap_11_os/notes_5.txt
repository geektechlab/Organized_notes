The separation of privileged and unprivileged execution levels is a common feature in
modern embedded processors, and has been part of the architecture of Arm Cortex-M processors right from the start (i.e., when the Cortex-M3 was developed). A robust OS can be
created to utilize the separation of privileged and unprivileged execution levels in conjunction with the MPU feature. By so doing, a rogue application thread/task running in
unprivileged state:
• Cannot access/modify memory locations which are used by the OS or by other application
tasks/threads.
• Cannot affect critical operations (i.e., interrupt handling settings and system
configurations cannot be changed).
With this arrangement, even when an application task crashes, or has been attacked by a
hacker and has been compromised, the OS and other application tasks would still be able to
execute. Although other application tasks could still be affected, the system is able to implement fail-safe mechanisms, such as generating a self-reset (see Section 10.5.3), to recover the
system.
This arrangement not only benefits security (e.g., from the aspect of IoT applications), but
also helps functional safety (e.g., in automotive and industrial applications where the robustness of the system is critical).

To satisfy the requirements of security and functional safety, Cortex-M processors have
been designed to have the following characteristics:
• Restrictions to system resource management functions––these functions (e.g., most special
registers and the registers in key hardware units such as the NVIC, the SCB, the MPU and
in SysTick), are not accessible by unprivileged software.
• Memory protection––Privileged software, such as the OS, can configure the MPU to restrict
the access permission of unprivileged threads. In an OS environment, the MPU
configuration is changed at each context switch of the unprivileged threads (Note: because
there are separate MPU’s for the Secure and the Non-secure worlds, switching between a
Secure and Non-secure context does not always require the MPU to reconfigure).
• Restrictions to system instructions––Some instructions that change a processor’s settings
(e.g., CPS instructions can be used to disable interrupts) cannot be used in unprivileged
state.
• Supports a system-wide security arrangement––Chip designers can utilize the processor’s
security information on the bus interface to implement system level security management
control functions to prevent security breaches. The security information on the bus
interface includes the privilege level and also the security attribute of the bus transactions.
The Memory Protection Unit (MPU) is essential for protecting the memory used by
privileged software and critical software components. The Cortex-M23 and Cortex-M33 processors both support optional MPUs, with the MPUs in those processors having a number of
enhancements when compared to the MPUs in the previous generations of Cortex-M processors. These enhancements are:
• Up to 16 MPU regions compared to a maximum of 8 regions in previous designs.
• A new programmer’s model enabling a more flexible approach when programming
memory region settings in the MPU.
The MPU components in Cortex-M processors are optional.

( read and compare 11.7 Exclusive access )
