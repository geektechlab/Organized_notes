A number of instructions were introduced for Armv8-M to enable the TrustZone security extension to work. The following instructions are available in both Armv8-M Baseline and Mainline processors (Table 5.78). Information on the handling of Secure and Non-secure software  transitions, and the use of TT{A}{T} instructions, are covered in Chapter 7, Section 7.4.2 and in Chapter 18. VLLDM and VLSTM are two instructions that were added to Armv8-M Mainline processors for context saving and for the restoration of register contents in the floating-point unit (FPU). If Secure software needs to call certain Non-secure functions/subroutines frequently it can, if these two instructions are not available, be very inefficient.

( IMP: TABLE 5.78 TrustZone support instructions. )

Without the VLLDM and the VLSTM instructions, for each Non-secure function call,
• The data in the FPU would need to be saved to the Secure stack, then
• the FPU registers would need to be erased (to prevent leakage), and then
• the Non-secure function would need to be called.

After the completion of the Non-secure function call, we would then need to restore the registers. This is inefficient because many of the Non-secure functions/subroutines being called might not have used the FPU. The VLSTM and VLLDM instructions were, therefore,  introduced to make the process more efficient.

The VLSTM and the VLLDM instructions (Table 5.79) improved the process by saving and restoring the FPU registers only if the Non-secure function used the FPU. Instead of storing all of the FPU register bank data in the Secure stack before calling a Non-secure subroutine, Secure software allocates space in the Secure stack (pointed to by Rn) and uses the VLSTM to enable lazy stacking.

This means the actual stacking and clearing of the Secure FPU registers only happens when the Non-secure subroutine uses the FPU. After the Non-secure function/ subroutine completes and returns to the Secure world, Secure software uses the VLLDM to restore the saved data from the Secure stack—but only if the Secure FPU data has been pushed to the Secure stack. If the called Non-secure function/subroutine did not use the FPU, then the actual saving and restoring of the FPU registers does not take place and, hence, the number of clock cycles needed is reduced. If the FPU is not implemented or is disabled, the VLSTM and VLLDM instructions execute as NOPs (no operation).

The coprocessor instructions and Arm custom instructions allow chip designers to extend the processing capability of the processor’s  system. The coprocessor instructions were introduced when the Cortex-M33 processor was first released and the Arm Custom Instructions was introduced in the middle of 2020 when the Cortex-M33 revision 1 was released.

( TABLE 5.79 VLSTM and VLLDM instructions for TrustZone support for Armv8-M Mainline. )

The coprocessor interface support enables chip designers to add closely coupled hardware accelerators to the Cortex-M33 processor. The functions of the accelerators are defined by chip designers and/or by microcontroller vendors. These hardware accelerators are typically used for mathematical calculations (e.g., trigonometric functions) and crypto acceleration, etc. The Cortex-M33 processor supports up to eight custom defined coprocessors (#0–#7), with each of them potentially being implemented as:
• A coprocessor hardware unit external to the processor and connected via the coprocessor interface
• A custom data path unit within the processor (This feature is available from the middle of 2020 in the Cortex-M33 revision 1)

A coprocessor hardware unit, which is outside the processor, can have up to 16 coprocessor registers. Although the interface (Fig. 5.20) between the processor and the coprocessor supports 32-bit and 64-bit data transfers between the register bank and the coprocessor’s registers, the exact size of the coprocessor registers is defined by chip designers. The coprocessor instructions are divided into three types:
• Transferring data from the processor’s register bank to one or two coprocessor registers, with opcodes for defining operation(s).
• Transferring data from one or two coprocessor registers to the processor’s register bank, with opcodes for defining operation(s).
• Coprocessor operations (opcodes+ coprocessor register specifiers).

When compared to the memory mapped peripheral approach, a coprocessor interface provides a faster way to access hardware accelerators. This is because:
• The coprocessor interface can transfer up to 64 bits of data at a time, whereas the bus interfaces on the Cortex-M33 processor can only transfer a maximum of 32 bits per cycle.
• Coprocessor transfers are not affected by system level bus traffic (e.g., it is not delayed by another bus transfer which could have multiple clock cycles of wait states).

( FIG. 5.20 Coprocessor interface )

( TABLE 5.80 Coprocessor instructions )

• The software does not have to first setup the address in a register before starting the transfer. This is because the coprocessor ID and  coprocessor register specifiers are part of the coprocessor instruction’s encoding.
• The software does not have to use a separate transfer to define the coprocessor’s operation. This is because the coprocessor opcode is part of the coprocessor instruction’s encoding.

The MRC and MRC2 instructions support the transfer of the APSR.NZVC flags when the processor register field (Rt) is set to PC (0xF). For historical reasons, multiple instruction encodings are available (e.g., MCR, MCR2). Coprocessor instructions were available in early Arm processors and from Arm architecture v5, more coprocessor instructions (MCR2, MRC2, MCRR2, MRRC2, and CDP2) were introduced into the Arm instruction set (but not the Thumb instruction set). The new additions provide more space for opcode bits, but do not have a conditional execution capability. Please note, Armv8-M architecture has defined additional coprocessor instructions for memory access. However, these instructions (Table 5.81) are not supported by the CortexM33 processor. Any attempt to execute these instructions would result in a fault exception UsageFault with Undefined Instruction error). The Arm custom instructions allow chip designers to define custom data processing instructions inside the Cortex-M33 processor. The architecture of the Arm custom instruction instructions supports five data types:
• 32-bit integer,
• 64-bit integer (D—dual variant),
• single precision float (32-bit, fp32)—supported by the Cortex-M33 r1, if the FPU is included,
• double precision (64-bit, fp64, not supported by the Cortex-M33 r1), and
• MVE vector in Armv8.1-M (128-bit, not supported by the Cortex-M33 r1).

For each data type in the Arm custom instructions, there are three subtypes, which results in a total of 15 classes (Table 5.82). These subtypes support zero to three input operands and an additional immediate data value which enables multiple instructions to be defined. For each class, there is a normal and an accumulative variant. The Accumulative variant of these instructions (indicated by the {A} suffix), allows the destination register to be used for source data and also as the destination. Only the accumulative variant of integer-type Arm Custom Instructions can be used in IT instruction blocks for conditional execution. Please note, Arm Custom Instructions for floating-point and vector data types, and nonaccumulative variants, cannot be used in IT instruction blocks. Similar to the coprocessor interface instructions, CX1{A}, CX2{A}, and CX3{A} instructions support the transfer of N,Z, C, V flags when the processor register field (Rd/Rn) is set to APSR_nzcv, which is encoded as 0xF. For the CX1D{A}, CX2D{A}, and CX3D{A} instructions, APSR_nzcv can be used as an input and is encoded as 0xE. When using double word Arm custom instructions (CX1D{A},CX2D{A},CX3D{A}), the destination is placed in Rd and R(d+1)—where d must be an even number and less than 12. For information on using these coprocessor instructions in C using intrinsic functions, please refer to Chapter 15, Section 15.4. Before using coprocessor instructions or Arm custom instructions, the corresponding coprocessor must be enabled by software as, by default, they are disabled. In addition, Secure software should also setup the access permissions of the coprocessors during security initialization. Further  information on the setup requirements of access permissions is coveredinChapter 15, Section 15.5.

In addition to the support of the BKPT instruction, the Cortex-M23 and Cortex-M33 processors also support a breakpoint unit which provides up to four (for the Cortex-M23) or eight (for the Cortex-M33) hardware breakpoint comparators. When using a hardware breakpoint unit there is no need to replace the original instructions in the program memory as there is in software breakpoint operations.

there is no data cache inside the Cortex-M23 and Cortex-M33 processors.

there is no instruction cache inside the Cortex-M23 and Cortex-M33 processors.

( TABLE 5.83 Miscellaneous unsupported hint instructions. )

All other undefined instructions, when executed, will cause a fault exception to take place, either a HardFault or a UsageFault.

Since the release of the Armv8-M architecture, Armv8-M architecture has been updated to include a number of new instructions. For example, since the discovery of Spectre and Meltdown (security vulnerabilities), Arm has introduced additional instructions to address potential security issues, caused by speculative execution optimization in some processor implementations. Speculative execution is a commonly used optimization technique used in high-end processors with a long pipeline and complex memory systems. Since Cortex-M processors are not affected by the Spectre and Meltdown vulnerabilities, I have not covered these instructions in this book.

( TABLE 5.84 Instructions added to the Armv8-M Mainline Architecture to address spectra and meltdown vulnerabilities. )

the MRS and MSR instructions that are used for accessing special registers. To make programming easier, the CMSIS-CORE introduced a number of functions for the access of special registers (Table 5.85). In the Table 5.85:
• The functions with the “__TZ” prefix in their function names can only be used by software running in the Secure state.
• Unless specified, these functions use either the MRS or the MSR instructions.
• Apart from functions that access the APSR and the CONTROL, all other functions need to execute at privileged level.
