Exclusive access is commonly used for semaphore operations in systems with an OS, which enables resources to be shared by multiple software tasks/applications. Semaphore operations are  necessary because many shared resources can only deal with one request at a time.

When a shared resource can only service one task or one application thread, it is often called Mutual Exclusion (MUTEX). In such a case, when a resource is being used by one process, it is locked to that process and cannot serve another process until the lock is released. To enable a resource to be shared, a memory location is allocated to a piece of the semaphore data (sometimes called a lock flag: if it is set, it indicates that the resource has been locked). Conceptually, semaphore operations when sharing a resource could include:
• The initialization of the semaphore data to indicate that the resource is free/reserved at the beginning of the program (in most cases the resource is free when the system starts).
• Read-modify-write operations on the semaphore data: If an application needs to access the resource, it will first need to read the semaphore data. If the semaphore data indicates the resource is reserved/used by another application, it must then wait. If the resource is available, it can then set the semaphore data to allocate the resource to itself. On the surface, this simple arrangement should work, but, when looking at the detail, this arrangement could fail if the read-modify-write operation is carried out using normal memory access instructions. This rare situation could occur where both application A and B wishes to access a shared resource at the same time (Fig.6.8).
The activities in Fig. 6.8 are:
(1) Application A reads the semaphore data first and determines that the shared resource is free.
(2) A context switch is triggered before application A write’s back to the semaphore data to allocate the resource.
(3) Application B then reads the semaphore data and also gets the result that the resource is free. It then writes back to the data to allocate the resource.
(4) Application B starts using the resource.
(5) Later on, additional context switching takes place and sometime later, application A is resumed and writes back to the semaphore data to allocate the shared resource.
(6) Application A starts using the shared resource when it was still being used by Application B.

This sequence of events results in an access conflict, resulting in application A destroying the data from application B.

To support exclusive access, the following hardware features are required:
• Local exclusive access monitor—this is inside the processor and contains a single exclusive status bit that is moved to an exclusive state by an exclusive load. This status bit is moved to an open state by an exclusive store and can also be moved to an open state by either an interrupt/exception enter/exit or by the execution of a CLREX instruction.
• Global exclusive access monitor—this is either in the interconnect or the memory controller and monitors access from different bus masters to detect whether any of the exclusive access sequences conflict with other accesses. If an access conflict is detected, the exclusive store is blocked by the global exclusive access monitor. Through the bus interconnect, the exclusive access monitor also returns the exclusive fail status to the processor. Such an action will cause the return status of the exclusive write to be 1 (i.e., it has failed).

The exclusive write (e.g., STREX) returns a failure status if one of the following conditions takes place:
- The local exclusive access monitor was in an open state because of the execution of a CLREX instruction.
- The local exclusive access monitor was in an open state because of the occurrence of a context switch or an interrupt/exception event.
- The local exclusive access monitor was in an open state because an LDREX instruction was not executed before the exclusive store instruction.
- External hardware (e.g., A global exclusive access monitor) detected an access conflict and returns an exclusive fail status to theprocessor via the bus interface.

If the exclusive store receives a failed status the actual write will not take place in the memory. It is either blocked by the processor or by the global exclusive access monitor.
