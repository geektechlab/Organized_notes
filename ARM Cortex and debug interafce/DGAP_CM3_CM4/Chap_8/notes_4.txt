Lazy stacking is a feature related to stacking of the registers in the floating point unit. Therefore it is only relevant to Cortex-M4 devices with a floating point unit. It is not needed for Cortex-M3 devices and Cortex-M4 devices that donâ€™t have the floating point unit.

If the floating point unit is available and enabled, and if it has been used, the registers in the register bank of the floating point unit will contain data that might need to be saved. As can be seen in Figure 8.4, if we need to stack the required floating point registers for each exception, we will need to carry out an additional 17 memory pushes each time, which will increase the interrupt latency from 12 to 29 cycles.

In order to reduce the interrupt latency, the Cortex-M4 processor has a feature called lazy stacking. By default this feature is enabled. When an exception arrives with the floating point unit enabled and used (indicated by bit 2 of the CONTROL register called FPCA), the longer stack frame format is used (as shown in Figure 8.4). However, the values of these floating point registers are not actually written into the stack frame. The lazy stacking mechanism only reserves the stack space for these registers, but only the R0-R3, R12, LR, Return Address, and xPSR are stacked. In this way, the interrupt latency remains at 12 clock cycles. When the lazy stacking happens, an internal register called LSPACT (Lazy Stacking Preservation Active) is set and another 32-bit register called Floating Point Context Address Register (FPCAR) stores the address of the reserved stack space for the floating point register.

If the exception handler does not require any floating point operation, the floating point registers remain unchanged throughout the operation of exception handler, and are not restored at exception exit. If the exception handler does need floating point operations, the processor detects the conflict and stalls the processor, pushes the floating point registers into the reserved stack space and clears LSPACT. After that, the exception handler resumes. In this way, the floating point registers are stacked only if they are necessary.

Lazy stacking operations may be interrupted. When an interrupt request arrives during lazy stacking, the lazy stacking operation will be stopped and normal exception stacking starts. Because the floating point instruction which triggered the lazy stacking has not yet been executed, the PC value stacked for the interrupt will point to the floating point instruction. When the interrupt service completed, the exception return will return to this floating point instruction and reattempting this instruction will again trigger the lazy stacking operation.

If the current executing context (either Thread or Handler) do not use the floating point unit, as indicated by a zero value in FPCA (bit 2 of the CONTROL register), the shorter stack frame format would be used.
