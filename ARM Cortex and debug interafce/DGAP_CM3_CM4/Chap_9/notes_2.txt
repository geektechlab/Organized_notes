The Sleep-on-Exit feature is very useful for interrupt-driven applications where all operations (apart from the initialization) are carried out inside interrupt handlers. This is a programmable feature, and can be enabled or disabled using bit 1 of the System Control Register (SCR; see section 9.2.2). When enabled, the Cortex-M processor automatically enters sleep mode (with WFI behavior) when exiting from an exception handler and returning to Thread mode (i.e., when no other exception request is waiting to be processed). For example, a program utilizing the Sleep-on-Exit might have a program flow as shown in Figure 9.4. The activities of such a system are shown in Figure 9.5. Unlike normal interrupt handling sequences, the stacking and unstacking processes are minimized to save power in the processor as well as memory (apart from the first stacking, which is still required). Please note that the “loop” in Figure 9.4 is required because the processor could still be woken up by debug requests when a debugger is attached.

The Sleep-On-Exit feature should be enabled at the end of the initialization stage. Otherwise, if an interrupt event happened during the initialization stage and if the Sleep-on-Exit feature was already enabled, the processor will enter sleep even if the initialization stage was not yet completed.

Send event on pend (SEVONPEND)
	One of the programmable control bits in the System Control Register (SCR) is the SEVONPEND. This feature is used with the WFE sleep operation. When this bit is set to 1, a new interrupt pending status set triggers an event and can wake up the processor. The interrupt does not have to be enabled, but the pending status before entering WFE needs to be 0 to trigger the wake-up event.

Wake-up interrupt controller (WIC)
	During Deep Sleep, when all the clock signals to the processor are stopped, the NVIC cannot detect incoming interrupt requests. In order to allow the microcontroller to be woken up by interrupt requests even when clock signals are unavailable, a feature called the Wake-up Interrupt Controller (WIC) was introduced in the CortexM3 revision r2p0. The WIC is a small, optional interrupt detection circuit that is coupled with the NVIC in the Cortex-M processor via a special interface, and also linked to the device-specific power control system such as a Power Management Unit (PMU) (Figure 9.6). The WIC does not contain any programmable registers, and the interrupt masking information is transferred from the NVIC to the WIC just before entering Deep Sleep mode.

WIC can operate without any clock signal. When an interrupt request arrives, the WIC detects the request and informs the PMU to restore the clock, then the processor can wake up, resume operations, and service the interrupt request. In some designs, advanced power-saving techniques called State Retention Power Gating (SRPG) can be used to reduce the leakage current of the chip by a wide margin. In SRPG designs, the registers (often called flip-flops in IC design terminology) have a separate power supply for state retention elements inside the registers (Figure 9.7). When the system is in Deep Sleep mode, the normal power supply can be turned off, leaving only the power to the state retention elements on. The leakage of this type of design is greatly reduced because the combinatorial logic, clock buffers, and most parts of the registers are powered down. While the SRPG power down state can help to reduce the sleep mode current of the microcontroller significantly, the processor that is powered down cannot detect interrupt requests. Therefore the WIC is needed when the microcontroller implements SRPG technology. Figure 9.8 illustrates Deep Sleep operation when SRPG is used. In SRPG designs, because the states of the processor are retained, it can resume operation from the point where the program was suspended and is therefore able to service the interrupt request almost immediately, just like normal sleep mode. 

In practice, the power-up sequence does take time to complete and therefore can increase the interrupt latency. The exact latency depends on semiconductor technology, memories, clocking arrangements, power system design (e.g., how long it takes for the voltage to be stabilized), etc. For Cortex-M3 and Cortex-M4 processors, the WIC is only used in Deep Sleep mode (when the SLEEPDEEP bit in the System Control Register is set). In normal Sleep mode, it does not enable the WIC operations and should not trigger SRPG power-down operations. Depending on the microcontroller you might also need to program additional control registers in the device-specific Power Management Unit (PMU) to enable the WIC feature.

when a debugger is attached to the system, it might disable some of the low power capability. For example, the microcontroller could be designed in a way such that the clock continues to run in Deep Sleep mode when a debugger is attached, so that the debugger can continue to examine the system status even though the application code attempts to use the Deep Sleep mode.

Please note that if all the clock signals are stopped in the Deep Sleep mode, the SysTick timer inside the Cortex-M3 or Cortex-M4 processors will also be stopped and therefore cannot generate SysTick exceptions.
