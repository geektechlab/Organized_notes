The Cortex-M3/M4 processor will enter debug mode (either the halt or debug
monitor exception) for a number of possible reasons. For halt mode debugging, the
processor will enter halt mode if conditions resemble those shown in Figure 14.11.
This behavior is controlled by a number of programmable bits in a number of debug
control registers. C_DEBUGEN is one of the bit fields in the Debug Halting Control
and Status Register (DHCSR, at address 0xE000EDF0); see Table 14.4. This bit is
used to enable Halt mode debugging and can only be programmed by a debugger connected to the microcontroller. Another bit in this register is called C_HALT, and it can
be set by the debugger to halt the processor manually.

One of the debug events is an external debug request signal, called EDBGREQ
on the Cortex-M3/M4 processor. The actual connection of this signal depends on the
microcontroller or SoC design. In some cases, this signal could be tied low and never
occur. However, this can be connected to accept debug events from additional debug
components (chip manufacturers can add extra debug components to the SoC) or, if
the design is a multi-processor system, it could be linked to debug events from
another processor.

Another debug event available is called Vector Catch. This is a programmable
feature that, when enabled, can halt the processor right after a system reset, or
when certain fault exceptions occur. It is controlled by a register called Debug
Exception and Monitor Control Register (DEMCR, at address 0xE000EDFC); see
Table 14.5. The vector catch mechanism is commonly used by the debugger to
halt the processor at the beginning of a debug session, immediately after the program
is downloaded and the processor is reset.

After debugging is completed, program execution can be returned to normal by
clearing the C_HALT bit in DHCSR.
Similarly, for debugging with the debug monitor exceptions, a number of debug
events can cause a debug monitor to take place (Figure 14.12). For debug monitor, the behavior is a bit different from halt mode debugging. This is
because the debug monitor exception is just one type of exception, and it can be affected
by the current priority of the processor if it is running another exception handler.
After debugging is completed, the program execution can be returned to normal
by carrying out an exception return.
