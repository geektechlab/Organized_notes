Another part of the CoreSight architecture concerns trace data handling. In the
Cortex-M3 and Cortex-M4 processors, there can be three types of trace source:
• Embedded Trace Macrocell (ETM) e this optional component generates instruction Trace.
• Data Watchpoint and Trace (DWT) unit e this unit can be used to generate data
trace, event trace, and profiling trace information.
• Instrumentation Trace Macrocell (ITM) e this allows software-generated debug
messages such as using printf, and is also used to generate timestamp
information.
During tracing, the trace data in the form of packets are output from the trace sources using a set of on-chip trace data bus called Advanced Trace Bus (ATB). Based on
the CoreSight architecture, trace data from multiple trace sources (e.g., multiple processors) can be merged using an ATB merger hardware called the CoreSight Trace
Funnel. The merged data can then be converted and exported to the trace interface
of the chip using another module called the Trace Port Interface Unit (TPIU), as
shown in Figure 14.6. Once the converted data is exported, it can be captured using
trace capturing devices and analyzed by the debug host (e.g., a personal computer).
The data stream can then be converted back into multiple data streams.
In the Cortex-M3 and Cortex-M4 processor designs, in order to reduce the overall silicon size, the arrangement of the trace system is a bit different (Figure 14.7).
The Cortex-M3/M4 TPIU module is designed with two ATB ports so that there is no
need to use a separate trace funnel module. Also it supports both Trace Port mode
and SWV mode (use SWO output signal), whereas in CoreSight systems the
SWV operation requires a separate module.

The debug components are part of the system memory map, whereas in standard
CoreSight systems, a separate bus (potentially with a separate memory map) is
used for controlling debug components. For example, the conceptual CoreSight
debug system connection in a Cortex-R processor can be like the one shown in
Figure 14.8, whereas the Cortex-M3/M4 debug components are part of the
system memory space, as shown in Figure 14.9.

There are two types of debug operation modes in Cortex-M3 and Cortex-M4
processors:
• The first one is halting, whereby the processor stops program execution
completely when a debug event occurs, or if the user requests the halting of
program execution. This is the most commonly used debug method.

• The second one is the debug monitor exception, whereby the processor
executes a special exception handler when a debug event occurs, or if the user
requests the halting of application program execution (the application code
apart from the debug monitor exception). The debug monitor exception handler
then communicates with the debug host using a communication interface peripheral (e.g., UART). The debug monitor is exception type 12 and its priority is
programmable, so it still allows higher-priority exceptions to take place while
debugging tasks are being carried out.

Both debug mechanisms can be invoked by means of debug events, as well as by
manually setting the control bit in debug control registers.

Halt-mode debugging using a Serial Wire or JTAG connection is very easy to use,
powerful, and does not require additional program and data memories. You can:
• Stop program execution via the debugger, or when a debug event (e.g., breakpoint)
occurs
• Single step each instruction, or each line of C code (depending on the debugger
being used)
• Examine and modify the values of all registers in the processor when the
processor is halted
• Examine and modify the values in memories or peripherals at any time, even
when the processor is running

However, stopping the processor in the middle of an operation for debugging can
be undesirable or even dangerous. For example, if the microcontroller is being used to control an engine or a motor, stopping the microcontroller for halt mode debugging might mean that we lose control of the engine or the motor, or in some case the
sudden stopping of the controller could cause physical damage.
In order to solve this problem we use the debug monitor method. To stop
a program from running, the processor executes the debug monitor exception
handler. The debug monitor exception has programmable priority, and as a result,
other interrupts and exceptions with priority levels higher than the debug monitor
exception can still execute. In this way, critical operations like motor control can
be handled by higher priority interrupt handlers and continue to operate even
when the main program is stopped.

To use the debug monitor feature for debugging, we need to have a piece of
debug agent code in the program image of the microcontroller (Figure 14.10).
This code can be invoked by the debug monitor exception, as well as the interrupt
handler of a communication interface. An initialization stage in the program execution is also needed to establish communication between the microcontroller and the
debug host. Once the debug agent and the communication link are set up, the debug
agent code can execute when there is a debug event, or when there are communication activities from the debug host.
The debug monitor exception solution has some limitations. For example, it
cannot be used to debug operations in the Non-Maskable Interrupt (NMI) handler,
HardFault handler, or any other exception handler with the same or higher priority
than the Debug Monitor exception. Also, it can be blocked by exception masking
registers such as PRIMASK. Finally, it needs additional resources including memory, execution time, and a communication peripheral.

The following is a summary of other differences between Halt mode debugging
and Debug Monitor mode debugging.
Halt mode:
• Instruction execution is stopped
• The System Tick Timer (SYSTICK) counter is stopped
• Supports single-step operations
• Interrupts can be pended and can be invoked during single stepping or be masked
so that external interrupts are ignored during stepping
Debug monitor mode:
• Processor executes exception handler type 12 (debug monitor)
• SYSTICK counter continues to run
• New arrive interrupts may or may not preempt, depending on the priority of the
debug monitor and the priority of the new interrupt
• If the debug event takes place when a higher-priority interrupt is running, the
debug event will be missed
• Supports single-step operations
• Memory contents (e.g., stack memory) could be changed by the debug monitor
handler during stacking and handler execution
