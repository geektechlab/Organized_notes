( not required , just keep in mind and refer from book if need ) Several years ago, before Thumb-2 technology was developed, the features available in the Thumb instruction set were limited, and the Thumb instruction syntax was more relaxed. When Thumb-2 technology arrived, almost all Thumb instructions were available in a version that updates APSR and a version that does not. In order to allow better portability between architectures, and to use a single Assembly language syntax in ARM processors with various architectures, recent ARM development tools have been updated to support the Unified Assembler Language (UAL).

With the new instructions in Thumb-2 technology, some of the operations can be handled by either a Thumb instruction or a Thumb-2 instruction. For example, R0 ¼ R0 þ 1 can be implemented as a 16-bit Thumb instruction or a 32-bit Thumb-2 instruction. With UAL, you can specify which instruction you want by adding suffixes:
	ADDS R0, #1 ; Use 16-bit Thumb instruction by default for smaller size
	ADDS.N R0, #1 ; Use 16-bit Thumb instruction (N=Narrow)
	ADDS.W R0, #1 ; Use 32-bit Thumb-2 instruction (W=wide)
The .W (wide) suffix specifies a 32-bit instruction. If no suffix is given, the assembler tool can choose either instruction but usually defaults to the smaller option to get the best code density. Depending on tool support, you may also use the .N (narrow) suffix to specify a 16-bit Thumb instruction. When the compilation is optimized for speed, the C compiler might also use 32-bit instructions to adjust the branch target addresses to 32-bit aligned for better performance.

32-bit Thumb-2 instructions can be half-word aligned. For example, you can have a 32-bit instruction located in a half-word location (unaligned) (Figure 5.4):
	0x1000 : LDR r0,[r1] ;a 16-bit instructions (occupy 0x1000-0x1001)
	0x1002 : RBIT.W r0 ;a 32-bit Thumb-2 instruction (occupy 0x1002-0x1005)
Most 16-bit instructions can only access registers R0 to R7; 32-bit Thumb-2 instructions do not have this limitation. However, use of PC (R15) might not be allowed in some of the instructions. ( fig 5.4 )

The instructions in the Cortex-M3 and Cortex-M4 processors can be divided into various groups based on functionality:
• Moving data within the processor
• Memory accesses
• Arithmetic operations
• Logic operations
• Shift and Rotate operations
• Conversion (extend and reverse ordering) operations
• Bit field processing instructions
• Program flow control (branch, conditional branch, conditional execution, and
function calls)
• Multiply accumulate (MAC) instructions
• Divide instructions
• Memory barrier instructions
• Exception-related instructions
• Sleep mode-related instructions
• Other functions

In addition, the Cortex-M4 processor supports the Enhanced DSP instructions:
• SIMD operations and packing instructions
• Adding fast multiply and MAC instructions
• Saturation algorithms
• Floating point instructions (if the floating point unit is present)

The most basic operation in a microprocessor is to move data around inside the processor. For example, you might want to:
• Move data from one register to another
• Move data between a register and a special register (e.g., CONTROL, PRIMASK, FAULTMASK, BASEPRI)
• Move an immediate constant into a register For the Cortex-M4 processor with the floating point unit, you can also:
• Move data between a register in the core register bank and a register in thefloating point unit register bank
• Move data between registers in the floating point register bank
• Move data between a floating point system register (such as the FPSCR eFloating point Status and Control Register) and a core register
• Move immediate data into a floating point register ( Table 5.4 shows some examples of these operations. )

If you need to set a register to a 32-bit immediate data value, there are several ways of doing this. The most common method is to use a pseudo instruction called “LDR”; for example:
	LDR R0, =0x12345678 ; Set R0 to 0x12345678
This is not a real instruction. The assembler converts this instruction into a memory transfer instruction and a literal data item stored in the program image:
	LDR R0, [PC, #offset]
	..
	DCD 0x12345678
The LDR instruction reads the memory at [PC+offset] and stores the value into R0. Note that due to the pipeline nature of the processor, the value of PC is not exactly the address of the LDR instruction.

Usually the assembler groups various literal data (e.g., DCD 0x12345678 in the above example) together into data blocks called literal pools. Since the value of the offset in the LDR instruction is limited, a program will often need a number of literal pools so that the LDR instruction can access the literal data. Therefore we need to insert assembler directives like LTORG (or .pool) to tell the assembler where it can insert literal pools. Otherwise the assembler will try to put all the literal data after the end of the program code, which might be too far away for the LDR instruction to access it.

If the operation needs to set the register to an address in the program code within a certain address range, you can use the ADR pseudo instruction, which will be converted into a single instruction, or ADRL pseudo instruction, which can provide a wider address range but needs two instructions to implement. For example:
	ADR R0, DataTable
	.
	ALIGN
	DataTable
	DCD 0, 245, 132, .
The ADR instruction will be converted into an “add” or “subtract” operation based on the program counter value. Another way to generate a 32-bit immediate data value is to use a combination of MOVW and MOVT instructions. For example:
	MOVW R0, #0x789A ; Set R0 to 0x0000789A
	MOVT R0, #0x3456 ; Set upper 16-bit of R0 to 0x3456, now R0 = 0x3456789A
When comparing this method to using the LDR pseudo instruction, the LDR method gives better readability, and the assembler might be able to reduce code size by reusing the same literal data, if the same constant value is used in several places of the assembly code. However, depending on the memory system design, in some cases the MOVW þ MOWT method can result in faster code if a system-level cache is used and if the LDR resulted in a data cache miss.

