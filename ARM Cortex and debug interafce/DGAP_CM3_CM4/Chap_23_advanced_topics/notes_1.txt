( 23.1.1 Conditional branches )

To get the best out of the Cortex-M3 and Cortex-M4 processors, a few aspects need to be considered. First, we need to avoid memory wait states. During the design stage of the microcontroller or SoC, the designer should optimize the memory system design to allow instruction and data accesses to be carried out at the same time, and use 32-bit memories, if possible.

For developers, the memory map should be arranged so that program code is executed from the code region and the majority of data accesses (apart from literal data) are carried out via the system bus. In this way, data accesses can be carried out at the same time as instruction fetches. Due to the design of the internal bus interconnect inside the Cortex-M3/M4 processor (the Bus Matrix), program execution from the system buses (address 0x20000000 or above) is slower than program execution from the CODE region (0x0 to 0x1FFFFFFF).

If possible, avoid using unaligned transfers. An unaligned transfer might take two or more Advanced High-Performance Bus (AHB) transfers to complete and therefore reduces performance, so plan your data structure carefully and avoid using packed structures (_pack) if possible. Normally C compilers do not generate unaligned data. In assembly language with ARM tools, you can use the ALIGN directive to ensure that a data location is aligned.

If possible, limited your function calls to 4 input parameters or fewer. When there are more than 4 input parameters, the extra parameters need to be passed via stack memory and will take longer to set up and access. If there is a lot of information to be transferred, try to group the data into a structure and pass a pointer to the data structure to reduce the number of parameters. If possible, the interrupt vector table should also be put into the code region, and the program stack placed in the SRAM or other RAM region at 0x20000000 or above. Thus, vector fetch and stacking can be carried out at the same time. If both vector table and stack are located in the SRAM region, extra clock cycles might result in increased interrupt latency because both vector fetch and stacking could share the same system bus (unless the stack is located in the code region, which uses a D-Code bus).

If an operation can be carried out by either two Thumb instructions or a single Thumb-2 instruction, the Thumb-2 instruction method should be used, because it gives a shorter execution time, despite the fact that the memory size is the same.

In applications that conform to AAPCS, it is necessary to ensure that the stack pointer value at function entry should be aligned to a double-word address. To achieve this requirement, the stacking of registers during exception handling must be adjusted accordingly. This is a configurable option on the Cortex-M3 and Cortex-M4 processors. To enable this feature, the STKALIGN bit in the Configuration Control Register (CCR) in the System Control Block (SCB) needs to be set (see Table F.2.6 in Appendix F).

When the STKALIGN bit is set during exception stacking, bit 9 of the stacked xPSR (combined Program Status Register) is used to indicate whether a stack pointer adjustment has been made to align the stack pointer address. When unstacking, the stack pointer (SP) adjustment checks bit 9 of the stacked xPSR and adjusts the SP accordingly. To prevent stack data corruption, the STKALIGN bit must not be changed within an exception handler. This can cause a mismatch of stack pointer location before and after the  exception.
