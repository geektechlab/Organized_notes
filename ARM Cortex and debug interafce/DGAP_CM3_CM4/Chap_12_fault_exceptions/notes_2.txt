Enabling fault handlers
	By default the configurable fault exceptions are disabled. You can enable these exceptions by writing to System Handler Control and State Register (SCB->SHCSR). Be careful not to change the current status of system exception active status, since this can cause a fault exception.
	MemManage fault
		You can enable the MemManage Fault exception handler using:SCB->SHCSR j= SCB_SHCSR_MEMFAULTENA_Msk; //Set bit 16 The default name for MemManage Fault exception handler (as defined inCMSIS-Core) is:
			void MemManage_Handler(void);
		You can set up the priority of the MemManage Fault using: NVIC_SetPriority(MemoryManagement_IRQn, priority);
	Bus fault
		You can enable the Bus Fault exception handler using:
			SCB->SHCSR j= SCB_SHCSR_BUSFAULTENA_Msk; //Set bit 17
		The default name for the Bus Fault exception handler (as defined in CMSIS-Core) is:
			void BusFault_Handler(void);
		You can set up the priority of the Bus Fault using:
			NVIC_SetPriority(BusFault_IRQn, priority);
	Usage fault
		You can enable the Usage Fault exception handler using:
			SCB->SHCSR j= SCB_SHCSR_USGFAULTENA_Msk; //Set bit 18
		The default name for the Usage Fault exception handler (as defined in CMSIS-Core) is:
		void UsageFault_Handler(void);
		You can set up the priority of the Usage Fault using:
			NVIC_SetPriority(UsageFault_IRQn, priority);
	HardFault
		There is no need to enable the HardFault handler. This is always enabled and has a fixed exception priority of 1. The default name for the Hard Fault exception handler (as defined in CMSIS-Core) is:
			void HardFault_Handler(void);

The Cortex-M3 and Cortex-M4 processors have a number of registers that are usedfor fault analysis. They can be used by the fault handler  code, and in some cases, by the debugger software running on the debug host for displaying fault status. A summary of these registers is shown in Table 12.1. These registers can only be accessed in privileged state. The Configurable Fault Status Register (CFSR) can be further divided into three parts, as show in Table 12.2. Besides accessing CFSR as a 32-bit word, each part of the CFSR can be accessed  using byte and half-word transfers.

The programmer’s model for the MemManage Fault Status Register is shown in Table 12.3. Each fault indication status bit (not including  MMARVALID) is set when the fault occurs, and stays high until a value of 1 is written to the register. If the MMFSR indicates that the fault is a data access violation (DACCVIOL set to 1) or an instruction access violation (IACCVIOL set to 1), the faulting code can be located by the stacked program counter in the stack frame. If the MMARVALID bit is set, it is also possible to determine the memory location that caused the fault by using the MemManage Fault Address Register (SCB->MMFAR). MemManage faults which occur during stacking, unstacking, and lazy stacking (see sections 8.3.6 and 13.3) are indicated by MSTKERR, MUNSTKERR, and MLSPERR, respectively.

The programmer’s model for the Bus Fault Status Register is shown in Table 12.4. Each fault indication status bit (not including BFARVALID) is set when the fault  occurs, and stays high until a value of 1 is written to the register. The IBUSERR indicates that the bus fault is caused by a bus error during an instruction fetch. Both PRECISERR and IMPRECISERR are for data accesses. PRECISERR indicates a precise bus error (see section 12.3.2), and the faulting instruction can be located from the stacked program counter value. The address of the faulting data access is also written to the Bus Fault Address Register (SCB->BFAR); however, the fault handler should still check if BFARVALID is still 1 after reading BFAR. If the bus fault is imprecise (IMPRECISERR set to 1), the stacked program counter does not reflect the faulting instruction address, and the address of the faulting transfer will not show in the BFAR. Bus faults occurring during  stacking, unstacking, and lazy stacking (see sections 8.3.6 and 13.3) are indicated by STKERR, UNSTKERR, and LSPERR, respectively.

The programmer’s model for the Usage Fault Status Register is shown in Table 12.5. Each fault indication status bit is set when the fault occurs, and stays high until a value of 1 is written on the register. Appendix I shows a breakdown of possible reasons for each type of  usage fault.

The programmer’s model for the hard Fault Status Register is shown in Table 12.6. HardFault handler can use this register to determine whether a HardFault is caused by any of the configurable faults. If the FORCED bit is set, it indicates that the fault has been escalated from one of the configurable faults and it should check the value of CFSR to determine the cause of the fault. Similar to other fault status registers, each fault indication status bit is set when the fault occurs, and stays high until a value of 1 is written to the register.

Unlike other fault status registers, the DFSR is intended to be used by debug tools such as a debugger software running on a debug host (e.g., a personal computer), or a debug agent software running on the microcontroller to determine what debug event has occurred. The programmer’s model for the Debug Fault Status Register is shown in Table 12.7. Similar to other fault status registers, each fault indication status bit is set when  the fault occurs, and stays high until a value of 1 is written to the register.

When a MemManage fault or a bus fault occurs, you might be able to determine the address of the transfer that triggered the fault using MMFAR or BFAR registers.  The programmer’s model for the MMFAR Register is shown in Table 12.8. The programmer’s model for the BFAR  Register is shown in Table 12.9. Inside the Cortex-M3 and Cortex-M4 processors, the MMFAR and BFAR shared the same physical hardware. This reduces the silicon size of the processor. Therefore only one of the MMARVALID or BFARVALID can be 1 at a time. As a result, if one of the fault exceptions is pre-empted by another due to a new fault exception, the value in the MMFAR or BFAR could have become invalid. To ensure that the fault handlers are getting the accurate fault address information, it should:
1. First read the value of MMFAR (for MemManage fault), or BFAR (for bus fault), then
2. Read the value of MMFSR (for MemManage fault), or BFSR (for bus fault), to see if MMARVALID or BFARVALID is still 1. If they are still 1, then the fault address is valid.
Note that if an unaligned access faults, the address in the MMFAR is the actual address that faulted. The transfer is divided into a number of aligned transfers by the processor, and the MMFAR can be any value in the address range of these aligned transfers. For bus fault with BFARVALID set, the BFAR indicates the address requested by the instruction, but can be different from the actual faulting address. For example, in a system with a valid 64KB SRAM address 0x20000000 to 0x2000FFFF, a word-size access to 0x2000FFFE might fault in the second halfword at address 0x20010000. In this case, BFAR showing 0x2000FFFE is still in the valid address range.
