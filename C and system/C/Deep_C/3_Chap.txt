figure out whether int *p[3] is an array of pointers-to-int, or a pointer 
to an array of ints.

char (*j)[20]; /* j is a pointer to an array of 20 char */ 
j = (char (*)[20]) malloc( 20 ); 
If you leave out the apparently redundant parentheses around the asterisk, it becomes invalid.

A declaration involving a pointer and a const has several possible orderings: 
const int * grape; 
int const * grape; 
int * const grape_jelly; 

const int * const grape_jam; 
int const * const grape_jam; 

char* const *(*next)(); 

there are restrictions on legal declarations. You can't have any of these: 
• a function can't return a function, so you'll never see foo()()
• a function can't return an array, so you'll never see foo()[]
• an array can't hold a function, so you'll never see foo[]()
You can have any of these: 
• a function returning a pointer to a function is allowed: int (* fun())();
• a function returning a pointer to an array is allowed: int (* foo())[]
• an array holding pointers to functions is allowed: int (*foo[])()
• an array can hold other arrays, so you'll frequently see int foo[][]

------------------------------------------------------------------------------------------------

Structs can also have bit fields, unnamed fields, and word-aligned fields. 
These are obtained by following the field declaration with a colon and a number 
representing the field length in bits. 
/* process ID info */ 
struct pid_tag
{
	unsigned int inactive :1; 
	unsigned int :1; /* 1 bit of padding */ 
	unsigned int refcount :6; 
	unsigned int :0; /* pad to next word boundary */ 
	short pid_id; 
	struct pid_tag *link; 
}; 
This is commonly used for "programming right down to the silicon," and you'll see it in systems 
programs. It can also be used for storing a Boolean flag in a bit rather than a char. A bit field must 
have a type of int, unsigned int, or signed int (or a qualified version of one of these). It's 
implementation-dependent whether bit fields that are int's can be negative.

int a[100]; can't be copied directly to other array. But following can,
/* array inside a struct */ 
struct s_tag { int a[100]; };
struct s_tag orange, lemon;
orange = lemon; /* assigns entire struct */

------------------------------------------------------------------------------------------------

A good way to find size and offest of field within structure without declaring a variable is, take a reference to 0
struct pid_tag
{
	unsigned int one; 
	char two;
	double three;
	float four;
};

Offset of a field = ((struct pid_tag *)0)->two;
Size of filed = sizeof(((struct pid_tag *)0)->two);

------------------------------------------------------------------------------------------------

sizeof internals:
	- for variables:
		#define sizeof(arg) (((&(arg))+1)-&(arg))

		int data;
		int size = sizeof(data);

	- for data types:
		#define sizeof(arg) (((&(((arg) *)0)+1)-&(((arg) *)0))

		int size = sizeof(int);

------------------------------------------------------------------------------------------------

If function returns 0, it is treated as success. Any other value is treated as error.

whereas, if condition treats 0 as false, all others as true.

------------------------------------------------------------------------------------------------

Unions are known as the variant part of variant records in many other languages. They have a similar 
appearance to structs, but the memory layout has one crucial difference. Instead of each member being 
stored after the end of the previous one, all the members have an offset of zero. The storage for the 
individual members is thus overlaid: only one member at a time can be stored there.

unions have exactly the same general appearance as structs, but with the keyword struct replaced by union.

Unions are typically used to save space, by not storing all possibilities for certain data items that cannot occur together.

There is another use for unions, however. Unions can also be used, not for one interpretation of two different pieces of data, but to get two different interpretations of the same data.
union bits32_tag
{
	int whole; /* one 32-bit value */ 
	struct {char c0,c1,c2,c3;} byte; /* four 8-bit bytes */ 
} value; 
This union allows a programmer to extract the full 32-bit value, or the individual byte fields value.byte.c0, and so on. There are other ways to accomplish this, but the union does it without the need for extra assignments or type casting.

------------------------------------------------------------------------------------------------

An enumerated type example is: 
	enum sizes { small=7, medium, large=10, humungous }; 
The integer values start at zero by default. If you assign a value in the list, the next value is one greater, and so on. There is one advantage to enums: unlike #defined names which are typically discarded during compilation, enum names usually persist through to the debugger, and can be used while debugging your code.

------------------------------------------------------------------------------------------------

( Read table from book: The Precedence Rule for Understanding C Declarations )

( Read table from book: Table 3-1. Solving a Declaration Using the Precedence Rule )

------------------------------------------------------------------------------------------------

the typedef keyword can be part of a regular declaration, occurring somewhere near the beginning. In fact, a typedef has exactly the same format as a variable declaration, only with this extra keyword to tip you off.

Since a typedef looks exactly like a variable declaration, it is read exactly like one. Instead of the declaration saying "this name refers to a variable of the stated type," the typedef keyword doesn't create a variable, but causes the declaration to say "this name is a synonym for the stated type."

	void (*signal(int sig, void (*func)(int)) ) (int); 
Practicing our new-found skills at reading declarations, we can tell that this means: 
	void (*signal( ) ) (int); 
signal is a function (with some funky arguments) returning a pointer to a function (taking an int argument and returning void). One of the funky arguments is itself:
	void (*func)(int) ; 
a pointer to a function taking an int argument and returning void. Here's how it can be simplified by a typedef that "factors out" the common part.
	typedef void (*ptr_to_func) (int); 
	/* this says that ptr_to_func is a pointer to a function 
	 * that takes an int argument, and returns void 
	 */

ptr_to_func signal(int, ptr_to_func); 
/* this says that signal is a function that takes 
 * two arguments, an int and a ptr_to_func, and 
 * returns a ptr_to_func 
 */

Don't put several declarators together in one typedef, like this: 
typedef int *ptr, (*fun)(), arr[5]; 
/* ptr is the type "pointer to int" 
 * fun is the type "pointer to a function returning int" 
 * arr is the type "array of 5 ints" 
 */

And never, ever, bury the typedef in the middle of a declaration, like this: unsigned const long typedef int volatile *kumquat;

Typedef creates aliases for data types rather than new data types. You can typedef any type. 
	typedef int (*array_ptr)[100]; 
Just write a declaration for a variable with the type you desire. Have the name of the variable be the name you want for the alias. Write the keyword 'typedef ' at the start, as shown above. A typedef name cannot be the same as another identifier in the same block.

------------------------------------------------------------------------------------------------

there is a key difference between a typedef and macro text replacement. The right way to think about this is to view a typedef as being a complete "encapsulated" type—you can't add to it after you have declared it. The difference between this and macros shows up in two ways. You can extend a macro typename with other type specifiers, but not a typedef 'd typename. That is,
	#define peach int 
	unsigned peach i; /* works fine */ 

	typedef int banana; 
	unsigned banana i; /* Bzzzt! illegal */ 
Second, a typedef 'd name provides the type for every declarator in a declaration. 
	#define int_ptr int * 
	int_ptr chalk, cheese; 
After macro expansion, the second line effectively becomes: 
	int * chalk, cheese; 
This makes chalk and cheese as different as chutney and chives: chalk is a pointer-to-an-integer, while cheese is an integer. In contrast, a typedef like this:
	typedef char * char_ptr; 
	char_ptr Bentley, Rolls_Royce; 
declares both Bentley and Rolls_Royce to be the same. The name on the front is different, but they are both a pointer to a char.

------------------------------------------------------------------------------------------------

	typedef struct fruit {int weight, price_per_lb } fruit; /* statement 1 */ 
	struct veg {int weight, price_per_lb } veg; /* statement 2 */ 
very different things are happening. Statement 1 declares a structure tag "fruit" and a structure typedef "fruit" which can be used like this:
	struct fruit mandarin; /* uses structure tag "fruit" */ 
	fruit tangerine; /* uses structure type "fruit" */ 
Statement 2 declares a structure tag "veg" and a variable veg. Only the structure tag can be used in further declarations, like this:
	struct veg potato; 
It would be an error to attempt a declaration of veg cabbage.

A pretty good principle in computer science, when you have two different things, is to use two different names to refer to them. It reduces the opportunities for confusion (always a good policy in software). If you're stuck for a name for a structure tag, just give it a name that ends in "_tag". This makes it simpler to detect what a particular name is.

typedefs for structs does only save you writing the word "struct".

Use typedefs for: 
• types that combine arrays, structs, pointers, or functions. 
• portable types. When you need a type that's at least (say) 20-bits, make it a typedef. Then when you port the code to different platforms, select the right type, short, int, long, making the change in just the typedef, rather than in every  declaration. casts. A typedef can provide a simple name for a complicated type cast. E.g. 
	typedef int (*ptr_to_int_fun)(void); 

------------------------------------------------------------------------------------------------

function's name is pointer ?
int func(int test);
func is function type pointer.
