Multidimensional arrays can be initialized with nested braces: 
short cantaloupe[2][5] = { 
 {10, 12, 3, 4, -5}, 
 {31, 22, 6, 0, -5}, 
}; 
int rhubarb[][3] ={ {0,0,0}, {1,1,1}, };

Here's how you initialize a two-dimensional array of strings:
char vegetables[][9] = { "beet", 
 "barley", 
 "basil", 
 "broccoli", 
 "beans" }; 
One useful facility is to set up an array of pointers. String literals can be used as array initializers, and 
the compiler will correctly store the addresses in the array. Thus, 
char *vegetables[] = { "carrot", 
 "celery", 
 "corn", 
 "cilantro", 
 "crispy fried potatoes" }; /* works 
fine */ 
Notice how the initialization part is identical to the array of arrays of characters initialization. Only 
string literals have this privilege of initializing pointer arrays. Arrays of pointers can't be directly 
initialized with non-string types: 
int *weights[] = { /* will NOT compile successfully 
*/ 
 {1,2,3,4,5}, 
 {6,7}, 
 {8,9,10} 
 }; /* will NOT compile successfully 
*/ 
The secret to doing this kind of initialization is to create the rows as individual arrays, and use those 
array names to initialize the original array. 
int row_1[] = {1,2,3,4,5,-1}; /* -1 is end-of-row marker */
int row_2[] = {6,7,-1}; 
int row_3[] = {8,9,10,-1}; 
int *weights[] = { 
 row_1, 
 row_2, 
 row_3 
}; 

