int a[5];
*(a+1) and a[1] are same. // *(p+1) and p[1] also ?

int (*p)[5];
p+1 and &a[1] are same.

a is type of int (*p)[5], so it holds address of array and its size;

int *s=a; is valid but s will not hold size of array. It will just point to start of array.

&s+1 wil increment by 4 bytes, &p+1 will increment by 20 ( 5 * 4 bytes ).

int (*p)[5]; /* it is pointer to array of five integers */ /* *(p+1) will give second element, it is wrong, why ? check https://onlinegdb.com/bRmvSGCBz */
int *p[5] and int *(p[5]) are same /* it is array of five pointers having int type */ /* *p[1] will give element value pointed by second element from array ? */

above can be understood from deep C book.

int arr[3][4] = { {10, 11, 12, 13}, {20, 21, 22, 23}, {30, 31, 32, 33} };
int (*ptr)[4] = arr;

printf("%d %d %d\n", **ptr, *(*(ptr+1)+2), *(*(ptr+2)+3));
