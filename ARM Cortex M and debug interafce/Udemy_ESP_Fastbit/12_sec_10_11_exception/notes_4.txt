In total there is actually room for implementing 15 system exceptions, but currently the ARM Cortex M processors atleast M0, M3, M4, they support ten system exceptions. The first location of the memory map is used to hold the MSB value. And the next memory location that is with the offset of 4. So, because these are word aligned. Address of the reset handler will be stored at this location, address of the NMI handler will be stored at this location, address of the hard fault handler is stored at this location, like that. And in between you'll see reserved a memory locations, this is to support future system exceptions. So, that means, in the vector table there are 15 locations, the first 15 locations. after this 0, they are used to hold the vector addresses for different system exception handlers.

system exception control registers registers of the processor to control the system exceptions of the processor. Our processors has many peripheral. We have in the nested vector interrupt controler,The FPU, the system control block, SysTick timer, the memory protection unit, debug unit and various other peripherals are part of the processor. And they also come with their own register set to control them. All these registers sets which control the functionality of a processor and processor specific peripheral are part of PPB (that is private peripheral bus region), which is accessed by the separate bus called PPB. The PPB region contains registers for all these processors specific peripherals. System control blocks, Systick timer, NVIC, and lots of other things.

using it, you can configure the system exception, you can enable them or you can disable them, you can configure the priority for them, and various other things. let me just talk about few registers which are very much helpful. You can see that here system handler priority registers. These registers are used to configure the priority for the system exception remember. We don't configure any interrupts from here. Interrupt is part of NVIC. NVIC will handled that. SCB is for system exceptions and for other control related settings.

If any processor fault happens, then the status of the fault is captured in the fault status register. There are many fault status registers. Like memory manage fault, bus fault, usage fault, hard fault. All those the fault status, that is at what address the fault happened and what was the cause of the fault, everything is a logged in these registers.

And after that, there is also one register called a system handler control and state registers. By using this register you can enable various system exceptions.Like usage fault exception, bus fault exception, mem fault exception and various things. Basically, if you want to do any system exception configuration or vector table offset configuration, or if you want to set priority for any system exception, or if you want to a do any other system specific settings, then SCB is a place to check. By using SCB registers you can enable fault handlers, you can get pending staus of the fault exceptions, you can trap processor for divide by 0 and unaligned data access attempts, you can even control the sleep and sleep wakeup settings by using SCB registers. You can configure the priority of system exceptions and you can also control the SysTick timer of the processor. That's how we can use the registers of the SCB.

Actually we have 15 system exceptions, but some are not implemented they are reserved. Totally we have 9 system exceptions from hard fault to debug monitor exception. In which, hard fault is always enabled. So, you can mask it, you can disable it, but by default it is always enabled. NMI you need not to enable anything, it is always enabled, you can't mask it. Whereas usage fault, mem manage fault, bus fault, SysTick, SVC, pendSV, debug monitor all these exceptions are disabled by default. For example, if you want to trigger SVC exception, then you have to execute SVC instruction. If you want to get SysTick exception then you have to trigger the SysTick timer. If you want to get a pendSV exception, then you have to a enable it. Most of the system exceptions are disabled by default. You should remember that hard fault and NMI exceptions are always enabled.
