Memory map explains mapping of different peripheral registers and memories in the processor addressable memory location range. The processor, addressable memory location range, depends upon the size of the address bus. The mapping of different regions in the addressable memory location range is also called as a 'memory map'. An interconnect is a bus which connects processor to the various peripherals of the microcontroller. The peripheral could be the GPIOs, it could be TIMERS, ADC, I2C, there are various peripherals on a microcontroller. The processor also communicates with the memory there are mainly two types of memories. Code memory and Data memory. Code memory is the place where you keep instructions of the program and the data memory is where you stored temporary data of the program.

Let's say ADC has some data. And it wants processor to fetch that data and store it into the data memory let's say. It communicates with a ADC through some bus interfaces. That means, there is a bus which connects processor to various memory's and the peripherals, and that bus we call it as a system bus. This system bus has 32 bit address channel and 32 bit data channel, or you can call it as 32 bit address bus and 32 bit data bus. Let's say, ADC peripheral has some data and that data is stored in one of the register of the ADC and now it needs to be stored in the data memory. It produces that registers address on the address bus and when that address matches with the address of that register, the register will be unlocked and the value or the data of that register will be released onto the data bus. After that, that data reaches to one of the internal register of the processor, and after that processor stores that data from internal register into the memory. 

Basically, you should be using two instructions here. One is load, that is load from ADC into the internal register of the processor. And after that you would use a instruction stored, which stores the value of the register back to the memory. On the ARM Cortex Mx processor, this bus interface is of 32 bit data channel and 32 bit address channel. That's a reason processor can produce 4 Gig different memory location values, so from 0 to FFFFFFFF. That's a processor addressable memory range. And in that range different regions are fixed by the processor design. This is a fixed one, you can change it. So, this is fixed by the processor designers and that what we call as a memory map.

For example, when the processor produces the address 0, that means processor wants to talk to the code memory. That's a meaning of that. You should not design a microcontroller in such a way that yout peripheral register addresses fall under this region. ARM says, in this region you should only keep code memory. A code memory could be anything. It could be embedded flash, it could be EEPROM, it could be ROM or it could be OTP, anything, which can host the code or instructions of the program. In this memory region, the microcontroller vendor should connect the RAM, this region is for RAM. And the microcontroller vendor has to place all the peripheral registers in this region. It should start with the 0x40000000. If you have any external RAM such as SDRAM, and that would fall in this region. That means, when the processor produces this address it would be talking to the external RAM, it will not be talking to these peripherals or these memories.

Code region of 512 MB. That means, maximum you can connect a 512 MB of a code memory. Usually microcontroller vendors give internal code memory of you know 1KB to 1MB or 2MB. That's maximum actually. They usually don't give you know internal Flash of a 512 MB. No they don't give such huge memory. If you need more memory, then you can always go for external memory. Like you can connect an externalnot flash or you can connect an external nor flash, something like that. This is a memory region where the MCU vendor should connect the CODE memory. Different type of code memories are possible are available like Embedded flash, ROM, OTP, EEPROM, etc..Processor by default fetches vector table information from this region right after reset. So, that's a default behavior actually of the processors. But in the microcontroller you can change that by using boot pins of the microcontroller. Let's move to the next region that is SRAM region.

The SRAM region is in the next 512MB of memory space after the CODE region. It comes right after the code region in the memory map. So, this is mainly used for connecting SRAM, mostly on-chip RAM. SRAM is a data memory where we keep our temporary data, something like that. And the first 1MB of the SRAM region is bit addressable. I will talk more about a bit addressable memory regions later, that what we call as bit banding, and you can also execute program code from this region. You can also keep instructions here and you can execute.

Next region is peripheral region. The peripheral memory region also has the size of 512MB, used mostly for on-chip peripherals. On-chip peripherals of the microcontroller remember that. The processor peripheral registers will not fall under this category. For example, NVIC. That is nested vector interrupt controller is a peripheral of the processor, it's register will not fall under this region. This is dedicatedly for microcontroller or vendor specific a peripheral. Such as RTC, ADC, TIMERS,etc. Like SRAM region, the first 1MB of the peripheral region is also bit addressable, and this is an eXecute Never region. That means, you cannot execute code from this region. Trying to do that will result in fault exception. Basically, this is to prevent the code injection attacks. Like someone can a transmit a code through the peripheral and he can make processor to execute that code. To prevent that attacks usually peripheral region is eXecute Never regions. 

Next is a external RAM.Suppose, if you need more RAM for your project. For example, let's say you are using some graphics related project, or if you want to create some frame buffers, or if you want to keep some video information or audio information, or something like that. In that case, you need more RAM. So, in that case you can go for External RAM connection. You should connect the External RAM a in this region. Your External RAM registers will fall under this a memory region of the memory map. External device region. This is a region intended for external devices or shared memory, this is also eXecute Never region you cannot execute code from here.

Now comes private peripheral bus region. This is a place where you see a processor peripheral registers. Like NVIC registers, Systick timer registers, and various other control related registers of the processor.They all fall under this memory region in the memory map and this is also eXecute Never region.
