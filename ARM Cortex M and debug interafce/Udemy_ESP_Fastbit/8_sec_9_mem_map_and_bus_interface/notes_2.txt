In Cortex Mx processors the bus interfaces are based on a specification called advanced microcontroller bus architecture (AMBA). That's a specification which is designed by ARM which governs standard for on-chip communication inside the system one chip. So, a microcontroller vendor who designs a microcontroller based on a ARM Cortex Mx processor, so the on-chip communication that is the communication between a processor and the peripherals and the memories will be governed by a bus interface which is based this specification, that is AMBA. AMBA specification supports several bus protocols, there are 2 a important bus protocols called as AHB and APB.

These bus protocols are derived from the AMBA specification of ARM. AHB Lite stands for AMBA High-performance Bus and APB stands for AMBA peripheral Bus. AHB Lite bus is mainly used for the main bus interfaces on the microcontroller. APB bus is used for a private peripheral access and for some on-chip peripheral access using a bridge called AHB to APB bridge. AHB lite bus majorly used for high-speed communication with peripherals that demand high speed operation. APB bus is used for low-speed communication compared to AHB. And most of the peripherals which don't require high operation speed are connected to this bus.

The processor gives out 2 AHB interfaces to access the Code region. First interface is called as I-CODE and this is D-CODE. On the I-CODE bus, the processor fetches the instructions and vector table from the code memory. And from the D-CODE bus, which is also based on AHB a bus protocol, it is going to access data from the code region. What kind of data you store in Code region? Like constant data or any table, something like that. That means, processor uses two dedicated bus interfaces to fetch instruction and data simultaneously from the Code region. That means, whenever you execute an instruction from the flash let's say. That's a code memory in our case, flash memory. Let's say if this is flash, then instructions and vector table will be fetched over this bus and if you want to do any data access to the flash then that will be carried out on the D-CODE bus. ( 4:26 at lec36 section 9 )

The processor also gives one more a AHB bus interface that is for the system bus. It connects to the various on-chip peripherals of the microcontroller, and through this bus the processor also communicates with the SRAM. That's a data memory. Any data memory access that is RAM access is carried out over this bus.And also access to the various peripherals of the microcontroller such as ADC, DAC, TIMERS, CAN, all these are peripherals of the microcontroller. Those communication will be carried out over this system bus, which is also an AHB bus of 32 bit void.

After that, the processor also gives out one more AHB interface called as PPB, that is privateperipheral bus and through this bus processor communicates with the private peripheral bus region. The private peripheral bus region includes most of the peripheral registers of the ARM Cortex Mx processor such as NVIC registers, a Systick timer registers, and system control block registers. All control and configuration registers of ARM Cortex Mx processor, so will be part of this private peripheral bus region. 

One is the processor itself is a bus master, and after that we have Ethernet which can also act as the bus master, USB also can be act as a bus master, and DMAs they can also act as a bus masters. When you have multiple bus master, so a proper access to the bus should be taken care by another engine called arbiter. That is also called as Bus arbiter. All these are part of the AHB bus matrix engine. If you just analyze this diagram you can see that, this is a main bus. Which actually connects to the system bus of the processor over this bus matrix. This is a main bus of the microcontroller that is based on AHB protocol.So, AHB bus. There are multiple AHB bus on a microcontroller, for example this is AHB1 bus and we also have AHB2 bus here, which actually connects to the camera interface and USB OTG peripherals.Those peripherals require a high operation speed. AHB2 also connects to the system bus through this bus matrix, and AHB1 also connects to the system bus through this bus matrix. That's why, there must be one arbiter in between to handle the traffic which comes over a different a bus interfaces. That's the job of a AHB bus matrix. And you can see that, there is also AHB3 bus. The AHB1 is a main bus here, and so most of the peripherals are hanging on that bus. For example, all these IO ports are hanging on AHB1 bus. That means, the GPIO port A communicates to the processor over this AHB1 bus. After that, you can see that this main bus connects to the bridge here. This is a bridge which converts a AHB signals into APB signals. Because, there are some peripherals which don't require high operation speed are connected to APB bus. APB is also a bus which is kind of low performance bus compare to the AHB bus. The peripherals which don't require high operation speed are connected to the APB buses.This design also helps microcontroller vendor to reduce a power consumption. Instead of populating all the peripherals onto the AHB bus, so they a implement a multiple low performance bus interfaces, and they connect the peripherals which don't require high operations speed to APB bus. Now, you can see that there are 2 APB bus on the microcontroller. APB1 this is APB1 and this is APB2. So, APB2 can handle the speed up to 84 MHz and APB1 canhandle speed up to 42 MHz. Most of the communication related peripherals such as USART, SPI, I2C, CAN, are all connected to the APB1 bus. Whenever, let's say you want to connect to a sensor which isbased on I2C let's say. You connect here,isn't it? You connect to the pins of the I2C and that traffic is carried over APB1 bus, after that it goes to the bridge, and after that, the APB protocol is converted into AHB protocol and then it comes over this a main bus, that is AHB then it connects to the processor over the system bus. That's a data path. ( refer lec 36 for more details )

To summarize this ARM Cortex M4 processor is out majorly 4 bus interfaces, all are based on AHB protocol. I-Bus, D-Bus, S-Bus, and PPB. That is private peripheral.Private peripheral bus is used to talk to the private peripheral bus region registers. So, the D-bus and I-bus are used to communicate with a code memory to fetch instruction and data simultaneously. And the S-bus interface is used to communicate with the SRAM and to the on-chip peripherals of the microcontrollers.
