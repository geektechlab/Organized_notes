whenever there is an exception, when I say exception it could be interrupts. The first thing that happens is pending bit will be set in the pending register of the NVIC. Then the processor does stacking and vector fetch. Actually, the stacking and vector fetch happens simultaneously. Stacking means, pushing the contents of the registers on to the stack and vector fetch is fetching the address of the exception handler from the vector table. Then, processor makes an entry into the handler and interrupt active bit will be set in the NVIC register. And of course, pending status will be cleared by the processor automatically. And the processor mode is changed to handler mode. And the professor starts executing the handler return to service that exception. And remember, the MSP will be used for any stack operations inside the handler.

Let's see, what the exit sequences are. In Cortex-M3/M4 processors the exception a return mechanism is triggered using a special return value called EXC_RETURN. So,EXC_RETURN is a value generated during exception entry and it is stored in the LR register. When EXC_RETURN value is written into the PC it triggers the exception return. Let's understand this with an animation. Assume that, you have a processor running in thread mode and it is using PSP as it's stack pointer. Suddenly there comes an exception. You can see that, the processor did stacking operations using PSP, and LR is loaded with some weird value. So, this value is known as EXC_RETURN value. This value will be used during exception return. So, will see later how it is used. Now, the processor is executing the handler for the exception and it is in the handler mode. Now, processor wants to do exception return. The way exception return happens is by writing the value of LR into the program counter, or you can say by writing LR value into the PC the exception return can be triggered. So, when that happens processor actually does an unstacking operation and comes to normal flow of execution.

Now, let's see what exactly is this EXC_RETURN value. Remember, during an exception handler entry, the value of the return address (that is PC) is not stored in LR as in normal C functions. The exception mechanism puts a special value called EXC_RETURN into LR at exception entry. OK? So, here is a table by using this you can decode the EXC_RETURN. The first two bits of the EXC_RETURN value is reserved. And from bit4 to bit31 also you can ignore safely. The important 2 bits are bit2 and bit3, which will get updated during any exception entry. So, these two bits capture information about the processor operation mode and the stack pointer which was in use before start executing the handler.

( table at 4:07 at lec 59 )

So, this helps the processor during exception exit. The processor actually decodes this value, to understand with which stack pointer the processor has to do unstacking and to which operation mode the processor has to return. So, this is how the processor analyzes the EXC_RETURN value during exception return. You can see that, first processor checks the value of bit2 of the EXC_RETURN value. And based on that it takes a decision to use which stack pointer for the unstacking operation, and then returns to normal flow of execution. So, here are some possible values of EXC_RETURN. There are 3 values, these 3 values are most widely used.Let's say for example, when the EXC_RETURN value is 0xFFFFFFFD, then processor knows that it needs to return to thread mode and it has to use PSP for the unstacking operation, and after returning to the thread mode the program uses PSP as its stack pointer. And all the other values are actually reserved.

( IMP IMP 
	watch lec 60
 IMP IMP )
