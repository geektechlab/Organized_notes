The user task should not affect or should not modify some of the system level setting of the processor. The user task should not trigger any interrupt or it should  not turn off any interrupts, if that happens then the whole system fails,isn't it? That's why, before running a user task the kernel can change the access level to unprivileged, and then it can launch the user task. That's why, the real time operating system or secured systems always launch user task in unprivileged access level. And if the unprivileged code wants any services, then it can trigger system call and that system call will be serviced by the kernel code. That's a procedure or that's a design which is followed in secured and robust system. And ARM Cortex Mx processor gives that features in the processor itself, by using those features you can build a secured and robust embedded software solutions. That's about switching from privileged access level to the unprivileged access level.

How do you switch back from unprivileged access to the privileged access? By triggering an system exception or by triggering an interrupt.Once interrupt hits the  processor, processor changes the mode to handler mode the ISR runs. ISR always executes with privileged access level. Here you can modify the control register. Modify the control register back to 0 and then exit, exit to thread mode. The thread mode will be privileged access level. Once you changed thread modes access level from privileged to unprivileged, so to change back to privilaged you have to take this path. That's a only path available. That is you have to trigger a system exception or interrupt. Go to the handler mode, and modify the control register there, and then come back to the thread mode.
