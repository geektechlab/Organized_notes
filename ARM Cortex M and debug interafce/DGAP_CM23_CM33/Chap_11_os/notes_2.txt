Armv8-M processors can either have two
stack pointers (when TrustZone is not implemented) or four stack pointers (when
TrustZone is implemented). The fundamental reasons for having multiple stack pointers
are:
• For security and system robustness: Multiple stack pointers are needed to allow the stack
memories for unprivileged application threads to be separated from stack spaces for
privileged codes (including the OS kernel). If TrustZone is implemented, the stack spaces
for Secure and Non-secure software components would need to be separated.
• For ease and efficiency of context switching during RTOS operations: When an RTOS is
used in a Cortex-M processor, the Process Stack Pointer (PSP) is used by multiple
application threads and needs to be reprogrammed during each context switching
operation. For each context switching, the PSP updates and points to the stack space of
each thread that is due to be executed. When the processor is running the OS kernel
functions (e.g., task scheduling, context switching), the codes inside the OS operate using
their own stack memory. Hence a separate stack pointer (i.e., the Main Stack Pointer
(MSP)) is needed so that the stacked data used by the OS is not be affected by the
reprogramming of the PSP. By having a separate MSP and PSP, the OS design is simpler
and is more efficient.
• Improved memory usage: With application threads using PSP and exception handlers
using MSP, software developers only need, therefore, to consider the first level of the
exception stack frame when allocating stack space for application threads. This is because
only the Main Stack allocation needs to support the total stack space required for multiple
levels of nested exceptions/interrupts. Because there is no need to preserve stack space for
nested exceptions in each of the application thread’s stack, memory usage is more efficient.

As shown in Fig. 4.6, there can be up to four stack pointers in an Armv8-M processor. These
are:
• Secure Main Stack Pointer (MSP_S)
• Secure Processor Stack Pointer (PSP_S)
• Non-secure Main Stack Pointer (MSP_NS)
• Non-secure Process Stack Pointer (PSP_NS)
The selection of stack pointers being used is determined by the processor’s security states
(either Secure or Non-secure), the processor’s mode (Thread or Handler), and the SPSEL setting in the CONTROL register. This is covered in Sections 4.2.2.3 and 4.3.4. If TrustZone is not
implemented, only the Non-secure stack pointers are available.
For programming purposes, normally:
• The MSP and the PSP symbols refer to the stack pointer in the current selected state:
	-If the processor is in a Secure state, MSP means MSP_S and PSP means PSP_S
	-If the processor is in a Non-secure state, MSP means MSP_NS and PSP means PSP_NS
• Secure software can access the MSP_NS and PSP_NS using MSR and MRS instructions
By default, a Cortex-M processor uses the Main Stack Pointer (MSP) to boot up:
• if TrustZone is implemented, the processor boots up in Secure privileged state and, by
default, selects MSP_S (the Secure MSP). The default value of CONTROL_S.SPSEL (bit 1 in
the CONTROL_S register) is 0, which indicates that the MSP has been selected.
• if TrustZone is not implemented, the processor boots up in (Non-secure) privileged state
and, by default, selects MSP. The default value of CONTROL.SPSEL (bit 1 in the
CONTROL register) is 0, which indicates that the MSP has been selected.
In most applications without an embedded OS or RTOS, the MSP can be used for all operations and the PSP can be ignored.
For most RTOS based systems without TrustZone, the PSP is used by application threads
for stack operations. The MSP is used for booting up, for initialization and for exception handlers (including OS kernel codes). For each of these software components, stack operation instructions (such as PUSH, POP, VPUSH, and VPOP) and most instructions that use SP (e.g.,
using SP/R13 as a base address for data access), will use the currently selected stack pointer.
Each application task/thread has its own stack space (Fig. 11.4: Note that the placement of
the stack space in this diagram is just an example) with the context switching code in the OS
updating the PSP each time the context is switched.
Within the context switching operations, the OS code accesses the PSP directly using the
MRS and MSR instructions. The access of PSP include:
• saving the PSP value of the task to be switched out
• setting the PSP to the previous PSP value of the task to be switched into
By separating the stack spaces, the OS can use either the MPU (Memory Protection Unit) or
the stack limit check feature to restrict the maximum amount of stack space each task/thread
uses. In addition to restricting the stack memory that is consumed, the OS can also utilize the
MPU to restrict which memory address ranges an application task/thread is able to access.
More information on this topic is covered in Chapter 12.

( imp: FIG. 11.4 The stack memory allocated for each task/thread is separated from other stacks. )

Cortex-M processor systems with TrustZone have four stack pointers. In a typical system
which has security software solutions such as Trusted Firmware-M [1] and secure libraries,
the way the four stack pointers could be used is as per Fig. 11.5.
Using the software architecture as shown in Fig. 11.5:

• the security management software (such as the Secure Partition Manager in Trusted
Firmware-M) [1] executes in Secure privileged state, and
• the secure libraries (such as IoT cloud connectors/clients) execute in Secure unprivileged
state.

By so doing, the security management software can configure the Secure MPU to isolate the
various Secure libraries and, thus, prevent those libraries from accessing/corrupting critical
data being used by the security management software. The use of PSP_S (Secure Process Stack
Pointer) allows us to separate the stacks of these libraries.
Similar to the execution of multiple tasks on the Non-secure side in an RTOS environment,
these Secure unprivileged libraries might need to be accessed at different times and, to do so,
will need security management software to handle the context switching of these libraries.
This will involve reprogramming the PSP_S and the reconfiguration of the Secure MPU at
each context switch.

( imp: FIG. 11.5 Stack pointer usage in a TrustZone system. )

( check use of banked stack pointers in bare metal system )
