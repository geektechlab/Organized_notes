When working with modern microcontrollers, because of the nature of multiple buses and their power management control features, there are some areas that software developers need to take into account. Due to the separation of the main system and peripheral buses, and, in some cases, the separation of the clock frequency controls, an application might need to initialize some clock control hardware in the microcontroller before it can access some of the peripherals. In some instances, there can also be multiple peripheral bus segments running at different clock frequencies, all of which will need to be configured. Apart from allowing part of the system to run at slower clock speed, the separation of bus segments might also allow power to be further reduced by allowing the clock signals of a peripheral  system to be stopped completely.

The multiple load and store instructions in Cortex-M processors can greatly increase the systemâ€™s performance when they are correctly used. For example, they can be used to speed up a data transfer process or can be used as a means to automatically adjust a register for the memory pointer. However, when handling peripheral accesses, the use of LDM or STM instructions should, generally, be avoided. The reason for this is that part of the data access in an LDM/STM instruction could be repeated due to an interrupt event. Let us take the following scenario as an example: On a Cortex-M23 processor (which also applies to Armv6-M processors), if an interrupt request is received during the execution of an LDM or STM instruction, the LDM or STM instruction is abandoned and the interrupt service starts. At the end of the interrupt service, the program execution returns to the interrupted LDM or STM instruction and restarts again from the first transfer of the interrupted LDM or STM. As a result of this restart behavior, some of the transfers in the interrupted LDM or STM instruction could be carried out twice. Though this is not a problem for normal memories, it could be for peripherals if the access is  carried out on peripheral register(s) where the repeating of the transfer could cause errors. For example, if the LDM instruction is used for reading data in a First-In-First-Out (FIFO) buffer, then some of the data in the FIFO could be  lost as the read operation is repeated. As a precaution, unless we are sure that the restart behavior does not cause incorrect operation, we should avoid using LDM and STM instructions when accessing peripherals. Another consideration when using LDM and STM instructions is that we need to ensure that the address is aligned. If it is not aligned, a HardFault (Section 13.2.5) or a UsageFault exception (Section 13.2.3) will occur.
