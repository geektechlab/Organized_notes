The coprocessor interface and the Arm® Custom Instructions are both optional features on
the Arm Cortex®-M33 processor to enable silicon designers to add custom hardware
accelerators.
Conceptually, the key difference between these two features is whether the hardware accelerator sits inside or outside of the processor. The coprocessor design concept is shown in
Fig. 15.1.
The coprocessor interface has the following characteristics:
• The coprocessor hardware is external to the processor.
• The coprocessor hardware has its own registers, and, optionally, can have its own interface
to other hardware. For example, it can have its own bus master interface to access the
memory system.
The Arm Custom Instructions concept is shown in Fig. 15.2.
For Arm custom instructions:
• The custom data path for custom-defined data processing is internal to the processor.
• The Arm custom instructions use registers in the existing processor’s register banks and
does not have its own interface to external hardware.
For both the coprocessor and the Arm Custom Instructions, the instruction encodings are
defined in the Armv8-M architecture [1]. Since the Arm Custom Instructions are very new,
when this book was written the full details of these instructions were not merged into the
Armv8-M Architecture Reference Manual. However, they are now available in a supplementary document for the Armv8-M architecture [2]. The Armv8-M architecture document refers
to the Arm Custom Instructions as the Custom Datapath Extension (CDE). They are effectively the same feature. The “Arm Custom Instructions” name is reserved only for Arm
products, whereas Custom Datapath Extension (CDE) is a general technical term.
To make it easier for software developers to access the coprocessor and Arm Custom Instructions features in C/C++ programming environments, C intrinsic functions for these instructions have been defined in the Arm C Language Extension (ACLE) [3]. To make use of
these new features, software developers only need to upgrade their development tools to the
version that supports the new intrinsic functions. Although the design of the coprocessor and
Arm Custom Instructions hardware from chip vendors are different, there is no need for chip vendors to customize their compilation tool chains because the instruction encodings and intrinsic functions are predefined in the architecture and tools.

In general, coprocessors and Arm custom instructions enable chip vendors to optimize the
design for some of the specialized processing workloads, and, potentially, enable better product differentiation. The coprocessor interface has already been used in several Cortex-M33
based microcontroller products. For example, it has been used for:
• Acceleration of mathematical functions (e.g., trigonometric functions such as sine and
cosine)
• Acceleration of DSP functions
• Acceleration of cryptography functions
Because the coprocessor hardware is external to the processor and has its own registers, it
can, after a coprocessor operation has started and while the processor executes other instructions, continue to operate in parallel with the Cortex-M33 processor.
Because the coprocessor registers can be accessed with a single clock cycle using coprocessor instructions, a chip design can, in some instances, utilize the coprocessor’s interface to
enable the quicker access of certain peripheral registers.
Arm custom instructions are designed for the acceleration of specialized data operations
and are suitable for operations that are either single cycle or just take a few cycles. Some operations that could benefit from Arm custom instructions include:
• Cyclic redundancy check (CRC) computations
• Specialized data format conversions (e.g., RGBA color data)
Because the execution of Arm Custom Instructions requires direct access to the processor’s
register banks, the processor cannot, in parallel, execute other instructions. Therefore, if a custom processing operation is expected to take some time (more than a few clock cycles), it is
best to implement the hardware accelerator as a coprocessor instead of using the Arm Custom
Instructions. By doing so, the processor is able to execute other instructions when the hardware accelerator is running.

The coprocessor interface on the Cortex-M33 supports:
• Up to eight coprocessors.
• For each coprocessor, up to 16 registers. Each of them can be up to 64-bit wide.
• A 64-bit data interface to allow the single-cycle transfer of 64-bit and 32-bit data between
the registers of the coprocessor and the processor.
• A handshaking interface, which supports wait states and error response.
• Up to two operation opcodes (op1 and op2)
• Op1 can be up to 4 bits wide, but some instructions only support a 3-bit op1 field.
• Op2 is 3 bits wide. This is supported by the MCR, MCR2, MRC, MRC2, CDP, and CDP2
instructions.
• An additional op field bit to indicate instruction variants (i.e., MCR2, MRC2, MCRR2,
MRRC2, CDP2).
• The TrustZone® security extension
• Each coprocessor can be defined as Secure or Non-secure using the SCB->NSACR
register.
• The coprocessor interface supports a security attribute sideband signal to allow the
coprocessor to determine the security permission at the finer grained level (i.e., it is
possible to define permission per operation—based on the coprocessor register(s) that is
used and/or on the type of operation based on the op1 and the op2 signals).
• Power management
• The Cortex-M33 processor provides a power management interface to allow each
coprocessor to be separately powered up or down.
• The status of the Coprocessor Power Control Register (CPPWR, Section 15.6) in the
Cortex-M33 processor is exported from the processor to the coprocessors—this signal
connection controls whether each of the coprocessors is allowed to enter a non-retentive
low power state (Note: When the coprocessor is in a nonretentive low power state the
data inside the coprocessor would be lost). If the TrustZone security extension is
implemented, the CPPWR supports TrustZone security.
Similarly, the Arm custom instruction supports a range of features:
• It supports up to eight custom datapath units.
• It supports the TrustZone security extension by allowing each of the custom datapath units
to be defined as Secure or Non-secure using the SCB->NSACR register.
• By architectural definition, Arm Custom Instructions supports up to 15 classes of data
processing instructions (Note: some of these instructions are not supported in the CortexM33 processor). These instructions have the following characteristics:
• A wide choice of 32-bit and 64-bit operations, including integer, floating-point and
vector (vector support is for the M-profile vector extension in the Armv8.1-M
architecture).
• For each supported data type class, there are a range of instructions for operations with
zero, one, two and three operands.
• For Arm Custom Instructions that operates integer data, there is a choice of updating
either the destination register(s) or the APSR flags.
• For each class of Arm Custom Instructions, there is a normal and an accumulative
variant—accumulative variant means the destination register is also one of the input
operands.
• For each class of Arm Custom Instructions, there is an immediate data value, which
ranges from 3 to 13 bits. This allows multiple Arm custom instructions to be defined and
individually identified.
• Arm Custom Instructions support single and multiple cycle operations.
• Arm Custom Instructions support error handling. The custom datapath returns an error
status if the instruction/operation specified is not supported. This triggers the UsageFault
(i.e., the Undefined Instruction (Undef ) and No Coprocessor (NoCP) Table 13.6).
