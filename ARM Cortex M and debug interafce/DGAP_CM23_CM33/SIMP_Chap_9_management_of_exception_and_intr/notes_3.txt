Interrupt masking registers can be used as follows:
• PRIMASK––For general disabling of interrupts and exceptions, e.g., to enable critical
regions in the code to be executed without getting interrupted.
• FAULTMASK––Can be used by fault exception handlers to suppress the triggering of
further faults during fault handling (Note: only some types of faults can be suppressed).
• BASEPRI––For general disabling of interrupts and exceptions based on priority levels. For
some OS operations, it is desirable to block some exceptions for a brief period of time while,
at the same time, still allowing certain high priority interrupts to be serviced.

When TrustZone is implemented, these interrupt masking registers are banked between
security states. As you would expect, the Secure interrupt masking registers cannot be
accessed from the Non-secure world. The effect of each of the interrupt masking registers
on the processor’s effective priority level means that these registers can mask both Secure
and Non-secure interrupts/exceptions.
Please note, the masked priority levels of the Non-secure PRIMARK_NS,
FAULTMASK_NS, and BASEPRI_NS (is) are affected by the PRIS (Prioritize Secure Exceptions) control bit in the Application Handler Control and State Register (AIRCR.PRIS). For
example, when PRIMASK_NS is set, the effective masked priority level is 0x80, meaning that
Secure interrupts/exceptions with a priority range of 0 to 0x7F can still take place.
The masking registers are accessible in privileged level only. To access these registers,
MRS, MSR, and CPS (Change Processor State) instructions should be used.

When using interrupt masking registers when writing software, instead of just setting an
interrupt masking register before entering the critical code and clearing the register afterward, it is often necessary to use a read-modify-write sequence. When this is the case, it would
be necessary to read the current status of the interrupt masking register before setting it. The
critical code would then need to be executed and, after the critical code has been executed, the
original value of the interrupt masking register would then need to be restored. See example.

PRIMASK

For many applications, you might need to temporarily disable all of the peripheral interrupts in order to carry out a timing-critical task. You can use the PRIMASK register
(Table 9.22) for this purpose. The PRIMASK register is only accessible in privileged state.
The PRIMASK register is used to disable all exceptions except the NMI and HardFault (it
sets the effective priority level to 0x0). If the AIRCR.PRIS is to 1, the Non-secure PRIMASK is
be used to block
• all Non-secure interrupts with priority levels 0x00 to 0xFF (an effective level of 0x80 to 0xFF
when viewing from the Secure world), and
• Secure interrupts with priority levels 0x80 to 0xFF.

( very imp: TABLE 9.22 PRIMASK registers )

When PRIMASK is set, fault events for configurable fault exceptions (i.e., MemManage,
Bus Fault, Usage Fault) could be blocked and, if this is the case, it will trigger an escalation,
and lead to a HardFault exception.

FAULTMASK

In terms of behavior, FAULTMASK is very similar to PRIMASK, except that it could also
block the HardFault handler. The behavior of FAULTMASK is detailed in Table 9.23.

FAULTMASK is often used by Configurable Fault Handlers (i.e., MemManage, Bus Fault,
Usage Fault) to raise the processor’s current priority level. By so doing, this means the aforementioned handlers can:
• Bypass the MPU (Further information on this can be found in Table 12.3, in the description
of the HFNMIENA bit in the MPU Control Register)
• Ignore the data Bus Fault for device/memory probing (Further information on this can be
found in Section 13.4.5, in the description of the BFHFMIGN bit in the Configuration
Control Register)

For assembly language users, the current status of the FAULTMASK is changed by using
the following CPS instructions:
CPSIE F ; Clears FAULTMASK
CPSID F ; Sets FAULTMASK
You can also access the FAULTMASK registers by using the MRS and the MSR instructions. The following examples detail the setting and clearing of the FAULTMASK of the current security domain when using the MSR instruction:
MOVS R0, #1
MSR FAULTMASK, R0 ; Write 1 to FAULTMASK to disable all interrupts
and:
MOVS R0, #0
MSR FAULTMASK, R0 ; Write 0 to FAULTMASK to allow interrupts
The FAULTMASK register(s) is cleared automatically at an exception return, subject to the
following conditions:
• If TrustZone is not implemented, then FAULTMASK_NS is cleared automatically at an
exception return, except when the exception is an NMI exception.
• If TrustZone is implemented, then the FAULTMASK of the current exception state
(which is indicated by EXC_RETURN.ES) is, except for NMI and HardFault exceptions,
cleared to 0.

The characteristic of FAULTMASK being automatically cleared at an exception return provides an interesting application for it: when we want an exception handler to trigger a higher
priority handler (except for the NMI), but want this higher priority handler to start AFTER the
current handler has completed, we can take the following steps:
1. Set the FAULTMASK to disable all interrupts and exceptions (apart from the NMI
exception)
2. Set the pending status of the higher priority interrupt or exception
3. Exit the current handler
Because the pending higher priority exception handler cannot start while FAULTMASK is
set, the higher priority exception stays in a pending state until FAULTMASK has cleared;
which happens when the lower priority handler finishes. As a result, you can force the higher
priority handler to start after the lower priority handler has finished.

In some instances, you might want to disable interrupts with a priority lower than a certain
level. In this case, you could use the BASEPRI register. To do this, simply write the required
masking priority level to the BASEPRI register, as detailed in Table 9.24.

For example, if you want to block all exceptions with a priority level equal to or lower than
0x60, you can write the following value to BASEPRI:
MOVS R0, #0x60
MSR BASEPRI, R0 ; Disables interrupts with priority
; 0x60-0xFF

The BASEPRI register can be accessed by using the BASEPRI_MAX register name. It is actually the same register, but, when you use it with this name, it will give you a conditional
write operation. As far as hardware is concerned, BASEPRI and BASEPRI_MAX are the same
register, but in the assembler code they use different register name coding. When you use
BASEPRI_MAX as a register, the processor hardware automatically compares the current
value and the new value and only allows the update if it is to be changed to a higher priority
level (i.e., a lower value); it cannot be changed to lower priority levels.
