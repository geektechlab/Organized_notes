The TT instructions return MPU, SAU, and IDAU region numbers. These bit fields enable us to quickly determine whether a whole data structure or a data array is within the Nonsecure address range. Since the granularity of address partitioning is 32 bytes, in theory, a simple way to determine whether a data structure/array is entirely within the Non-secure address range is to use a TT instruction to test the address at every 32 bytes interval. This method works, but could be a lengthy process as the data structure pointed to by the pointer can be quite large. To overcome this and achieve a faster address checking method, the architecture defines the region ID numbering feature for the SAU, the IDAU, and the MPU.
• For each region in the SAU region definition, the SAU region comparator number is used as the SAU region ID.
• For each Non-secure region/Secure NSC region in the IDAU region definition, the design of the IDAU must assign a unique region number, which is provided to the processor using the IDAU interface.

The region numbers are 8 bit in size, but there is an additional bit to indicate whether the region number is valid or not (e.g., in the SAU, an SAU region might be disabled and thus the region number would be invalid). To check whether a data structure/array is entirely in a Non-secure region, we only need to use the TT instruction to lookup the starting and ending addresses (both of which are inclusive). Thedata structure/array is in the Non-secure range if:
• Both the starting and the ending addresses are Non-secure
• The IDAU region numbers of the starting and the ending addresses are identical and are both valid
• The SAU region numbers of the starting and the ending addresses are identical and are both valid

An illustration of how the region numbers in the SAU and the IDAU work is shown in Fig. 7.8.

To get this mechanism to work correctly, chip designers need to make sure that for each Non-secure region defined in the IDAU, each of them has a unique valid region number. Using the same technique, software can also use the MPU region number to detect whether the data  structure/array is in a continuous MPU region. If that is the case, the data structure/array has the same access permission from the starting to the ending addresses.This technique can be used to prevent unprivileged software from using an API to access privileged information. To make programming easier, a range of C intrinsic functions are defined in the Arm C Language extensions and are supported by multiple C compilers. Additional information on this topic is covered in Chapter 18.

( very IMP: FIG. 7.8 Using region ID numbers, data pointer checking can be carried out by looking up just the starting and ending addresses. )

Please note, this technique will not work if the data structure/array being checked goes across two adjacent Non-secure regions (Fig. 7.9). To avoid the problem shown in Fig. 7.9, chip designers and Secure firmware developers should avoid having adjacent Non-secure regions for continuous memories such as SRAM and ROM. On the other hand, having adjacent Non-secure regions for multiple Non-secure peripherals is not a problem because a data structure or array is unlikely to go across peripheral address boundaries. Please note, the pointer check feature is used to test whether a data structure/array is entirely in the Non-secure address range but cannot be used to determine whether a data structure/array is entirely in the Secure address range. Since the SAU can only setup Non-secure and Secure NSC regions, Secure address ranges do not have region numbers in the SAU. Fortunately, in normal application scenarios, because Secure APIs only need to determine whether a data structure/array is Non-secure so that it can process the information on behalf of a Non-secure application, it does not need to determine whether the data is entirely in a Secure address range.
