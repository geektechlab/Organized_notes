Procedure Call Standard for the Arm Architecture

The main areas covered by the AAPCS document are as follows:
• Register usage in function calls—The document details which registers are caller saved
and which are callee saved. For example, a function or a subroutine should retain the
values in R4–R11. If these registers are changed during the function or the subroutine, the
values should be saved in the stack and be restored before returning to the calling code.
• Passing of parameters to functions—For simple cases, input parameters can be passed on
to a function using R0 (first parameter), R1 (second parameter), R2 (third parameter), and
R3 (fourth parameter). If a 64-bit value is to be used as an input parameter, a pair of 32-bit
registers (e.g., R0–R1) would be used. If the four registers (R0–R3) are not enough for the
passing of all the parameters (e.g., more than four parameters have to be passed on to a
function), the stack would be used (details can be found in the AAPCS). If floating-point
data processing is involved and the compilation flow specifies the Hard-ABI (see
Section 14.5.4), the registers in the floating-point register bank could also be used.
• Passing of return results to the caller—Usually, the return value of a function is stored in
the R0. If the return result is 64 bits, both R1 and R0 would be used. Similar to parameter
passing, if floating-point data processing is involved and the compilation flow specifies the
Hard-ABI (see Section 14.5.4), the registers in the floating-point register bank could also
be used.
• Stack alignment—If an assembly function needs to call a C function, it should ensure that
the current selected stack pointer points to a double word-aligned address location (e.g.,
0x20002000, 0x20002008, 0x20002010, etc.). This is a requirement for the Embedded-ABI
(EABI) standard [4]: this requirement allows the EABI compliant C compiler to assume that
the stack pointer is pointing to a double word aligned location when generating program
codes. If the assembly code does not call any C function, either directly or indirectly, then
the assembly code does not need to keep the stack pointer aligned to a double word
address at function boundaries.
Based on these requirements, for simple function calls (assuming they do not use floatingpoint registers for data passing, and that fewer than four registers are needed), the data transfers between a caller and the callee functions would be as per Table 17.1
In addition to the parameter and result usages,
• The code inside a function must ensure that the values of “callee saved registers” when
leaving the function are the same as when the function was entered.
• The code that calls a function must ensure that if data in “caller saved registers” needs to be
accessed again later on, that this data is saved to the memory (e.g., stack) before calling a
C function. This is necessary because C functions are allowed to remove data in caller
saved registers.
The aforementioned requirements are summarized in Table 17.2.
Please note, there is a need to be careful with the doubleword stack alignment requirement.
When using the Arm assembler (armasm) in the Arm toolchain, the assembler provides:
• The REQUIRE8 directive to indicate whether the function requires doubleword stack
alignment, and
• The PRESERVE8 directive to indicate whether a function has preserved the doubleword
alignment.

These directives help the assembler to analyze the assembly code and generate a warning if
a function that requires a doubleword aligned stack frame has been called by another function
that does not guarantee doubleword stack alignment. Depending on the application, these
directives might, especially for projects built entirely with assembly code, not be required.

(imp: TABLE 17.1 Simple parameter passing and returning results in a function call. )

(imp: TABLE 17.2 Requirements of caller saved and callee saved registers at function boundaries. )

Scenario #1—The Armv8-M system does not implement TrustZone

The software development process is almost the same as that that exists in the traditional
Armv6-M and Armv7-M Cortex-M processors. There is no separation of Secure and Nonsecure states, and with a debug connection, software developers have full visibility of the
system.
There are, however, changes to software codes that need to be taken into account when one
is migrating Armv6-M/Armv7-M projects to Armv8-M-based systems. These are as follows:
• MPU configuration code changes—Due to changes in the programmer’s model of the
Memory Protection Unit (MPU), the code that utilizes the MPU will need to be updated.
• hOS code changes—The OS would need to be changed due to changes in the definition of
EXC_RETURN code values (see Section 8.10). A software developer should select an OS
version that can run in the Non-secure state (see Fig. 17.45). And, if the processor being
used is a Cortex-M33 processor (or another Armv8-M Mainline processor), the OS can take
advantage of the stack limit checking feature to make the system more robust.
• Removal of the bit-band feature—The bit band feature, an optional feature on Cortex-M3
and Cortex-M4 processors, is not available in Armv8-M processors.
• Vector table address—Unlike Cortex-M0, Cortex-M0+, Cortex-M3, and Cortex-M4
processors, the initial vector table address on Armv8-M processors can be Non-zero.
For most application codes, minimal software code changes are needed. Due to the various
changes made to the debug components (e.g., Breakpoint unit, the data watchpoint unit, the
ETM), development tools will need to be updated to a version that supports Armv8-M
architecture.

Scenario #2—Development of Non-secure software where the Secure world is not used

In this scenario, software developers will need to update the software for the same areas
as in scenario #1. And, in addition, software developers might notice the following
differences:
• Optional API for disabling Secure firmware—At the beginning of the initialization of the
Non-secure software, the Non-secure software might need to call a Secure API to tell the
Secure software that the Secure world software is not going to be used. This allows the
Secure world to release more hardware resources (e.g., SRAM and peripherals) to the Nonsecure software. In addition, this Secure API configures the NMI, HardFault, and the
BusFault exception to target the Non-secure state by setting the BFHFNMINS bit in the
Application Interrupt and Reset Control Register (AIRCR, see Section 9.3.4). Note: This is
optional because this Secure API might not be available.
• Memory map—Memory ranges containing Secure program and Secure resources are not
accessible.
Other than that, the software development on such a system is very similar to that when
using Armv6-M and Armv7-M processors.

Scenario #3—Development of Non-secure software when the Secure world is used

In this scenario, the software developer will need to update the software in the same areas
as in Scenario #1. And, in addition, software developers would notice the following changes:
• The application can make use of various features via the available Secure APIs.
• A need to use an RTOS with Trusted Firmware-M support—If the software uses an RTOS,
the RTOS being used needs to support Trusted Firmware-M integration— or support other
Secure firmware if the Secure world of the chip uses another Secure software solution. This
topic is covered in Section 11.8.
• Fault handling and fault analysis—Because the NMI, HardFault, and the BusFault
exception targets Secure state, Non-secure software does not have direct access to these
features. To allow Non-secure software developers to be aware of software issue(s), some
of the Secure firmware offers mechanisms to report an error if a HardFault or BusFault
exception takes place. When the ETM/MTB instruction trace is available, the Non-secure
operations that are carried out before a HardFault/BusFault is observable in the
instruction trace. As a result, software developers are able to analyze the fault event using
the ETM/MTB instruction trace. Software developers are also able to enable MemManage
Fault and UsageFault in the Non-secure world so that the error conditions that triggered
those fault exceptions can be diagnosed in the Non-secure debug environment. If the Nonsecure MemManage Fault and UsageFault are not enabled, those fault events would be
escalated to a Secure HardFault.

Scenario #5—Development of Secure software where the Non-secure world is not used

In this scenario, software developers will need to update the software for the same areas as
in scenario #1. The only difference is that if they are using an RTOS, the RTOS variant being
selected (Fig. 17.45) needs to support the Secure world instead of the Non-secure world.
