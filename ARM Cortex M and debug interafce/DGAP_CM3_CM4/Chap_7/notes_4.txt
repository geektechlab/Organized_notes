Besides the NVIC data structure in CMSIS-Core, the System Control Block (SCB) data structure also contains some registers that are commonly used for interrupt control. Table 7.16 shows the list of registers in the SCB data structure. Only some of these registers are related to interrupts or exception control and they will be covered in this section.

Interrupt control and state register (ICSR) The ICSR register can be used by application code to:
• Set and clear the pending status of system exceptions including SysTick, PendSV, and NMI.
• Determine the currently executing exception/interrupt number by reading VECTACTIVE.
In addition, it can also be used by the debugger to determine the interrupt status. The VECTACTIVE field is equivalent to the IPSR, as can be seen from Table 7.17. In this register, quite a number of the bit fields are for the debugger to determine the system exception status. In most cases, only the pending bits would be useful for application development.

The version of the Cortex-M processor can be determined using the CPUID register in SCB  The AIRCR register (Table 7.20) is used for:
• Controlling priority grouping in exception/interrupt priority management
• Providing information about the endianness of the system (can be used by software as well as the debugger)
• Providing a self-reset feature

The VECTRESET and VECTCLRACTIVE bit fields are intended to be used by debuggers. Although software can trigger a processor reset using VECTRESET, it is less desirable in most applications because it does not reset the rest of the system such as peripherals. If you want to generate a system reset, in most cases (depending on the chip design as well as the application reset requirements) the SYSRESETREQ should be used.

Please note that the SYSRESETREQ and VECTRESET fields should not be set at the same time. Doing so could result in a glitch in the reset circuitry in some Cortex-M3/M4 devices, as the VECTRESET signal resets the SYSRESETREQ. Depending on the design of the reset circuitry in the microcontroller, after writing 1 to SYSRESETREQ, the processor could continue to execute a number of instructions before the reset actually takes place. Therefore it is common to add an endless loop after the system reset request.

The bit field definitions of the SCB->SHP[0] to SCB->SHP[11] are the same as the interrupt priority registers, apart from the difference that they are for system exceptions. Only some of these registers are implemented.

Usage faults, memory management (MemManage) faults, and bus fault exceptions are enabled by the System Handler Control and State Register (0xE000ED24). The pending status of faults and active status of most system exceptions are also available from this register (Table 7.22). In most cases, this register is used by application code only for enabling configurable fault handlers (MemManage Fault, Bus Fault, and Usage Fault).

Be cautious when writing to this register; make sure that the active status bits of system exceptions are not changed accidentally. For example, to enable the Bus Fault exception, you should use a read-modify-write operation: SCB->SHCSR |= 1<<17; // Enable Bus Fault exception Otherwise, if an activated system exception has its active state cleared by accident, a fault exception will be generated when the system exception handler generates an exception exit.
