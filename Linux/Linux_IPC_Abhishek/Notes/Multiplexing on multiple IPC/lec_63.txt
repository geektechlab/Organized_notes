lets learn the concept of multiplexing and we will see that how multiplexing can be applied to a process because of which the process can receive the data from multiple IPC mechanism at the same time. So earlier we studied multiplexing in the context of Unix domain sockets. If you remember when we studied the multiplexing in the context of Unix domain sockets, our server process could actually read the data that was sent from any connected client. So multiplexing actually helped our server process to process the data that could be received at any time from any connected client at the same time.

Now here we will going to apply the concept of multiplexing at the IPC level. That is, we have a server process and this server process can receive data asynchronously from a network socket Unix domain socket. It can receive the data from console also that is from the user and it can receive the data from the message queue. So you can see that our server process has actually opened a network socket Unix domain socket message queue as well as a console. And from any of these channels, our server process can actually receive data at any point of time. At any point of time means asynchronously. So the question is that how to design such a process which would pick up the data sent from any IPC mechanism and process it?

So you can see in this diagram we have a server process and this server process can receive the data from any Unix domain client or from any network client that is TCP or UDP client or any client that is communicating over the network. And our server process can also receive the data from the message queues. And note that there could be more than one message cuz there could be more than one network clients and there could be more than one Unix domain clients. So how are server process will going to pick up the data that is sent from any of the client, whether the client could be whether the client could be Unix domain socket client or it could be network socket domain client, or it could be a client that is running on the same machine and is sending the data to our server process using message queues.

If you notice the network sockets, Unix domain sockets and message queues have file descriptors. now we already know that whenever you create a Unix socket or network socket or a message queue, the API returns the file descriptor. So this file descriptor is actually the representation of a socket and we have already learned multiplexing in the context of sockets in module one. So in this case, simply add all the file descriptors to the set data structure and invoke the select system call on this set. By doing this, our server process will going to multiplex on all the file descriptors which are present in the set data structure. So select system call will unblock if server receives data on any file descriptor via any IPC mechanism. So the concept is same.

So the content of the file descriptor said should be that it should have data sockets of network clients. That is the communication file descriptors of all the network clients plus master socket file descriptor of the network socket. It should also have data sockets of all the Unix domain clients and it should also have master socket of Unix domain socket, which we call it as connection socket. In addition to this, the file descriptors of all the message queues from which our server process is interested in reading the messages. And the final thing that you can add to this data structure is zero value, which actually represents a console. Adding a file descriptor zero to the set makes our server process listen to the console. So it will allow the user or administrator to actually interact with the server process while the server process is blocked on the select system call because zero as a file descriptor has been added to the set, data structure and set data structure is being monitored by select system Call.

if you add all these file descriptors to the set data structure and invoke select system, call on this set data structure, our server process will going to monitor all the IPC interfaces that it has opened in order to interact with other processes running on the same system or different system. So the concept is simple. We can invoke the select system, call on file descriptors. It doesn't matter whether the file descriptor belongs to the Unix domain sockets or network socket or message queue or any other. The select system call works with any kind of file descriptors. So you can design your server process that can actually read the data from various IPC mechanisms at the same time.
