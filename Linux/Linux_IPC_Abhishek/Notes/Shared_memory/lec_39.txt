A process which is responsible to make an update to the shared memory is called Publisher process andrest of the processes running in the system are actually the reader of the shared memory. That is, they do not update the shared memory, but they only read the shared memory. They only read the updated contents of the shared memory. So such processes are called subscriber processes. So subscriber processes are those which reads the update made by the publisher process to the shared memory.

Then the next point that you should consider while making a decision whether you should make use of shared memory as an IPC technique or not, is that that the frequency of updating the shared memory by the publisher process should not be very high. So for example, that publisher process update the shared memory when the user configures something on the software. So the user action to configure something on the software is actually an action that is not very frequent in terms of computer speeds. Your publisher process must not update the contents of the shared memory, for example, like thousand times per second. So the criteria for using shared memory as an IPC is that that the publisher process should not update the shared memory at a very high frequency.

there should be exactly one publisher process. Now, what is the reason behind it? If multiple processes attempts to update the shared memory at the same time, then it leads to write conflict. That is the same piece of memory is being written by two different processes at the same time. It means that there is a need of synchronization between these processes. So we need to handle this situation using mutual exclusion based synchronization, Right. And whenever you deploy synchronization in your software, synchronization comes at the cost of performance. Because we put the threads to sleep in addition to their natural CPU preemption in order to prevent concurrent access to critical section. So we voluntarily put the threads to sleep in order to prevent concurrent access to critical section. So this action of putting the threads to sleep reduce the performance of the software or in other terms reduce the speed of execution of a software.

shared memory as an IPC is used in the scenario where there is exactly one publisher process and the frequency of updating the shared memory by the publisher process is not very high. So these are the two constraints that you should keep in mind before deciding whether you should use shared memory as an IPC mechanism in your software or not.

when publisher process update the shared memory, what happens? How would the subscriber would come to know about this update? So in this diagram you can see that the process A is a publisher process, whereas process B one and process B two are subscriber process, and all these processes are running on the same system. And then we have a chunk of shared memory which is being shared between these three processes. Now let us suppose that the publisher process make an update to the shared memory. Right now the process A which is a publisher process, make an update to the shared memory. There should be a mechanism that process B1 and B2 should be conveyed. The information that a publisher process has just made an update to the shared memory and subscriber processes should also update their internal data structure by reading the fresh contents of the shared memory. So to achieve this goal, after updating the shared memory, the publisher process needs to send a notification to all subscribers. Which states that shared memory has been updated. So simply the publisher process has to send a very small message to all the subscribers. And this message would mean that shared memory has been updatedand subscriber processes are supposed to read the fresh contents of the shared memory and update themselves. So after receiving this notification, subscribers can read the updated shared memory and update their internal data structures if necessary.

So this notification that is in step two, the notification that is generated by the publisher and is directed towards subscriber process could be a very small message because this notification only means that subscriber processes are supposed to read the fresh contents of the shared memory. And this a small notification can be sent out using other IPC mechanisms such as Unix, domain sockets or message queues. So this is a small notification could be sent out using message queue or Unix domain sockets. So it is for this reason that IPC using shared memory has to be backed or supported by other type of IPC mechanisms. The publisher process, after updating the shared memory, has to send a notification via other IPC mechanisms to subscriber processes to let them know that shared memory has been updated and subscriber processes are then supposed to read the fresh contents of the shared memory and update themselves as necessary.
