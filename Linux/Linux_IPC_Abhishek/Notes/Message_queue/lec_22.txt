A system can be logically divided into two parts the userspace and the kernel space. So the user space is the area where our all the applications actually run. So any applications that you run on the operating system actually runs in the user space. So process A, that is the sending process and the process B, which is the receiving process are actually the process that is running in the user space. The kernel space is the area where actually system or kernel services run.

For example, your operating system, scheduler, memory manager, device driver and many more services of the operating system actually runs in the kernel space. So the message queue that is created by one of the user space process is actually a kernel source and is created inside a kernel space. So when the process a suppose the process A is the creator of a message queue. So the process A will create a message queue inside the kernel space. The process a has to provide a message queue ID. In this case we have taken the message queue id as x, y, z, which is a string. So the process A has created a kernel resource that is message queue and this message queue exists inside a kernel space.

Now this message queue can be used by the sender process. That is process a as well as process B for carrying out Inter-process communication. So the process A can enqueue the message to the message queue and the process B can take the message from the message queue. So you can see in this diagram that any message that is sent by the process A to process B via a message queue is actually first enqueued in the message queue by the process A.

So the message that is generated by the process A is actually goes from userspace to the kernel space that is here. And then the message is then enqueued in the message queue by the operating system. And then the operating system notifies the receiving process that some message has been placed in the message queue by the sender and therefore the process B should dequeue the message out of the message queue. So the process B, you can see that the process B can take the message out of the message queue. So you can see that here the message queue is acting as a bridge of communication between the process A and process B and this bridge of communication that is message queue is actually resides in the kernel space.

So that is the reason that message is just one of the kernel resource. And the userspace processes is actually using this kernel resource for its own benefit that is carrying out IPC. So in this diagram I have shown only one message queue, but there can be multiple message queues created by several processes in the system. Each message queue is identified by a unique name called message queue ID, which is usually a string. Now next, let us discuss some of the APIs which are used to create and manipulate the message queue by the userspace processes.

Why message queue is preferrable over IPC pipe ( https://www.tutorialspoint.com/difference-between-pipes-and-message-queues#:~:text=A%20message%20queue%20is%20created,which%20returns%20a%20queue%20identifier.&text=The%20pipe%20is%20unidirectional.,A%20message%20queue%20is%20bidirectional. )