Unix or Linux like operating system provide an interface called socket interface to carry out communication between various types of the processes which wants to communicate with each other. The socket interface are a bunch of socket programming related APIs. Two socket interface is nothing, but it is a collection of APIs or functions.

in this course we shall learn how to implement two types of sockets. The first is the Unix domain sockets. These type of sockets are used to implement or carry out inter-process communication between processes which are actually running on the same system or same machine. So such type of sockets are called Unix domain sockets. The other type of sockets are network sockets. These sockets are used to carry out communication between processes, but these processes are actually running on different physical machines and these different physical machines are deployed over the network. In fact, the socket interface can also be used to implement various other type of communications, but those are out of the scope of our course. socket interface are the bunch of APIs, and these APIs can be used to implement Unix domain sockets or network sockets or any other type of sockets. The only difference is that how we actually use these APIs to implement a specific type of socket communication.

our computer architecture is actually roughly divided into three layers. The hardware layer and the top of the hardware layer is the operating system or kernel, and the topmost layer is the application layer. You can see that in between application layer and the operating system. Sandwich is the system call interface. So this is actually broadly speaking, it is actually called a socket layer or system call interface. So you can see in this system call interface layer, there are a bunch of APIs like socket, accept, connect, send to receive from close, select and etcetera. These APIs are actually called system calls. These system calls are invoked by the application. So by invoking these system calls, the applications actually ask the operating system for its service. For example, the application may invoke a system call and ask the operating system that, hey, I want X, Y, Z service operating system in response to the system call invocation, provide a service to the application. So so you can see here, application is like a master and the operating system acts like a slave applications orders the operating system to provide the application some service and this order is done using system call interface APIs.

Linux provides a set of APIs called System Calls, which application can invoke to interact with the underlying operating system. Socket APIs are the interface between application and operating system using these APIs. Application instructs the operating system to provide its service. malloc or free function are actually system calls and you make use of the system calls in your program. So the moment your program calls a malloc, it means your program is asking the operating system to give you a program, a chunk of memory. So this is the example where your application is requesting a service from the operating system using system call called malloc. And similarly, another system call is a free system call, using which your application asks the operating system to reclaim back the memory.
