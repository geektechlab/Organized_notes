A signal is a system message sent from one process to another, not usually used to transfer data. So note this point not usually used to transfer data, but instead used to remotely command the partnered process.

So signals are usually small messages. They are either one byte or two byte, right. The recipient needs to interpret the meaning of a signal. So you can see that your entire system, that is your computer system is logically divided into two parts. The operating system, which is also called as kernel space and the user space. Right now in user space, we run all the applications.

So signals are sent by operating system to the application.Right. So these are one type of signals which are sent by the operating system to the application running in user space. Signals are also sent from one application to another application, and both the applications are running in user space. But there is no such thing like signal being sent from the application running in user space to the operating system. There is no such example or no such usage of signals. So signals are sent by the operating system to the application running in user space and signals are sent from one application to another application and both the applications are running in user space. Now, most commonly, the signals are usually sent by the operating system that is Linux operating system to the application running in user space.

what happens when a process which is running in user space receives a signal from the operating system, then either of the three things can happen, right? The first thing is the default behavior. That is when the process receives the signal from the operating system, the process executes the default action of the signal. So note here that every signal is associated with a default behavior. So when a process receives a signal, let's say the signal that is received from the operating system is sigterm. So the default action of this signal is that that the application is supposed to get terminated. So whenever a application that is running in user space receives a signal sigterm from the operating system, the application is terminated by default. So this is the default action of the signal.

The second thing is that a process can program itself to customize the processing on receiving the signal by executing the signal handler routine. For example, when the process receives a signal sigterm from the operating system process might want to choose let's say goodbye message on the screen. That is a process is trying to perform some customized processing, right? Or the process may choose to write its internal data structures in a file for offline debugging before it eventually dies out. So the second action that the process can take is to perform the customized processing on receiving a signal from the operating system.

And the third option that the process can do is to simply ignore the signal.

So whenever a process receives the signal, the the process can perform one out of these three actions. Either it executes the default action of the signal. The second thing that the process executes the customized action of the signal. And the third thing is that that the process can simply ignore the signal.

Now, in the second case, when the process performs, the customized processing on receiving a signal from the operating system, that customized processing is performed by invoking a special function, That special function is called signal handler routine. A signal handler routine is a special function which is invoked when the process receives the signal. So process has to make some arrangements that whenever it receives a certain signal from the operating system or from other process, then a process needs to invoke certain special function. That special function is called signal handler routine. So a process needs to register the routine against the type of signal that is process needs to invoke the function f. So here the function F is a signal handler routine when signal S is received. So this is called the registration of a signal handler routine against the signal.

Signal handler routine are executed at the highest priority. It means that as soon as the process receives the signal. Either from the operating system or from the other process, then it might be possible that at the time when the process received the signal, the process may be busy executing some part of its code. as soon as the process receives the signal, the process pre-empts itself from the normal execution flow, right. Preempts means that a process aborts its normal execution flow immediately and execute the signal handler routine, which was registered against the signal which the process has just received. So you can see that when a signal is received, immediately signal handler routine is invoked after disturbing the normal execution flow of the process.
