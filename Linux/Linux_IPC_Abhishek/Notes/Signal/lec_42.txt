total number of signals that is supported by the Linux operating system is approximately 30.

So the first signal is sig int signal. This signal is generated by the operating system and delivered to the process when the user presses Ctrl C. So you must have terminated certain applications in Linux using Ctrl C only. So the moment you press the Ctrl C, the signal of type sig int is delivered to the process. By the underlying operating system. So this signal is also called as the interrupt signal. So the default behavior of the signal is that that the application gets terminated. However, you can change the default behavior of the signal. That is, your process can perform some customized processing when control key is pressed.

the second type of signal is actually signals which are reserved for user use. So the second and third signal is sig us SR one and SR two. These type of signals are sent by the process. P1 to the process. P2 And when the process P2 receives these type of signals, then we can define that. What actually process P2 is supposed to do when it receives these signals. So that is the reason that these signals are user defined signals and are left for the user to use. Linux has not defined that. What process has to do by default when the process receives the signal?

The third signal is of the type sigkill. So this signal is generated by the operating system and delivered to the process which is running in the user space. When the process receives this signal, the process is terminated immediately. This signal cannot be caught by the process to perform its own customized processing. So this signal is aggressive. Because the process cannot cut this signal to perform its own customized processing. This signal is generated using kill minus nine command. So let us say that in my window I start a new process, say RPD, right? Now I need to find the process ID which is assigned to this process. So on the other window you can simply run the command PS hyphen grep RPD. This command will give you the process id that is assigned to this process. Now I want to send Sigkill  signal to this process. In order to do so, I will execute the command kill minus nine and specify the process id of the processto which you want to send the signal. Now, by definition of this signal, the moment I execute this command, the process which has a ID 11912 will get killed immediately. So if I press enter, you can see in the other window in which I started the process, it is just killed by the operating system. And the process is not executing anymore. So the theory behind kill minus nine command is that that the moment you execute kill minus nine command and against this command, you provide the process ID of the process as an argument. Then that process receives the sigkill signal. And the default behavior of this signal is that that the process gets terminated immediately and this signal cannot be overwritten by the process to perform some customized processing.

Then the next signal is Sig abort signal. This signal is raised by a special system call called Abort. So whenever a process execute this system call, a signal is delivered by the operating system to the process which has invoked the system call. This signal, again, cannot be blocked. That is, this signal cannot be caught by the process to perform its own customized processing. And as soon as the process receives this signal, the process is terminated. So we will discuss how this abort system call is used, when we will be discussing the implementation of this abort system call.

Then the next signal is sigterm signal.So this signal is actually not very different from the Sigkill signal. The only difference is that that sigterm signal can be caught by the process, and the process can choose to perform its own customized processing in response to the reception of Sigterm signal. Whereas Sigkill signal was actually aggressive signal it could not be caught. So the default behavior of receiving the sigterm signal is that that receiving this signal. The process gets terminated. And this signal is delivered by the operating system to the process using kill command. There is no need to specify minus nine with this command. So if you just specify kill and just you, and if you just specify the process ID, the operating system will deliver sigterm signal to the process whose ID is specified as argument to kill command.

Then the next signal is sigsegv signal. If you have ever written and executed a C program, you must have seen this segmentation fault error. Now you will know here that why segmentation fault error comes. So whenever a process actually executes an illegal memory, that is, whenever a process attempts to access the memory, which is outside the virtual address space of a process, the operating system generates sigsegv signal and delivered this signal to the process which has attempted this illegal memory access. So whenever a process receives this signal, the process gets terminated and giving segmentation fault as error message on console. Again, this signal is aggressive signal and it cannot be caught by the process. So whenever your process attempts to access the illegal memory, the operating system sends signal to your process. And whenever your process receives this signal, your process terminates, giving segmentation fault as an error.

Then another signal is actually sick child signal. So whenever a child terminates. Now, here child means a child process of a process. So you have a process P which is running on the system and using fork system call. If you have heard about this fork system, call whenever a process P invokes a fork system call newprocess P1 is created. This process P1 is said to be the child process of process. P. it might be possible that the process P1 has completed its task and now it has chosen to terminate itself. So whenever a child process terminates before the parent process, the signal is sent by the operating system to the parent. This signal is sick. Child signal. So six child signal is a signal which is delivered to the process P by the operating system. Whenever the child process of the parent process gets terminated. Upon receiving the signal the parent should execute wait system call to read the child status. whenever child process terminates, the operating system delivers six child signal to the process P.
