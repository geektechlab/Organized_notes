in virtual address space of a given process, the stack memory occupies the top position in the virtual address space. the meaning of the stack means that whatever data you add last is the data which will be removed first. So stack memory is basically a stack data structure.

So when a new function call is invoked, some data is added to the stack memory, and when a current function call returns, the data is removed from the stack memory. This data is actually called a stack frame. Thus every function has its stack frame. for example, we have a main function which makes a call to the function A and function A makes a call to the function B and function B makes a call to function C, So each of these function will have their own respective stack frame. So suppose when the function A invokes the function B, then the stack frame of function B will be pushed into the stack memory. And when the function B executes and it further invokes the function C, then the stack frame of the function C is pushed into the stack.

When process terminates, the stack memory is reclaimed back by the operating system. setting up the stack frame of a function is a joint effort of the caller and the callee.

see https://www.youtube.com/watch?v=VKwymIAuLLk&ab_channel=CSEPracticals

maximum size of stack can be checked by ulimit -reclaimed

stack corruption: at 4:48 in lec 101

three registers are used to implement the mechanism of procedure, call and returns. The first register is called instruction pointer register. This register stores the address of the very next instruction to be executed. Then the second register is a stack Pointer register. Stack Pointer Register always stores the address of top of the stack. That is the lowest address of the stack memory. And the third register is a base pointer register. Base pointer register stores The starting address in call stack frame where callers base pointer value is copied. So basically base pointer register is used to store the history.

register info saving in stack at 9:34 in 104

Very IMP: open carmine noviello now and memorize exception handling and function call stack, check DGAM notes also
