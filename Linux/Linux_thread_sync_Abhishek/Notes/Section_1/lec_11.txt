When a process P creates a thread, then what are the changes that takes place in the virtual memory of a process? So suppose following is the diagram On the left hand side is a virtual address space of a process P which is in execution. So you can see that this process has some virtual memory that is being used for heap, some virtual memory that is being used for initialized and uninitialized data segment. And some virtual memory is being used for a code segment. And also some portion of the virtual memory is used as a stack memory. We already know that stack memory is used in order to support procedure, call and return. So every independent unit of execution needs stack memory.

Now let us suppose that process PE during the course of its execution, create a new thread. So after the creation of this new thread, what will be the change that will take place in this process? Virtual address Space of a process. So you can see the diagram on the right hand side is a virtual address space of a process. P but after thread creation. So you can see that after the thread creation, there is no separate virtual memory for the newly created thread. All this virtual memory is still belong to the process P But this virtual memory is also shared by a newly created thread. A newly created thread has an equal access to this virtual memory, to this portion of virtual memory of a process. Therefore, all threads share the same virtual address space of a process. But this segment of virtual memory must be accessible only by thread T.

So, as I have already said, that every thread has its own stack memory. So operating system will allocate this portion of virtual memory exclusively only for thread t because a thread needs to have a stack memory in order to execute stack memory of the process P. On the other hand, P1 stack is preserved and is being used by the process P for its execution. So you can see that the entire process virtual address space is starting from here till the bottom of the process. Virtual address space is shared by the process P as well as the thread T So it is for this reason that a thread can also modify a heap memory of a process and those modification in the heap memory will be visible to other threads or parent process. So you can see that the only change that happens in the process. Virtual address space of a process. P is the allocation of new stack memory when a new thread is created. Other than that, there is absolutely no change in the process. Virtual address space. So now let us extend this idea to a process P which creates more than one thread.

So suppose the diagram on the left hand side represents the process virtual address space or virtual memory of a process P. And you can see that the topmost portion of this virtual memory is being used as a stack memory by a process. Now, if a process P creates a new thread T one then operating system allocate more virtual memory which is to be used as a stack memory for the new thread t one. Similarly, if the process p creates another thread t two then operating system will allocate more virtual memory from process virtual address space as stack memory to be used by the thread t two. And same goes when a process create another thread t three. So you can see that operating system keeps on allocating more of virtual memory from the process. Virtual address space to be used as a stack memory by respective threads. And remember, each of these virtual memory is private to the corresponding thread. A thread T three has no business to access a stack memory which belongs to the thread t two right. So threads have their private stack memory. Rest of the regions of virtual address space of a process are shared by all the threads.
