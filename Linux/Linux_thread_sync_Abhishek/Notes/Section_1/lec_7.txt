whenever you pass an argument to the thread underscore create API, that is the last argument of this thread. Underscore create API that memory should be static memory or a memory on the heap. It should never be a memory on the stack or local variable.

Let us switch to the race condition on thread creation. So this point means that during new thread creation a race condition happens. So to illustrate this point, as you can see on the screen, I have a thread T1 and this is the fork point. The thread T1 creates another thread t2 right.

Now, let us suppose that immediately after the fork point there is an instruction I1. Which is present in the execution flow of the thread T1 Right And immediately after the fork point there is an instruction I2 which is the first instruction in the execution flow of the thread T2 Right. So let's say for example, the instruction I1 is nothing, but it simply says print T1, right? And the instruction I2 For instance, it simply says print T2 Right. So now with this example in place, what exactly is the race condition?

( watch diagram )

So here the race condition means that immediately after the fork point f, you cannot say whether it will going to be the instruction I1, which will going to be executed first. Or is it the instruction I2 which will going to be executed first? You cannot say whether I1 will execute before I2 or i2 will execute before I1. It is not in the programmer's hand. So during writing Multi-threaded applications, you as a developer don't have to assume that it is always the instruction I1 or I2, which will going to execute first. Any instruction that is I1 or i2 can proceed the other. It all depends whether your operating system schedules thread T1 first or thread T2 first. If the operating system schedules thread T1 first on the CPU, then it is the instruction I1 which will going to execute first. But in case if your operating system schedules the thread T2 on the CPU after the fork point, then it is the instruction i2 which will going to execute first. So this kind of indeterminism that is introduced right after the fork point is called race condition. Race condition here refers to that you cannot say that which instruction I i1 or I two will going to execute first.

However, it's a different thing that in 99.9%, chances are there that it is the instruction I1 which we're going to execute first. The reason is that that the thread T1 is already allocated the CPU at the fork point. And there is a valid probability that your operating system will snatch away the CPU from the thread T1 and allocate the CPU to the newborn thread T2 right. This the probability of happening  of this is very less, but it is there.So while writing multithreaded programs as a developer, you cannot assume any fixed order of execution between instruction I1 and I2. This refers to as race condition on thread creation.
