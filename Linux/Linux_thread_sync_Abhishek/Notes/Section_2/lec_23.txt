So when multiple threads, whether those threads belong to the same process or different processes, share the same CPUs with overlapping work, then those threads execute in a concurrent fashion. Whenever multiple threads which belong to the same or different processes share the same CPUs with non-overlapping work, we again get the concurrency right. So it really do not matter whether the threads belong to the same or different process, or it also don't matter whether the work which the threads are doing are overlapping or non overlapping. As long as the threads share the same CPUs, the threads execute in a concurrent fashion.

And when multiple threads which belong to the same or different processes share different CPUs with non overlapping work, then this is the case where threads execute in a parallel fashion. So for the threads to execute in parallel fashion, the threads must be allocated. Different CPUs for execution as well as the threads must be allocated non overlapping work to accomplish. If this condition is satisfied, then threads can execute in a parallel mode.

So below two diagram shows the contrast between concurrency and parallelism very clearly. You can see that in the concurrent case the thread t1 execute and as long as thread t1 execute no other thread execute on the same processor. And then context switch happens from thread t1 to thread t2 right. Then thread t to execute for some time and then again context switching happens such that thread t1 is loaded on the CPU again and it resumes its execution. So you can see that the diagram on the left hand side shows the concurrent nature of thread execution, whereas the diagram of the right hand side shows how two threads execute on two different processors at the same time. The thread T1 is executing and doing its work, whereas the thread T2 is also executing and doing its work in parallel on different processors of the system.
