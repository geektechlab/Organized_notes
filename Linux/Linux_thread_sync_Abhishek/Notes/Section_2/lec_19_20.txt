Let us discuss a typical process which have a need to fork out multiple threads in order to accomplish its work or goal. we would need a process as a multithreaded process when there is a need to wait for some input output while at the same time the process must continue to execute to complete the work at the same time. That is, the process needs to wait for some input output and at the same time the process needs to execute it some amount of allocated work at the same time. So it clearly implies that your process needs to be multithreaded Suppose you have a process which is waiting for a network packets in one thread, right? You have some process which just represents a network application and a very basic requirement of any typical network application is that that the network application has to wait for the arrival of a network packet. A network packet can arrive at any time.

So let us say that we have a process which is waiting for some network packet in its one of the thread, while the same process is continuously sending some periodic network packets in the other thread. And the third requirement is that that the same process needs to wait for the user input. So you can see that there is a need for thread number one, thread number two and thread number three. And all these threads need to perform their respective duties at the same time. It should not happen that while the process is waiting in the thread number one for a network packet, then an application cannot accept the user input. And it should not happen that while the application is receiving user input, the application or process cannot accept the network packet that has arrived. So all the three tasks have to be done by this typical process at the same time. So it simply means that this process has to be multi threaded. So now let us try to visualize this process with the help of a diagram. Suppose this is a main thread. And this process P launches a thread T three and let us say that this is the fork point F, let us say F one. So this is the thread T three which is waiting for the network packets to arrive and when the network packet arrive. The process process that network packet within the thread Three. And then it again waits for the next network packet. Similarly, the second requirement of this process was that to send out periodic packets. Right now sending out periodic packet is a continuous process. So for that our process has launched out another thread T two right. And the goal of the thread T two is to simply cook up some network packet and send out periodically in the network. So the process is doing another job in its thread T two. Let us say that this is the fork point F2. And now the third requirement of the process is that that it should also accept the user input whenever the user provides the input. So for that, our process has to launch another thread. And let us suppose that this is the fork point F three. So the purpose of this thread is to simply wait for the user input. And as soon as the user input is received, the thread t one will process that input. So you can see that this is one example where it is essential that our process has to be multi multithreaded process. It is a very basic requirement of any typical network application to wait for the packet to arrive so that the application can process as well as the network application has a typical role to send out periodic packets as well.

So the conclusion is that that we need concurrency because we cannot have really large number of CPUs to practice parallelism. CPUs need to be shared, right? Because there could be hundreds of processes running on your system, but you cannot have hundreds of CPUs so that you can run each of those processes on a different CPU and at the same time you need to ensure progression.
