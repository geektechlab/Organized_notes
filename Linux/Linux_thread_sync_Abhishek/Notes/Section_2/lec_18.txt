the question is that that why do we still have concurrency in place? Why modern computer system still goes with the concurrency when the concurrency is so poor when it comes to performance? So let us suppose that you have 100 threads running on your system at any given point of time, right? These 100 threads could be your user threads and some system threads. User threads are any applications which are running in the user space, whereas system threads are any services which are running as a part of operating system. For example, your operating system scheduler, the memory manager and several device drivers.

But anyway, at the end of the day, these are threads and let us say that there are 100 threads running in the system. Now, in order to take the best performance out of the system, you need to execute all these 100 threads in parallel. And to execute all these 100 threads in parallel, you will need 100 CPUs. And which is something not feasible. Technically it is feasible, but economically it is not feasible. CPU is an expensive piece of hardware. A typical computer system that is your laptop or computer have typically eight CPUs to 16 CPUs these days. So all live threads, live threads means all 100 threads which are live in the system have to share the CPUs for their execution. So let us suppose that in a computer system we have 16 CPUs. It means that all 100 threads have to share these 16 CPUs right at any given point of time. 16 threads out of those 100 threads are running parallel on these 16 CPUs. So there is a parallelism available on 16 CPUs. But the remaining 84 threads are actually not sitting idle. These 84 threads are also allocated. One of the CPUs among these 16 CPUs in a concurrent fashion.

So it simply means that parallelism and concurrency coexist in a typical computer system. let us suppose that there are 30 threads in the system and let us divide these 30 threads in the bucket of ten threads each. So there are three buckets g1, G2 and G3. All the threads which are in the same bucket are sharing the same CPU and they are executing on a given CPU and they are executing on their CPU in a concurrent fashion. So all these ten threads are concurrent in nature because they have to execute on the same hardware resource which is a CPU. And the same is true with all the threads which are in the bucket G2 and the same is true with all the threads which are in the bucket G3. Threads belonging to the same group runs concurrently, whereas the threads belonging to different groups runs in parallel. So if there is a thread T1 which belongs to the group G1, it executes on the CPU one. And if there is a thread say T11 which belongs to the group G2, it will execute on the CPU two. So thread t1 and t11 execute in parallel. But the threat T1 has to share the CPU with the threat T2 and T3 and therefore there is a context switching between the threads T1, T2 and T3 because all these threads belonging to the same group have to share the same CPU. So our computer system is a hybrid of concurrency and parallelism. It would have been a very bad idea if we deployed only parallelism and there was no concurrency. If there was only parallelism in place, then out of these 30 threads, the three threads have been executing on three different CPUs, whereas the other 27 threads were sitting idle. They will have to wait until the thread has completed their work on the CPU and release the CPU. So having parallelism alone is a bad idea. Having concurrency alone is also a bad idea. What is the perfect idea is that to have a hybrid of concurrency and parallelism in a in a typical computer system today on modern computers, this gives us the best performance out of Multithreading.
