the stack memory plays a vital role when a procedure is called and when a procedure is returned. So suppose you have a function one and suppose function one makes a call to the function two.  So this is called procedure call. And when function two completes its execution and when it returns to function one function one resumes  its execution. This is called procedure return. So please note that procedure call and procedure return is supported by the Stack memory.

the heap memory plays a vital role in allocating a memory to a process and allocating a memory from a process. So a process invokes malloc system call in order to claim the memory from the operating system. contrary to this, a process makes a call to the free system call in order to release a memory back to the operating system.

	IMP: the concepts like paging demand, paging, etcetera are out of the scope of this course. ( find resources and learn )

virtual memory is the total amount of memory your system has for a process. virtual memory is the total amount of memory your system has for one process. Virtual memory is different from physical memory and is computer architecture dependent. That is, you cannot reconfigure or change the virtual memory size for a system. For a 32 bit system, total virtual memory is two raised to the power 32 bytes and it is fixed. Remember that these two raise to the power 32 bytes of virtual memory is available for each process running on the system. These two raise to the power 32 bytes is not for all the process combined together.

if you run 100 processes, then it means that each process out of those 100 process will have raise to the power 32 bytes of virtual memory. That is why virtual memory is called virtual, because it is not actually a piece of actual hardware, but it is actually a conceptm which simulate a memory. So remember, virtual memory is not an actual memory which stores data. It is a conceptual thing, and virtual memory makes the process believes that a process has to raise to the power 32 bytes of memory to store its data.

Whereas physical memory is an actual memory and you have to buy a piece of Ram chips from the market in order to install physical memory on your system. It is this physical memory which actually stores the program data. But there is an upper limit to which you can actually extend the size of physical memory. This upper limit is decided by the computer architecture that is by the size of address, bus and data bus your system has.

every byte has an address. So this is an important point in a memory. When every byte has an address, then that particular memory is called byte addressable memory. And because every byte has an address, therefore there are two raise to the power 32 virtual addresses in a 32 bit system.

So computer programs works with virtual memory only means your program access only virtual addresses your program and Read and write the data to virtual memory locations. Your program never knows anything about physical memory. All it knows that it has to raise to the power 32 bytes of virtual memory to store its data. So you can see that physical memory is completely isolated from the program that you are running on the system.


Each process in execution is allotted virtual memory for its usage, and when the process claims more and more memory during the runtime using malloc or calloc system calls, then the virtual memory consumption of a process can grow maximum to to raise to the power 32 bytes on a 32 bit system. A process cannot claim memory more than this limit. So to raise to the power 32 bytes is actually four GB. It means that on a 32 bit system, your program theoretically cannot malloc more than four GB of virtual memory. When in your C program you do dynamic memory allocation using malloc or calloc system calls, the amount of memory that is allotted to your program is actually virtual memory and not a physical memory. So remember, your program never knows anything about physical memory. Your program spans its entire lifetime under the illusion that it has to raise to the power 32 bytes of memory where it can store its data.

So the virtual memory, which is assigned to a process, is called process virtual address space. Every process running on a 32 bit system can use maximum of two raise to the power 32 bytes of virtual memory. So on a 32 bit system, theoretically a program cannot use beyond two raise to the power 32 bytes of virtual memory.

IMP: diagram at 10:09 in lec 95 in section 16

virtual adress space of memory = code + data ( initialized + .bss uninitialized ) + heap + stack + const ? + commnad ine args

uassigned heap of stack access will result in segmentation fault.

IMP: diagram at 6:28 in lec 96 in section 16
IMP: diagram at 8:40 in lec 96 in section 16

size command given section size info
example, size hello.o
