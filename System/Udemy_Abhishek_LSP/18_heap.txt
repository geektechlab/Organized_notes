when malloc is called, requested bytes of memory is provided and pointer to start of that memory is returned. memory is allocated on physical memory and virtual memory address is returned and it works using MMU. Virtual memory doesn't contain any data, only physical memory contains.

brk pointer stores top of heap. Each process maintains brk pointer. break is actually a spatial pointer which is maintained by the operating system per process. it points to the top of Heap memory segment. So break pointer points up to which heap memory is being used by the process. Any memory which is above the break pointer is not a valid memory to be used by the process. break pointer moves towards higher address, increasing the heap memory region as process claims more memory from the operating system. what esp was to the stack memory is what break pointer is to the heap memory. So break pointer moves back towards lower address as process frees the heap memory.

two system calls are BRK and sbrk. BRK system Call expects some address as an argument and it returns an integer. So BRK System Call expands the Heap memory segment such that the break pointer of a process moves towards higher memory address and points to the address which is provided as an argument. And of course the address which you have supplied as an argument to system call should be a valid address by system call returns zero on success and minus one on failure.

Sbrk system call like system call expands the heap memory segment such that the break pointer moves towards higher memory by number of bytes, which is passed as an argument to Sbrk system call. The system call returns the old break pointer address if Sbrk system call succeeds Otherwise it returns null. if you invoke Sbrk with zero as an argument, then Sbrk system call will not expand the heap memory region, but it simply returns the current value of break pointer. Or in other words, it returns the topmost address of heap memory, segment of process, virtual address space.

malloc is an API which is provided by standard C library and this API is actually a wrapper over sbrk system call.

free API just requires ptr to memory to be freed, then how it detremines how much to free ? At each heap memory allocation malloc allocates metadata block which is a structure having size of block, pointer to next heap memory, and bool flag to indicate if this block of memory is free or allocated.

( metadatablock -> (malloc returns ptr to here, not from metadata ) mallc'd memory )

after each malloc call, next pointer from previous allocated block is updated to point to current block.

when free is called then it subtracts ptr to get metadata and then gets size to free and set flag as freed.

if we malloc from small size where metadata size is large then it wastes memory.

we can assign again from freed memory if wanted size is less then we can split block in two parts and create two metadata.

if we free two adjacent memories then those can be merged and single metadata can be used to maintain.

fragmentation happens when total memory is avaiable but in chunks so can't be allocated and then brk has to allocate fresh chunks, two types:
	internal fragmentation: when a memory chunk is splitted in two parts and a small free chunk gets created but now it can't be allocated/unusable for bigger size than its.

	external: when total available memory is grater than requested but it is in non-contiguous parts, so cant be allocated
