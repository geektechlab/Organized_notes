Hard fault is an exception that occurs because of an error during exception processing, or because an exception cannot be managed by any other exception mechanism. It has third highest priority that is minus -1, meaning it has higher priority than any exception with configurable priority.

Usually hard fault exception will be triggered due to escalation of configurable fault exceptions. If there is any bus error return during vector fetch from the vector table that will be escalated as hard fault exception. Executing a breakpoint instruction when both halt mode and debug monitor is disabled. Executing SVC instruction in an SVC handler also triggers hardfault exception. If the configurable exceptions are not enabled and if any fault happens which are related to configurable exceptions, then that fault will be escalated to a invoke the hard fault exception handler. For example, let's say a program tries to divide a number by zero. The divide by zero fault is actually triggers a usage fault exception. Divide by zero comes under usage fault exception. If usage fault exception is enabled, usage fault handler will be executed by the processor. If the usage fault exception is disabled which is by default, then the divide by zero fault will be escalated to hard fault exception. That's why, hardfault handler will be executed by the processor. So, that's why, hard fault exception will be triggered because of escalation from other configurable exceptions.

Let's say, there is a vector fetch from the processor. Vector fetch means, reading a vector address from the vector table. If there is any error during that vector fetch, then it will always be escalated to hardfault exception. That's why, if there is any bus fault during vector fetch from vector table a hard fault exception will be triggered and hard fault handler will be executed by the processor. Let's say, you have a thread mode and you execute the SVC instruction. SVC handler will be executed by the processor. If you again execute the SVC instruction inside the SVC handler, that would trigger the hard fault exception and a hard fault handler will be called by the processor. These are some of the important causes of a hard fault exception. In summary, you should remember that, the number one reason would be you know escalation of configurable fault exceptions. That Usage fault, Mem fault, and Bus fault. And if any related fault happens, then that will be escalated as hard fault exception.Second one is bus error return during vector fetch from the vector table. Third point would be execution of break point instructions. See this happens when a debugging your code. Let's say, you have return a software breakpoint instructions. In the code, in order to halt the processor, in the processor  setting if halt mode and debug monitor both are disabled, then execution of a breakpoint instruction would a result in hard fault exception. After that, a one more important a cause is executing SVC instruction inside the SVC handler.

There is a register called hardfault status register. This register will give you a clear picture why exactly the hardfault exception triggered. HardFault status register has four valid bits, the bit number 0 is reserved, bit no one is vector table, if this is set that is an indication that hard fault triggered a because of vector table read. That means, if this is set, then bus fault on vector table read. And remember that, even if the bus fault exception is enabled. The bus fault exception handler will not be executed by the processor, because this error is always handled by the hardfault handler. After that, if the 30th bit is set, that is forced, this indicates a forced hardfault. That is generated by escalation of a fault with configurable priority. That's why, if this bit is set, then that is actually an escalated or forced exception. After that, this 31st bit, if it is set the hardfault exception is triggered because of debug event. Such as executing a breakpoint instruction by keeping a halt mode and debug monitor mode disabled. Whenever a hard fault exception happens, you can read the hard fault status register inside the hard fault handler to understand what exactly is a cause of resulted hard fault exception. So, we'll do some exercises later in order to understand or how to read these registers.
