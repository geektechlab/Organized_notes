the fault is an exception which is generated by the processor to indicate an error.Faults are nothing but system exceptions. Faults happen because of various reasons. faults happen because of programmers handling processor by violating the design rules or maybe due to interfaces with which the processor deals such as memory interfaces.

Whenever a fault happens, internal processor registers will be updated to record the type of fault, the address of instruction at which the fault happened, and if an associated exception is enabled, the exception handler will be called by the processor. In the exception handler programmers may implement the code to report, resolve, or recover from the fault. For example, if your code tries to divide a number by zero, then divide by 0 fault will be raised by the hardware, which will invoke a usage fault exception handler. If it is enabled. In the exception handler, you may take some remedial action such as you may terminate the task, or you may report the user that you cannot divide by 0, something like that. Most of the time, fault happens by programmer's code not adhering to processor programming guidelines. But don't worry, if you make mistakes, then exception will be triggered by the processor and handler will be executed and there you can take some actions.

So, ARM Cortex Mx processor has couple of system exceptions.There are actually 15 system exceptions numbered from 1 to 15 and out of which some are reserved. Strictly speaking there are 1, 2, 3, 4, 5, 6, 7, 8, 9 system exceptions which are implemented in the processor. Rest all reserved. Out of these system exceptions reset has the highest priority.It's priority value is -3 followed by NMI and hard fault system exceptions. Reset, NMI, and HardFault are system exceptions which are non configurable priority. That means, you cannot configure a priority for them, it is fixed. Out of these system exceptions HardFault, MemManage, BusFault, and UsageFault, these exceptions are called as fault exceptions. These system exceptions will be raised whenever there is a fault in the processor. Hardfault, MemManage fault, Bus fault, and UsageFault, these are the exceptions which are responsible to report a fault. Let's understand more on different types of fault exceptions in Cortex Mx processors, so as I just said, we are going to discuss more on HardFault exception, Usage fault exception, Men manage fault exception, and Bus fault exception a in this section. Hard fault exception is a special type of a exception, which is always enabled by default in the processor, you need not to enable it. By the way you can disable it by using a FAULTMASK register. That's possible. But unless you disable it, it is always enabled by default and its priority is non configurable. You cannot configure it's priority. Usage fault, Mem manage fault, Bus fault, these are always disabled by default and these are of configurable priority. You can configure the priority for them. If you don't configure the priority, then the default priority is 0, whereas its priority is at -1.

Why fault happens? First of all some examples could be divide by 0, if enabled. If you enable a divide by zero trap in the processor, then divide by zero will raise an exception.

If the processor tries to execute undefined instructions. So, if the processor doesn't understand how to decode a instruction, then it would fall in the category of undefined instruction,then that would raise a fault.

Attempt to execute code from memory region which is marked as execute never to prevent code injection. In the processor design, there are a couple of memory regions which are marked as execute never. For example, peripheral region. Peripheral region is always marked as execute never. The attribute of the memory region will be XN. When the PC tries to load an instruction from that memory region which is marked as XN, then that would cause a fault.

After that, MPU guarded memory region access violation by the code. MPU stands for memory protection unit, and by using the memory protection unit you can impose some access rules to certain memory regions. If there is any violation while accessing a those memory regions fault will be raised by the processor. Unaligned data access also has a potential to cause a fault if enabled. And after that, one more important cause of a fault is returning to thread mode keeping active interrupt alive. When the interrupt is an active state you must finish it, a without finishing the active state interrupt or exception you cannot come back to the thread mode code, that would cause a fault.

After that, bus error. Example no response from the memory device such as when you are dealing with a external memory interfacing such as SDRAM. If the SDRAM is not configured properly or something like that, it can return you know no response to the bus access and that would cause a bus fault exception.

Executing SVC instruction inside SVC handler are calling a function in SVC handler which eventually executes hidden SVC instruction. Calling SVC instruction in an SVC handler is prohibited. If you try to do that, then that would result in a fault. And after that, some debug monitor settings can also cause fault. There are various reasons for  a fault to happen, but I have just listed a couple of important and most frequently encountered reasons.

