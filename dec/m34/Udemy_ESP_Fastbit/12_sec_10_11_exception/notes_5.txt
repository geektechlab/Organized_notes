NVIC is one of the peripheral of the ARM Cortex M processor core. it's a hardware engine which is connected in front of the Cortex M Processor core in order to control the interrupt traffic which comes to the processor. It is used to configure the 240 interrupts.

Remember, in Cortex M processor we have 15 system exceptions and 240 external interrupts. So, the NVIC engines specifically used to control the 240 external interrupts. Here, external means external to the processor. So, that is not generated inside the processor or inside the processor core. So, as you know the system control block we used to control the system exceptions, whereas we use NVIC block or NVIC peripheral to you know control the 240 interrupts.

So, using NVIC registers, that means the NVIC engine also gives some set of registers and by using that you can enable/disable/pend various interrupt and read the status of the active as well as spending interrupts. Just like how you have done for the system exceptions. So now, you can configure the priority and priority grouping of various interrupts.

it is called as "nested" because, it supports pre-empting a lower priority interrupt handler when the higher priority interrupt arrives. So, pre-empting means temporarily you know stopping the execution of lower priority handler, when the higher priority interrupt triggers.

let me take you to the nested vector interrupt controller block and here you will see various registers. there is a register called interrupt set enable register. This is called as ISER. And there are 8 such registers are available to cover all the 240 different interrupts and from ISER0 to ISER7, and each register is of 32 bits. So, that means by using let's say the ISER0, so you can enable first 32 interrupts, from 0 to 31 of the NVIC. And by using the next ISER register that is ISER1, so you can enable the next 32 interrupts. That is a 32 to 63. So, like that. So, totally there are 8 such registers to cover all 240 interrupt.

So, now to disable interrupt you have got a register called interrupt clear-enable register. And the short form is ICER and there are also 8 such registers, So, use ISER to set or enable the interrupt, whereas use ICER to disable that interrupt.

I would like to take you to the interrupt set-pending register. Of course, here also there are 8 such a register ISPR0 to ISPR7 and read here these registers force interrupt into the pending state. So, you already know by this time that pending so when pend an interrupt, or when you pend an system exception, the processor will check the priority of the pended interrupts or pended system exceptions, then it will call the respective interrupt handler based on the priority level of those pended interrupts or pended system exceptions. So, this you have seen already in the system exception case. Here also they have given interrupt set pending register and you can force any interrupt triggering by using this register. now we have learnt about these many registers ISER,ICER, ISPR, and ICPR, and also we learnt about interrupt active bit register that is IABR.

( at 6:36 lec 53 )

Let's see some generic steps what we have to follow in order to successfully program an MCU peripheral interrupt.

You should first identify the IRQ number of the peripheral by referring to the microcontroller vector table. So, IRQ numbers are vendor-specific. That's a first thing what you should do? If you are working with ARM Cortex Mx processor. IRQ numbers are very important, because it will help us to debug if the interrupt is not getting triggered. We can check various things.

After that, program the processor register to enable that IRQ. Basically, you'll be configuring NVIC interrupt enable register. Only when you enable the IRQ, the processor will accept the interrupt over that line.

And after that, you can also configure the priority which is always optional. Because, by default, every interrupt will have the highest priority that is 0. I will talk about interrupt priority in later lectures.

After that, configure the peripheral using its peripheral configuration register. For example, in the case of let's say USART3, whenever a packet is received, it will automatically issue an interrupt on the IRQ line 39. That configuration you have to do by using vendor specific peripheral registers. This has got nothing to do with processor. How and when a peripheral should trigger an interrupt depends upon the peripheral. For example, in the case of USART, it triggers interrupt whenever packet is received, if it is a timer then it triggers the interrupt whenever the timer count is expired, or if it is a ADC, then it would trigger the interrupt whenever the conversion is over, like that. You have to do some a configuration in the peripheral configuration register to trigger the interrupt on that IRQ line. Otherwise, you know by default peripherals will not trigger any interrupt on the IRQ line. You have to enable it on the peripheral side two.

When the interrupt is issued on the IRQ line, it will first get pended in the pending register of the processor. That is to be specific pending register of the NVIC. NVIC will allow the IRQ handler associated with the IRQ number to run only if the priority of the new interrupt is higher than the currently executing interrupt handler. Otherwise newly arrived interrupt will stay in pending state. Please note that, if peripheral issues and interrupt when the IRQ number is disabled. That is not activated from the processor side, then still interrupt will get pended in the pending register of the NVIC. As soon as IRQ is enabled, it will trigger the execution of the ISR if the priority is higher than the currently active interrupt service routine. These are the steps you should keep in mind while you program or while you configure an MCU peripheral interrupt.

Let's understand how USART3 peripheral can issue an interrupt to the processor and how the ISR execution takes place. First of all everything happens with an event. In the case of USART the event could be the reception of data packet from the external world. There will be a data which is coming from the external world and it comes to the USART RX buffer let's say. So, when the RX buffer of the USART peripheral is full, then the peripheral will trigger an interrupt on the IRQ line. That means, it makes the IRQ line high or low. That's a second step, which happens at the peripheral side. When the interrupt is issued it will set the pending state for that interrupt in the pending register of the NVIC. That interrupt will get registered first in the pending register. If the IRQ is enabled for that IRQ number, then this output will be 1 and NVIC will interrupt the processor. If the priority is higher than the currently active ISR. When the interrupt is accepted by the CPU, the first thing what the CPU does is, it fetches the ISR address of that IRQ number from the vector table. And after that, the processor jumps to the ISR. In the ISR, so you can copy data from the RX buffer to the SRAM. Basically, you can do some data copy operation to save that data. That's how an event which happens at the peripheral side can be converted into an interrupt and execution of ISR takes place. In this course, actually we don't cover microcontroller specific peripheral programming.Peripheral programming such as UART, SPI, TIMER is out of the scope of this course. If you want to learn more about these peripherals and how to configure them and how to develop a software driver for them, you may have to consult our other courses that is MCU1 and MCU2. This course is all about a learning processor specific details. So, if you are wondering how different events which happen inside the USART3 peripheral is going to interrupt the processor, you can see that, in this a USART interrupt mapping diagram these are the various events which can happen inside the USART3 peripheral. And all those events are then finally mapped on one single line. This line delivers the interrupt for all these events. This line is finally connected to the NVIC at the IRQ position 39.

( watch lec 54 )
