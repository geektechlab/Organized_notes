( at 1:29 lec 41 sec 10 )
( at 3:03 lec 42 sec 10 )

Cortex M Processor physically has 3 stack pointers. One is the register R13 which is SP, MSP and PSP. The MSP stands for main stack pointer and PSP stands for processors stack pointer. SP is R13, PSP and MSP. After processor reset, that is by default, MSP that is main stack pointer will be selected as current stack pointer. That means, SP copies the contents of MSP. That means, the MSP behaves like SP, that is by default.

Thread mode can change the current stack pointer to PSP, that is the thread mode can change this SP from default MSP to PSP by configuring the control registers SPSEL bit. when the processor is in thread mode, by default, the current stack pointer actually copies the value of the MSP. So, that means, suppose if MSP has this stack address than it simply copies this address here. MSP behaves as current stack pointer, that is by default. But, being in thread mode if you change the SPSEL bit of the control register, that is this one. Let's go to the control register. The first bit of the control register. If you make first bit of the control register as 1, PSP will be used as the current stack pointer. That means, the SP that is the register R13 will simply copies the contents of PSP into the current stack pointers. That means, PSP will behave as the current stack pointer. So, in thread mode, by default, this is the condition.SP will be 0 and the MSP will be acting as the current stack pointer.

But, through your code if you change SPSCL bit to 1, then the current stack pointer will be PSP. Handler mode code execution will always use MSP as the current stack pointer. That also means that, changing the value of SPSEL bit of the control register being in the handler mode doesn't make any sense. Because, the write will be ignored. When the processor is in the handler mode PSP is don't care. Only MSP will be active and MSP will be treated as the current stack pointer. But, in the thread mode we have a choice. We can change between MSP and PSP as the current stack pointer.

So, one more important point is MSP will be initialized automatically by the processor after reset by reading the content of the address x0000_0000. It's your responsibility to keep a valid value in this address. The first job the processor does after reset is it reads the content of this address and puts that value into the MSP automatically. But, if you want to use PSP as a stack pointer in your application code, then make sure that before using PSP you initialize the PSP to valid stack address in your code. Without initializing PSP if you try to do PUSH and POP operation on the PSP, then it will create chaos. So, first initialize the PSP to the proper value, then change the control register to switch to PSP, and then you do your PUSH and POP operation in order to use PSP to track the stack memory.
