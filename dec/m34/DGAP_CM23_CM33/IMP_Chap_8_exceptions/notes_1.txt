Sources of exceptions include:
• Peripheral interrupt requests (also referred to as IRQs) or other hardware event signals (e.g., architecturally a reset is a kind of exception)
• Error conditions (e.g., bus error in the memory system)
• Software generated events (e.g., execution of an SVC instruction)

In addition to peripheral events handling, exceptions are needed for OS support, fault handling, and security (e.g., a violation of TrustZone® or a memory protection violation can be handled by fault exception handlers). In the case of OS support, exceptions are needed for:
• Context switching between different tasks/threads, and
• Providing OS services to application codes

When a peripheral or a piece of hardware needs servicing, the following sequence typically occurs:
1. The peripheral asserts an IRQ signal to the processor,
2. The processor suspends the current executing task,
3. The processor executes an ISR to service the peripheral and the ISR optionally clears, if it is
needed, the IRQ signal,
4. The processor resumes the previously suspended task.

The NVIC in the Cortex-M33 processor has the following enhancements when compared to the Cortex-M3/Cortex-M4 processors:
• It has optional TrustZone security support
• It supports sporadic interrupt logic removal
• It has a new SecureFault exception (but only if the TrustZone security extension has been implemented)

CM33 always has two SysTick timers (Secure and Non-secure SysTick).

The NVIC contains a range of programmable registers that are memory mapped and has a few interrupt masking registers that can be accessed using MRS and MSR instructions. Using it:
- Interrupts can be enabled/disabled,
- The priority levels of interrupts and exceptions can be configured,
- Interrupt masking registers can be accessed.

Exceptions are numbered: numbers 1–15 are reserved for system exceptions and those 16 and above are for IRQs. Most of the exceptions, including all interrupts, have programmable priority, and a few system exceptions have fixed priority.

( Very very important: Exception types 1–15 are system exceptions (there is no exception type 0), as outlined in Table 8.3. Exceptions type 16 and above are external interrupt inputs (see Table 8.4). )

The NVIC and SCB data structures are located inside the System Control Space (SCS) address range, which starts from 0xE000E000, and has a size of 4KB. If the TrustZone security extension is implemented and if the processor is in the Secure state, the Non-secure view of  he SCS is accessible via a Non-secure SCS alias at 0xE002Exxx. The SCS also contains registers for the SysTick timer, Memory Protection Unit (MPU), debug registers, etc.

A few operations do require direct access to the SCB/NVIC registers. For example, if you need to relocate the vector table to a different memory location, the program code needs to update the Vector Table Offset Register (VTOR) directly in the SCB.

After reset, all interrupts are disabled and are given a priority level value of 0. If the TrustZone security extension is implemented, all interrupts are defined as Secure by default.Before using any interrupts,
• If the TrustZone security extension is implemented, the Secure firmware needs to define for each interrupt whether the interrupt should be targeting the Secure (for Secure peripherals) or the Non-secure state (for Non-secure peripherals). Potentially, a microcontroller systemmight have most of its interrupts assigned to the Secure domain when the device boots up.To allow the Non-secure application software to use an interrupt, the Non-secure software would, in this scenario, need to call a Secure API in the Secure firmware to request the interrupt to be assigned to the Non-secure domain. This is system dependent. After the target security states of the interrupts are set up, the application’s software wouldneed to carry out the following steps to enable the interrupt feature:
• Setup the priority level of the required interrupt (this step is optional: the default interrupt priority level is 0. If the application needs the interrupt to be set up at a different priority level, then it would be necessary to reprogram the priority level),
• enable the interrupt generation control in the peripheral that triggers the interrupt,
• enable the interrupt in the NVIC.
The application code must also:
• provide a suitable interrupt service routine (ISR) to service the interrupt, and
• ensure the name of the ISR matches the name of the interrupt handler as defined in the vector table (you can usually find this in the startup code provided by the microcontroller vendor). This is required to enable the linker to place the starting address of the ISR in the vector table. In most typical applications that is all you need to do. When the interrupt triggers, the corresponding interruptservice routine (ISR) will execute (you might, though, need to clear the interrupt request from the peripheral within the handler).
