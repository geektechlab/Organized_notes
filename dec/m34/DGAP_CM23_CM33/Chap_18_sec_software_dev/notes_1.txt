When TrustZone technology is being used, Secure and the Non-secure software projects
are separately compiled and linked. Each of them has their own boot codes and
C libraries. This is illustrated in Fig. 18.1.
Because it is expected that Secure software developers will need to create a Non-secure
project so that they can test the interactions between the two sides, many toolchains support
a feature called multiproject workspace—allowing the simultaneous development and
debugging of multiple projects. An example of this is shown in Section 18.4.
When a Secure project has been created, the Secure software developer will need to provide
the following files to the Non-secure software developer(s) so that Non-secure projects can
access the Secure APIs:
• The function prototype of the Secure APIs (i.e., header file(s)).
• An export library that only provides information about the addresses of the APIs (i.e.,
address symbols, which are needed by the linker tools when linking Non-secure projects).

Please note, the internal details of the APIs, such as instruction codes, are omitted from this
library.
Using the information in these files, a Non-secure software project that contains function
calls to the Secure APIs can then be compiled and linked. The Non-secure software project can
then either be created by the same person who created the Secure project or by a third party
developer who only creates Non-secure applications.
Please note:
• Secure and Non-secure projects can be created using different tool chains. This is
achievable because the method of parameters and result passing is standardized in the
Procedure Call Standard for the Arm Architecture [1].
• The Secure project must be generated before the Non-secure project is compiled and
linked. This is so the export library that is generated from the linking stage of the Secure
project is available during the linking stage of the Non-secure project.
Where a Secure code has to call a Non-secure function, the Non-secure code, first of all,
needs to transfer the pointer of the Non-secure function to the Secure world via a Secure
API. When it does, the Secure API validates the fact that the function pointer is pointing
to a Non-secure address and then later executes the function pointer when it is needed.

• The processor is in the Secure state when it is executing code from the Secure memory
• The processor is in the Non-secure state when it is executing code from the Non-secure
memory.

When the processor starts up from reset, the processor executes in Secure privileged thread
mode.

Theoretically, during a debug session, a debugger can change the security state of a processor when the processor has been halted. However, to stop a security violation occurring
when the processor resumes its instruction execution, or when the debugger single steps into
the next instruction, the program counter would also need to change so that the security
attribute of the software execution address matches the processor’s state.

• The SAU and IDAU define how the 4GB address-space is partitioned into Secure and
Non-secure regions
• The MPCs and PPCs define, for each memory page or each peripheral, whether they are
accessible from a Secure or a Non-secure address alias.

To ensure that the system is Secure, secure software developers must make sure that
resources used by Secure software are placed in the Secure address ranges. This includes:
• Secure firmware codes,
• Secure data memories (including stacks and heap memories),
• The Secure vector table, and
• Secure peripherals.
By so doing, Non-secure software is unable to gain direct access to those Secure resources.

gisters is detailed in Table 18.1.
The SAU sets up work in a similar way to the MPU by defining memory regions using a
base (starting) address and a limit (ending) address, with a granularity of 32 bytes. The SAU
in the Cortex-M23 and Cortex-M33 processors can have 0, 4, or 8 SAU regions. In an Armv8-M
processor with TrustZone support, even when the SAU has been configured with zero SAU
regions, the SAU would still be available. In this instance, the memory partitioning would be
entirely handled by the IDAUs. The exact memory partitioning would be defined by the chip
designers that designed the IDAU.

The SAU address lookup behavior, as shown in Fig. 18.4, is explained in detail as follows:
• If the SAU is enabled, and if an address matches an SAU region, the result will be based on
the setting on the address comparator, be either Non-secure or Secure Non-secure Callable
(NSC).
• If the SAU is enabled, and if the address does not match any SAU region, the result is
Secure.
• If the SAU is disabled, and if the ALLNS (All Non-secure) bit in the SAU Control register is
set, the result is Non-secure (i.e., the memory map is entirely decided on by the IDAU).
• If the SAU is disabled, and if the ALLNS (All Non-secure) bit in the SAU Control register is
zero, the result is Secure. This is the default setting after a reset.
During the execution of a TT (Test Target) instruction, when an SAU region matches the
address of the TT checking input, the region number of the matching SAU region is reported
as a part of the result for the TT execution (Section 7.4.2 and Fig. 7.6).

The Security Attribution Unit (SAU) contains several programmable registers. These
registers are placed in the System Control Space (SCS) and are only accessible from the Secure
privileged state. Access to the SAU registers is always 32-bit in size. A summary of SAU
registers is detailed in Table 18.1.

At the same time as an address is being looked up using the SAU, the IDAUs are also, in
parallel, undertaking the address lookup. The results from the SAU and IDAU lookup are
then combined, as shown in Fig. 18.5.
Chips that are designed for ultra-low power applications and which have a tiny silicon area
can use the IDAUs for address partitioning and can have an SAU with no region comparators. In this scenario, the Secure software that handles the TrustZone initialization only needs to set
the ALLNS bit in the SAU Control register to 1 so that the security partitioning is only handled
by the IDAUs.

The SAU Region Limit Address Register (Table 18.6) details the limit address of the SAU
region currently selected by the SAU Region Number Register. The ending address of the
SAU region is inclusive of the limit address set in this register, with the lowest 5 bits of
the SAU region ending address automatically padded with value 0x1F. Because of this, even
the last byte of the 32-byte granularity is included in the SAU region.

SFSR and SFAR registers allow a SecureFault exception handler to report information about the fault
exception and, potentially, allows the fault exception handler to deal with the issue. The
obtained information can also be used during a debug session to help software developers
understand any issues that have arisen during the software operations.
