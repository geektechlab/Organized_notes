Trustzone and C11 atomic instructions are new.

Please note, some instructions are available in multiple encoding forms. For example, most of the 16-bit Thumb instructions can also be encoded in a 32-bit equivalent instruction. However, the 32-bit version of the aforementioned instruction has additional bit fields for additional control such as:
• selecting whether flags should be updated,
• wider immediate data/offset, or
• enabling access to the high registers (r8–r12).

These control capabilities are not possible for some of the 16-bit instructions due to the limitation of the instruction encoding space. If an operation can be carried out in either a 16- or 32-bit version of the same instruction, the C compiler can choose:
• a 16-bit version of the instruction for a smaller code size, or
• in some cases, use a 32-bit version of the instruction to align the position of a subsequent 32-bit branch target instruction to align it to a 32-bit boundary (this improves performance as the 32-bit instruction can then be fetched with a single bus transfer). 32-bit Thumb-2 instructions can be half word aligned. For example, you can have a 32-bit instruction located in a half word location (unaligned, Fig. 5.1):
	0x1000 : LDR r0,[r1] ;a 16-bit instructions (occupy 0x1000-0x1001)
	0x1002 : RBIT.W r0 ;a 32-bit Thumb-2 instruction (occupy 0x1002-0x1005)

( IMP: TABLE 5.12 Special registers accessible with MRS and MSR instructions. )

( IMP: TABLE 5.14 Instructions for transferring data to/from floating point registers )

Usually, APIs provided by an OS execute at privileged level, e.g., when the APIs are accessed via SuperVisor Call (SVC). Since an API might perform memory access on behalf of the unprivileged task that called the API, the API must take care that it is not performing operations on an address space that the unprivileged task is not supposed to have access to. Otherwise, a malicious task could call an OS API to modify an address which is owned by the OS, or by other tasks in the system, resulting in security vulnerabilities.

To solve this problem, traditionally many Arm processors provided memory access instructions that allowed privileged software to access memories at unprivileged level. These instructions are also supported in Armv8-M Mainline (the Cortex-M33 processor). By using these aforementioned instructions, the access permission is restricted by the Memory Protection Unit (MPU). This means that the OS APIs accessing data on behalf of an unprivileged software task have the same permission as the unprivileged software task.

Please note, Armv8-M provides an alternative way for privileged APIs to check whether the pointers from an unprivileged task are permitted to be accessed under the current MPU configuration. The TT (Test Target) instruction, together with the new C intrinsic functions defined in the Arm C Language Extension (ACLE), provides an easier way to handle the pointer check. There is, accordingly, no need to use hand coded assembly APIs to utilize unprivileged memory access instructions.

Load-acquire and store-release instructions are memory access instructions with memory ordering requirements. These instructions are new in the Cortex-M processor family and are designed to help handle data access across multiprocessor systems. This includes the handling of atomic variables, a feature introduced in the C11 standard. In high performance processors, the processor hardware can re-order memory access to increase performance. This optimization does not cause problems to the software providing that:
(a) the processor keeps track of the access ordering and
(b) ensures that the operation results are not affected.

Memory access re-ordering techniques include the following:
• In the case of reading data, a processor can, optionally, perform the read operation earlier to prevent the subsequent data processing operations that use the data from being stalled. In a high-performance processor with a long pipeline, the read operation can potentially, as long as the memory location is not a peripheral, speculatively start earlier in the pipeline. The speculative read does not violate security management, such as memory partitioning of the TrustZone security extension.
• In the case of data write, a processor might implement a write buffer with multiple buffer entries. In such a case, a write operation might be delayed and stay in the write buffer for a period of time, resulting in subsequent write operations, potentially, reaching the  memory before it.

the memory access ordering behavior for normal memories (e.g., SRAM) is not strictly required and could lead to the problem shown in Fig. 5.5. To solve this issue, memory barrier instructions (see Section 5.19) should be added to ensure the ordering of memory access observed by other bus masters in the system matches the program’s intended behaviors (Fig. 5.6). In high performance processors, however, the use of those memory barrier instructions can take many clock cycles, which can impact performance, e.g., all data in the write buffers must be drained and if any of the subsequent reads have started early these must be discarded and re-issued.

To reduce the performance impact, newer Arm processors (from Armv8-M onwards) introduced store release and load acquire instructions (Fig. 5.7).
• Store-release—memory store operations that need to wait until previously issued write operations are complete before they are issued tothe bus. In this situation, when other bus masters observe the update of flag variable Y (updated by a store release instruction), the update on data block X must have been completed. 
• Load-acquire—memory load operations that prevent subsequent read accesses to be issued in advance until the load acquire operation has been completed. Preceding buffered writes do not have to be drained and thus avoid causing a long delay.

In Cortex-M33 processor, because the pipelines are relatively simple and are without memory access re-ordering, the load-acquire and store-release instructions execute just like normal memory access instructions.

Armv8-M Mainline architecture supports an optional floating-point extension. When the floating-point hardware is included, the processor’s implementation could:
	Includes a floating-point unit (FPU) that support both single precision and double precision (64-bit) floating-point calculations.

Before using any floating-point instruction, you must first enable the floating-point unit by setting the CP11 and CP10 bit fields in the Coprocessor Access Control Register (SCB-> CPACR at address 0xE000ED88).The CPACR register can only be accessed in privileged state.

In systems where the TrustZone security extension has been implemented, the Secure software needs to consider whether it should allow Non-secure software to access the floatingpoint unit feature. This is controlled by the Non-secure Access Control Register (SCB-> NSCAR at address 0xE000ED8C), a register which is accessible from Secure privileged state only. To enable Non-secure software to access the FPU, the CP11 (bit 11) and CP10 (bit10) fields of this register must be set to 1. Additionally, if the TrustZone security extension has been implemented, the Coprocessor Access Control Register (CPACR) is banked between security states. And, the access permissions are as follows:
• The Secure version of the CPACR can only be accessed by Secure software using SCB-> CPACR (at address 0xE000ED88).
• The Non-secure version of the CPACR can be accessed by both Secure and Non-secure software. Secure software can access this register using the Non-secure alias address(SCB_NS->CPACR at address 0xE002ED880) and Non-secure software can access the same register using SCB->CPACR at address 0xE000ED88.

Secure software will also need to program the Coprocessor Power Control Register (CPPWR) to decide whether Non-secure software can access the FPU’s power control bit fields.

All floating-point instructions start with the letter V. The floating-point instruction set in the Cortex-M33 processor is based on the FPv5. This is a superset of the floating-point instruction set in the Cortex-M4, which is based on the FPv4. The additional floating-point instruction provides some floating-point processing performance enhancements.

There are two other FPU related instructions that are specifically for TrustZone security management: VLLDM and VLSTM. They are covered in Section 5.20. Please note, floating point processing can generate “exceptions”. For example, a 32-bit data pattern does not always convert  into a valid floating-point number and would, therefore, not be processed by the FPU as normal data—a situation called NaN (Not a Number).

The SuperVisor Call (SVC) instruction is used to generate the SVC exception (exception type 11). Typically, the SVC allows an embedded OS/RealTime OS (RTOS) to provide services (which execute in privileged state) to unprivileged application tasks. The SVC exception  provides the transition mechanism from unprivileged to privileged.

The SVC mechanism is optimized for the purpose of being an OS service gateway. This is because application tasks accessing an OS service only need to know the SVC service number and the input parameters: there is no need for the application task to know the actual program memory address of the service.

If additional parameters need to be passed to the SVC, via registers R0–R3, the SVC function can be written as:
	__attribute__((always_inline)) void svc_3_service(parameter1, parameter2, parameter3, parameter4)
	{
		register unsigned r0 asm("r0") = parameter1;
		register unsigned r1 asm("r1") = parameter2;
		register unsigned r2 asm("r2") = parameter3;
		register unsigned r3 asm("r3") = parameter4;
		__asm volatile(
						"SVC #3"
						:
						: "r" (r0), "r" (r1), "r" (r2), "r" (r3)
					);
	}
	void foo(void)
	{
		svc_3_service (0x1, 0x2, 0x3, 0x4);
	}

The CPS instruction can only be used with one of the following suffixes: IE (interrupt enable) or ID (interrupt disable).

In Armv8-M processors with the TrustZone security extension, the interrupt masking registers are banked. The CPS instructions (Table 5.74) can only be used to access the interrupt masking registers in the current security domain. If Secure privileged software needs to access Non-secure interrupt masking registers, then the MSR and MRS instructions should be used.

The Cortex-M23, Cortex-M33, and other Armv8-M processors are all optimized for small embedded systems and, because they have a relatively short pipeline, do not reorder memory access. However, Arm architectures (including Armv6-M, Armv7-M, and Arm8-M) allow the design of processors to reorder memory transfers, that is, memory access could take place, or complete in an order different from the program code, providing that it does not affect the result of the data processing operations.

Memory access re-ordering often happens in high-end processors, such as those designs with caches, superscalar pipeline or out-of-order-execution capabilities. However, by re-ordering memory access, and if the data is shared between multiple processors, then the data sequence observed by another processor can be different from the programmed sequence. This can cause errors or glitches in a range of applications. Examples of the causes of these failures (refer to Fig. 5.4) is covered in Section 5.7.12, Load-acquire and store release instructions.
The memory barrier instructions can be used to:
– enforce ordering between memory accesses,
– enforce ordering between a memory access and another processor’s operation,
– ensure the effect of a system configuration change takes place before subsequent operations.

Cortex®-M processors support the following memory barrier instructions (Table 5.75). In C programming with CMSIS (i.e., using a CMSIS-CORE compliant device driver), these instructions can be accessed using the following functions:
	void __DMB(void); // Data Memory Barrier
	void __DSB(void); // Data Synchronization Barrier
	void __ISB(void); // Instruction Synchronization Barrier
there are several cases (Table 5.76, 5.77) where the aforementioned barrier instructions should be used.

	DMB Data Memory Barrier: ensures that all memory accesses are completed before new memory access is committed
	DSB Data Synchronization Barrier: ensures that all memory accesses are completed before the next instruction is executed
	ISB Instruction Synchronization Barrier: flushes the pipeline and ensures that all previous instructions are completed before executing a new instruction.

A number of instructions were introduced for Armv8-M to enable the TrustZone security extension to work (IMP: Table 5.78). VLLDM and VLSTM are two instructions that were added to Armv8-M Mainline processors for context saving and for the restoration of register contents in the floating-point unit (FPU). If Secure software needs to call certain Non-secure functions/subroutines frequently it can, if these two instructions are not available, be very inefficient.

Without the VLLDM and the VLSTM instructions, for each Non-secure function call,
• The data in the FPU would need to be saved to the Secure stack, then
• the FPU registers would need to be erased (to prevent leakage), and then
• the Non-secure function would need to be called.

After the completion of the Non-secure function call, we would then need to restore the registers. This is inefficient because many of the Non-secure functions/subroutines being called might not have used the FPU. The VLSTM and VLLDM instructions were, therefore,  introduced to make the process more efficient.

The VLSTM and the VLLDM instructions (Table 5.79) improved the process by saving and restoring the FPU registers only if the Non-secure function used the FPU. Instead of storing all of the FPU register bank data in the Secure stack before calling a Non-secure subroutine, Secure software allocates space in the Secure stack (pointed to by Rn) and uses the VLSTM to enable lazy stacking.

This means the actual stacking and clearing of the Secure FPU registers only happens when the Non-secure subroutine uses the FPU. After the Non-secure function/ subroutine completes and returns to the Secure world, Secure software uses the VLLDM to restore the saved data from the Secure stack—but only if the Secure FPU data has been pushed to the Secure stack. If the called Non-secure function/subroutine did not use the FPU, then the actual saving and restoring of the FPU registers does not take place and, hence, the number of clock cycles needed is reduced. If the FPU is not implemented or is disabled, the VLSTM and VLLDM instructions execute as NOPs (no operation).

( TABLE 5.79 VLSTM and VLLDM instructions for TrustZone support for Armv8-M Mainline. )

The coprocessor interface support enables chip designers to add closely coupled hardware accelerators to the Cortex-M33 processor. The functions of the accelerators are defined by chip designers and/or by microcontroller vendors. These hardware accelerators are typically used for mathematical calculations (e.g., trigonometric functions) and crypto acceleration, etc. The Cortex-M33 processor supports up to eight custom defined coprocessors (#0–#7), with each of them potentially being implemented as:
• A coprocessor hardware unit external to the processor and connected via the coprocessor interface
• A custom data path unit within the processor

A coprocessor hardware unit, which is outside the processor, can have up to 16 coprocessor registers. (Fig. 5.20) The coprocessor instructions are divided into three types:
• Transferring data from the processor’s register bank to one or two coprocessor registers, with opcodes for defining operation(s).
• Transferring data from one or two coprocessor registers to the processor’s register bank, with opcodes for defining operation(s).
• Coprocessor operations (opcodes+ coprocessor register specifiers).

When compared to the memory mapped peripheral approach, a coprocessor interface provides a faster way to access hardware accelerators. This is because:
• The coprocessor interface can transfer up to 64 bits of data at a time, whereas the bus interfaces on the Cortex-M33 processor can only transfer a maximum of 32 bits per cycle.
• Coprocessor transfers are not affected by system level bus traffic (e.g., it is not delayed by another bus transfer which could have multiple clock cycles of wait states).

( TABLE 5.80 Coprocessor instructions )

• The software does not have to first setup the address in a register before starting the transfer. This is because the coprocessor ID and coprocessor register specifiers are part of the coprocessor instruction’s encoding.
• The software does not have to use a separate transfer to define the coprocessor’s operation. This is because the coprocessor opcode is part of the coprocessor instruction’s encoding.

The MRC and MRC2 instructions support the transfer of the APSR.NZVC flags when the processor register field (Rt) is set to PC (0xF).The architecture of the Arm custom instruction instructions supports five data types:
• 32-bit integer,
• 64-bit integer (D—dual variant),
• single precision float (32-bit, fp32)—supported by the Cortex-M33 r1, if the FPU is included,
• double precision (64-bit, fp64, not supported by the Cortex-M33 r1), and
• MVE vector in Armv8.1-M (128-bit, not supported by the Cortex-M33 r1).

there is no data cache inside the Cortex-M23 and Cortex-M33 processors.

there is no instruction cache inside the Cortex-M23 and Cortex-M33 processors.
