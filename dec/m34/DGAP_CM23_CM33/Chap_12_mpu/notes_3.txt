Although the concepts for MPU operations are similar to that in Armv6-M and Armv7-M,
the MPU in Armv8-M architecture has a different programmer’s model. There is a range of
other differences and these are as follows:
• In Armv8-M architecture, the size of an MPU region can be any size in the granularity of
32 bytes. The previous restriction where region size must be 2^N (i.e., 2 to the power of N)
has been removed.
• The starting address of an MPU region can now also be in any address which is a multiple
of 32 bytes. This allows more flexibility for the MPU region placement.
• In the new programmer’s model for Armv8-M, the subregion disable feature has been
removed. Because the size of an MPU region is no longer restricted to 2^N, it can, therefore,
be difficult to equally divide a region into eight subregions.
• The new design does not allow MPU regions to be overlapped. With the new
programmer’s model, the MPU region definition is already much more flexible so the need
to overlap an MPU region is no longer necessary (apart from overlapping with the
background region).
• In Armv7-M and Armv6-M MPUs, you can declare an MPU region as having no access.
This is not required in Armv8-M. By not mapping an address to an MPU region, the
address is automatically nonaccessible (except when the address maps to an internal
memory mapped component like the NVIC, the SysTick, etc.). Access to an unmapped
address location, when the MPU is enabled, triggers the MemManage fault (except where
the background region is enabled and when the software is executing in privileged state).
• There are new attribute definitions of device memories.
• Attribute Indirection for memory attribute generation is now used in Armv8-M: using an
index value which is then looked up in memory attribute registers.

The addition of TrustZone technology also impacts the MPU program code. When the optional Security Extension (i.e., TrustZone) is implemented, the processor can have:
• one set of MPU configuration registers for the Secure state and another set of MPU
configuration registers for the Non-Secure state, or
• an MPU feature available in just one of the security states or
• no MPU at all.
When TrustZone and the Non-secure MPU is implemented, Secure software can access the
Non-Secure MPU by using an alias address (address 0xE002ED90).
