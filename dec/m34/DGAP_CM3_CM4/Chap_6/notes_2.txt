Bit-band operation support allows a single load/store operation to access (read/ write) to a single data bit. In the Cortex-M3 and Cortex-M4 processors, this is supported in two pre-defined memory regions called bit-band regions. One of them is located in the first 1MB of the SRAM region, and the other is located in the first 1MB of the peripheral region. These two memory regions can be accessed like normal memory, but they can also be accessed via a separate memory region called the bit-band alias. When the bit-band alias address is used, each individual bit can be accessed separately in the least significant bit (LSB) of each word-aligned address ( Figure 6.7, 6.8, 6.9, 6.10, 6.11 ).

In the Cortex-M3 and Cortex-M4 processors, we use the term bit-band to indicate that the feature is a special memory band (region) that provides bit accesses. Bit-bang commonly refers to driving I/O pins under software control to provide serial communication functions. The bit-band feature in the Cortex-M3 and Cortex-M4 processors can be used for bit-banging implementations, but the definitions of these two terms are different.

Besides providing faster bit operations with fewer instructions, the bit-band feature in the Cortex-M3 and Cortex-M4 processors is also essential for situations in which resources (e.g., various pins in I/O port) are being shared by more than one process. One of the most important advantages or properties of bit-band operation is that it is atomic. In other words, the READ-MODIFY-WRITE sequence cannot be interrupted by other bus activities. Without this behavior in, for example, using a software READ-MODIFY-WRITE sequence, the following problem can occur: Consider a simple output port with bit 0 used by a main program and bit 1 used by an interrupt handler. A software based READ-MODIFY-WRITE operation can cause data conflicts, as shown in Figure 6.12.

With the bit-band feature, this kind of race condition can be avoided because the READ-MODIFY-WRITE is carried out at the hardware level and is atomic (the two transfers cannot be pulled apart) and interrupts cannot take place between them (Figure 6.13).

Similar issues can be found in multitasking systems. For example, if bit 0 of the output port is used by Process A and bit 1 is used by Process B, a data conflict can occur in a software-based READ-MODIFY-WRITE (Figure 6.14).

Again, the bit-band feature can ensure that bit accesses from each task are separated so that no data conflicts occur (Figure 6.15).
