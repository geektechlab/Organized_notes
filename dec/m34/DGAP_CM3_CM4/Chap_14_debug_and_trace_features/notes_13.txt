When a debugger connects to a microcontroller device, it might carry out the
following sequence:
1. First, attempt to detect the ID register value in the SWJ-DP.
2. Issue a debug power request in the SWJ-DP to ensure that the system is ready for
debug connection.
3. Optionally scan through the debug APB to check what type of AP is connected.
4. Detect the ID register values in the AHB-AP and check that it can access the
memory map.
5. Optionally obtain the address of the primary ROM table from AHB-AP and
detect the debug components in the system via the ROM table.
6. Optionally download a program image to the device based on the project
settings.
7. Optionally enable the reset Vector Catch feature, and reset the system using
SCB->AIRCR (SYSRESETREQ).
Now the processor is halted at the beginning of program execution.

Typically the flash programming operation is carried out in blocks of data. The
debugger downloads a flash programming algorithm code and a block of a program
image to be programmed to the SRAM, and then executes the flash programming
code so that the processor carries out the flash programming operation by itself.
Since each time the SRAM can only hold a small part of the program image, the
steps have to be repeated a number of times until the whole program image is programmed to the flash.
The debugger can then repeat the steps in section 14.7.1 to enable the start of the
debug session.

Since the processors have a limited number of breakpoint comparators, when a
breakpoint is set, the debugger might first try to write a breakpoint instruction to
the program location to see if the program is running from SRAM (which can be
modified). If the write cannot be done, then the debugger will use a FPB hardware
comparator to set the breakpoint to this memory location. If the breakpoint location
is not in the CODE region, the debugger could set up a DWT comparator to use the
PC match function. This is not the same as the breakpoint mechanism because the
processor halts after the instruction is executed, but at least it can still be useful
for simple debugging.
If the program is running from SRAM, and the breakpoint is hit, the debugger
will then have to replace the breakpoint instruction with the original instruction
before the user resumes program execution.
