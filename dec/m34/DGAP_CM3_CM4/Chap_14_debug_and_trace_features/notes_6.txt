( think just read, don't remember, mostly related to register only )

The processor core contains a number of debug control registers (See Table 14.3).
They provide controls for debug operations including halting, resume, single stepping, and configuration of Debug Monitor exception, Vector Catch feature, etc.
Details of DHCSR are shown in Table 14.4. Note: For DHCSR, bits 5,3,2,0 are
reset by power on reset only. Bit 1 can be reset by power on reset (cold reset) and
system reset (including VECTRESET using SCB->AIRCR).
To enter halt mode, the C_DEBUGEN bit in the Debug Halting Control and
Status register (DHCSR) must be set. This bit can only be programmed through
the debugger connection (via the Debug Access Port, DAP), so you cannot
halt the Cortex-M3/M4 processor without a debugger. After C_DEBUGEN
is set, the core can be halted by setting the C_HALT bit in DHCSR. This bit can
be set by either the debugger or by the software running on the processor itself.
The bit field definition of DHCSR differs between read operations and write
operations. For write operations, a debug key value must be used on bit 31 to bit
16. For read operations, there is no debug key and the return value of the upper
half-word contains the status bits (see Table 14.4).

In normal situations, the DHCSR is used only by the debugger. Application code
should not change DHCSR contents to avoid causing problems to debugger tools.
Details of the DEMCR are shown in Table 14.5. Note: For DEMCR, bits 16 to 19
are reset by system reset as well as power on reset. Other bits are reset by power on
reset only.
The DEMCR register is used to control the Vector Catch feature, Debug Monitor
exception, as well as enabling the trace subsystem. Before using any trace features (e.g., instruction trace, data trace) or accessing any trace component (e.g., DWT,
ITM, ETM, TPIU), the TRCENA bit must be set to 1.
Two more registers are included to provide access to registers inside the processor core. They are the Debug Core Register Selector register (DCRSR) and
the Debug Core Register Data register (DCRDR) (see Tables 14.6 and 14.7). The
register transfer feature can be used only when the processor is halted. For Debug
Monitor mode debugging, the debug agent code can have access to all registers
by software.

The DCRSR and the DCRDR registers can only transfer register values during
halt mode debug. For debugging using a debug monitor handler, the contents of
some of the registers can be accessed from the stack memory; the others can be
accessed directly within the monitor exception handler.
The DCRDR can also be used for semi-hosting if suitable function libraries and
debugger support are available. For example, when an application executes a printf
statement, the text output could be generated by a number of putc (put character)
function calls. The putc function calls can be implemented as functions that store
the output character and status to the DCRDR and then trigger the debug mode.
The debugger can then detect the core halt and collect the output character for
display. This operation, however, requires the core to halt, whereas the printf solution using ITM (section 18.2) does not have this limitation.

There are various additional features in the Cortex-M3 and Cortex-M4 processors to support debug operations:
• External debug request signal: The processor provides an external debug
request signal that allows the Cortex-M3/M4 processor to enter debug mode
through an external event such as debug status of other processors in a
multi-processor system. This feature is very useful for debugging a multiprocessor system. In simple microcontrollers, this signal is likely to be
tied low.
• Debug restart interface: The processor provides a hardware handshaking signal
interface to allow the processor to be unhalted using other hardware on the chip.
This feature is commonly used for synchronized debug restart in a multiprocessor system. In a single processor system the handshaking interface is
normally unused.
• DFSR: Because of the various debug events available on the Cortex-M3/M4, a
DFSR (Debug Fault Status Register) is available for the debugger to determine
the debug event that has taken place (see section 12.4.6).
• Reset control: During debugging, the processor core can be restarted using the
VECTRESET control bit or SYSRESETREQ control bit in the Application
Interrupt and Reset Control register (0xE000ED0C). Using this reset control
register, the processor can be reset without affecting the debug components in
the system (see section 9.6).
• Interrupt masking: This feature is very useful during stepping. For example, if you
need to debug an application but do not want the code to enter the interrupt service
routine during the stepping, the interrupt request can be masked. This is done by
setting the C_MASKINTS bit in the DHCSR (0xE000EDF0) (see Table 14.4).
• Stalled bus transfer termination: If a bus transfer is stalled for a very long time, it is
possible for the debugger to terminate the stalled transfer by a debug
control register. This is done by setting the C_SNAPSTALL bit in the DHCSR
(0xE000EDF0). This feature can be used only by a debugger during halt (see
Table 14.4).
