PRIMASK
	In many applications you might need to temporarily disable all interrupts to carry out some timing critical tasks. You can use the PRIMASK register for this purpose. The PRIMASK register can only be accessed in privileged state. The PRIMASK register is used to disable all exceptions except NMI and HardFault. It effectively changes the current priority level to 0 (highest programmable level). In C programming, you can use the functions provided in CMSIS-Core to set and clear PRIMASK:
		void __enable_irq(); // Clear PRIMASK
		void __disable_irq(); // Set PRIMASK
		void __set_PRIMASK(uint32_t priMask); // Set PRIMASK to value
		uint32_t __get_PRIMASK(void); // Read the PRIMASK value
	In assembly language programming, you can change the value of PRIMARK register using CPS (Change Processor State) instructions:
		CPSIE I ; Clear PRIMASK (Enable interrupts)
		CPSID I ; Set PRIMASK (Disable interrupts)
	The PRIMASK register can also be accessed using the MRS and MSR instructions. For example:
		MOVS R0, #1
		MSR PRIMASK, R0 ; Write 1 to PRIMASK to disable all interrupts
	and:
		MOVS R0, #0
		MSR PRIMASK, R0 ; Write 0 to PRIMASK to allow interrupts
	When the PRIMASK is set, all fault events will trigger the HardFault exception even if the corresponding configurable fault exception (i.e., MemManage, Bus Fault, Usage Fault) is enabled.

FAULTMASK
	In terms of behavior, the FAULTMASK is very similar to PRIMASK except that it changes the effective current priority level to -1, so that even the HardFault handler is blocked. Only the NMI exception handler can be executed when FAULTMASK is set. In terms of usage, FAULTMASK is intended for configurable fault handlers (i.e., MemManage, Bus Fault, Usage Fault) to raise its priority to -1 so that these handlers can have access to some special features for HardFault exceptions including:
	• Bypass MPU (see HFNMIENA in MPU Control Register, Table 11.3)
	• Ignore data Bus Fault (see BFHFMIGN bit in Configuration Control Register, section 9.8.3) for device/memory probing
	By raising the current priority level to -1, the FAULTMASK also allows configurable fault handlers to prevent other exceptions or interrupt handlers executing while an issue is being addressed. More information about fault handling can be found in Chapter 12. The FAULTMASK register can only be accessed in privileged state, but cannot be set within NMI and HardFault handlers. In C programming with CMSIS-compliant driver libraries, you can use the following CMSIS-Core functions to set and clear the FAULTMASK as follows:
		void __enable_fault_irq(void); // Clear FAULTMASK
		void __disable_fault_irq(void); // Set FAULTMASK to disable interrupts
		void __set_FAULTMASK(uint32_t faultMask);
		uint32_t __get_FAULTMASK(void);
	For assembly language users, you can change the current status of the FAULTMASK using CPS instructions as follows:
		CPSIE F ; Clear FAULTMASK
		CPSID F ; Set FAULTMASK
	You can also access the FAULTMASK register using MRS and MSR instructions:
		MOVS R0, #1
		MSR FAULTMASK, R0 ; Write 1 to FAULTMASK to disable all interrupts
	and:
		MOVS R0, #0
		MSR FAULTMASK, R0 ; Write 0 to FAULTMASK to allow interrupts
	FAULTMASK is cleared automatically upon exiting the exception handler
	except return from NMI handler.

BASEPRI
	In some cases, you might only want to disable interrupts with priority lower than a certain level. In this case, you could use the BASEPRI register. To do this, simply write the required masking priority level to the BASEPRI register. For example, if you want to block all exceptions with priority level equal to or lower than 0x60, you can write the value to BASEPRI:
		__set_BASEPRI(0x60); // Disable interrupts with priority 0x60-0xFF using CMSIS-Core function
	For users of assembly language, the same operation can be written as:
		MOVS R0, #0x60
		MSR BASEPRI, R0 ; Disable interrupts with priority 0x60-0xFF
	You can also read back the value of BASEPRI:
		x = __get_BASEPRI(void); // Read value of BASEPRI
	or in assembly language:
		MRS R0, BASEPRI
	To cancel the masking, just write 0 to the BASEPRI register:
		__set_BASEPRI(0x0); // Turn off BASEPRI masking
	Or in assembly language:
		MOVS R0, #0x0
		MSR BASEPRI, R0 ; Turn off BASEPRI masking
	The BASEPRI register can also be accessed using the BASEPRI_MAX register name. It is actually the same register, but when you use it with this name, it will give you a conditional write operation. (As far as hardware is concerned, BASEPRI and BASEPRI_MAX are the same register, but in the assembler code they use different register name coding.) When you use BASEPRI_MAX as a register, the processor hardware automatically compares the current value and the new value and only allows the update if it is to be changed to a higher-priority level; it cannot be changed to lower-priority levels. For example, consider the following instruction sequence:
		MOVS R0, #0x60
		MSR BASEPRI_MAX, R0 ; Disable interrupts with priority 0x60, 0x61,..., etc
		MOVS R0, #0xF0
		MSR BASEPRI_MAX, R0 ; This write will be ignored because it is lower level than 0x60 To change to a lower masking level or disable the masking, the BASEPRI register name should be used.

	The BASEPRI/ BASEPRI_MAX register cannot be set in the unprivileged state. As with other priority-level registers, the formatting of the BASEPRI register is affected by the number of implemented priority register widths. For example, if only 3 bits are implemented for priority-level registers, BASEPRI can be programmed as 0x00, 0x20, 0x40 . 0xC0, and 0xE0.

Besides enabling the interrupts, you should also make sure that you have enough stack memory if you allow a large number of nested interrupts. Because in Handler mode the handlers always use the Main Stack Pointer (MSP), the main stack memory should contain enough stack space for the worst case (maximum number of nested interrupt/exceptions). The stack space calculation should include the stack space used by the handler, and the space used by the stack frames for each level  (see Chapter 8 for details on stack frames).
