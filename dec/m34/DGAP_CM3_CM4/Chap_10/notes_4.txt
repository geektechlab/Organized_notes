In a multi-tasking system, it is common that a number of tasks need to share a limited number of resources. For example, there might be just one console display output and a number of different tasks might need to display information through this. As a result, almost all OSs have some sort of built-in mechanism to allow a task to “lock” a resource and “free” it when the task no longer needs it. The locking mechanism is usually based on software variables. If a lock variable is set, other tasks see that it is “locked” and have to wait.

This feature is usually called a semaphore. For the case when only one resource is available, it is also called Mutual Exclusive (MUTEX), which is one type of semaphore. In general, semaphores can support multiple tokens. For example, a communication stack might support up to four channels, and the semaphore software variable can be implemented as a “token counter,” with a starting value of 4 (Figure 10.12). When a task needs to access a channel, it decrements the counter using a semaphore operation. When the counter reaches zero, all the channels are used and any task that needs a communication channel will have to wait until one of the tasks that gained access initially has finished using the channel and releases the token by incrementing the counter.

However, the decrement of the counter variable is not atomic because you need:
• One instruction to read the variable
• One instruction to decrement it
• Another instruction to write it back to the memory
If a context switching happened just between the read and write, another task can read the same value and then both tasks might think that they have got the last token! (Figure 10.13).

There are several ways to prevent this issue. The simplest way is to disable context switching (e.g., by disabling exceptions) when handling semaphores. This can increase interrupt latency, and can only work for single processor designs. In multi-processor designs, there is a chance that two tasks running on two different processors try to decrement the semaphore variable at the same time. Stopping exception handling does not solve this issue.

In order to allow semaphores to work in both single processor and multiprocessor environments, the Cortex-M4 processors support a feature called exclusive access. The semaphore variables are read and written using exclusive load and exclusive store. If during the store operation it was found that the access cannot be guaranteed to be exclusive, the exclusive store fails and the write will not take place. The processor should then retry the exclusive access sequence.

Inside the processor, there is a small hardware unit called the local monitor. In a normal situation it is in the Open Access state. After executing an exclusive load instruction, it switches to the Exclusive Access state. An exclusive store can only be carried out if the local monitor is in the Exclusive Access state and if the bus system does not response with an exclusive fail response. The exclusive write (e.g., STREX) can fail if one of the following operations has taken place:
• A CLREX instruction has been executed, switching the local monitor to the Open Access state.
• A context switch has occurred (e.g., an interrupt).
• There wasn’t a LDREX executed beforehand.
• An external hardware returns an exclusive fail status to the processor via a sideband signal on the bus interface. If the exclusive store gets a failed status, the actual write will not take place in the memory, since it will either be blocked by the processor core or by external hardware.

In multi-processor environments, a component called the global exclusive access monitor is needed in the system bus infrastructure to monitor accesses from various processors, and to generate an exclusive fail status signal to the processor running the exclusive store if a conflict is detected.

Please note that in ARMv7-M architecture (including Cortex-M3 and Cortex-M4), a context switch (or any exception sequence) automatically clears the exclusive state in the local monitor. This is different in ARMv7-A/R, where a context-switching code has to execute the CLREX instruction (or use a dummy STREX) to ensure the local monitor is switched to the Open Access state. In general, CLREX is not strictly  required for Cortex-M3 and Cortex-M4 processors, but is included in the architecture for consistency and easier software porting.
