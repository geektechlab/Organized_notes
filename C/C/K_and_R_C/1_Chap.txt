variables that are external to all functions, that is, variables that can be accessed by name by any function.

An external variable must be defined, exactly once, outside of any function; this sets aside storage for it. The variable must also be declared in each function that wants to access it; this  states the type of the variable. The declaration may be an explicit extern statement or may be implicit from context.

#include <stdio.h>

int oldname = 5;

/* in such cases extern can be useful */
extern int newname __attribute__((alias("oldname")));

int main()
{
	printf("Value of new name is :%d\n", newname);
	return 0;
}

-----------------------------------------------------------------------------------------------

If the definition of the  external variable occurs in the source file before its use in a particular function, then there is no need for an extern declaration in the function. common practice is to place definitions of all external variables at the beginning of the source file, and then omit all extern declarations.

The usual practice is to collect extern declarations of variables and functions in a separate header, that is included by #include at the front of each source file.

example at page 33.
