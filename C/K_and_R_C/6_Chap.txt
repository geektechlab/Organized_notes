Structures can be used to group items:
	- Couple resource and mutex/semaphore functions using resource and function pointer to get a monitor like struct
	- For cache improvement where two related items are being loaded, can be grouped in structure so that spatial locality is maintained and less capacity miss happen.

	struct point origin, *pp; 
	pp = &origin; 
	printf("origin is (%d,%d)\n", (*pp).x, (*pp).y); 
The parentheses are necessary in (*pp).x because the precedence of the structure member operator . is higher then *. The expression *pp.x means *(pp.x), which is illegal here because x is not a pointer.

If p is a pointer to a structure, then 
	p->member-of-structure
refers to the particular member. So we could write instead 
	printf("origin is (%d,%d)\n", pp->x, pp->y);

C offers the capability of defining and accessing fields within a word directly rather than by bitwise logical operators. A bit-field, or field for short, is a set of adjacent bits within a single implementation-defined storage unit that we will call a ``word.'' For example, the symbol table #defines above could be replaced by the definition of three fields: 
	struct
	{
		unsigned int is_keyword : 1; 
		unsigned int is_extern : 1; 
		unsigned int is_static : 1; 
	} flags; 
This defines a variable table called flags that contains three 1-bit fields. The number following the colon represents the field width in bits. The fields are declared unsigned int to ensure that they are unsigned quantities.

Individual fields are referenced in the same way as other structure members: flags.is_keyword, flags.is_extern, etc. Fields behave like small integers, and may participate in arithmetic expressions just like other integers. Thus the previous examples may be written more naturally as 
	flags.is_extern = flags.is_static = 1; 
to turn the bits on; 
	flags.is_extern = flags.is_static = 0; 
to turn them off; and 
	if (flags.is_extern == 0 && flags.is_static == 0) 
to test them. Almost everything about fields is implementation-dependent. Whether a field may overlap a word boundary is implementation-defined. Fields need not be names; unnamed fields (a colon and width only) are used for padding. The special width 0 may be used to force alignment at the next word boundary. 

Fields are assigned left to right on some machines and right to left on others. This means that although fields are useful for maintaining internally-defined data structures, the question of which end comes first has to be carefully considered when picking apart externally-defined data; programs that depend on such things are not portable. Fields may be declared only as ints; for portability, specify signed or unsigned explicitly. They are not arrays and they do not have addresses, so the & operator cannot be applied on them.
