C rejects strong typing and permits the programmer to make 
assignments between objects of different types if desired.

Arrays start at 0 rather than 1. Most people start counting at 1, rather than zero. Compiler writers start with zero because we're used to thinking in terms of offsets. This is sometimes 
tough on non-compiler-writers; although a[100] appears in the definition of an array, you'd 
better not store any data at a[100], since a[0] to a[99] is the extent of the array.

The auto keyword is apparently useless. It is only meaningful to a compiler-writer 
making an entry in a symbol table—it says this storage is automatically allocated on entering 
the block (as opposed to global static allocation, or dynamic allocation on the heap). Auto is 
irrelevant to other programmers, since you get it by default.

Array names in expressions "decay" into pointers. It simplifies things to treat arrays as 
pointers. We don't need a complicated mechanism to treat them as a composite object, or 
suffer the inefficiency of copying everything when passing them to a function. But don't make 
the mistake of thinking arrays and pointers are always equivalent.

The register keyword. This keyword gave the compiler-writer a clue about what 
variables the programmer thought were "hot" (frequently referenced), and hence could 
usefully be kept in registers. It turns out to be a mistake. You get better code if the compiler 
does the work of allocating registers for individual uses of a variable, rather than reserving 
them for its entire lifetime at declaration. Having a register keyword simplifies the 
compiler by transferring this burden to the programmer.

#define a(y) a_expanded(y) 
a(x); 
expands into: 
a_expanded(x);

However, 
#define a (y) a_expanded (y) 
a(x); 
is transformed into: 
(y) a_expanded (y)(x);

valve=!open; /* valve is set to logical negation of open */

valve!=open; /* valve is compared for inequality to open */

declarations in header files now look like this: 
char * strcpy(char *dst, const char *src); 
You can also omit the names of the parameters, leaving only the types:
char * strcpy(char * , const char * ); 
Don't omit the parameter names. Although the compiler doesn't check these, they often 
convey extra semantic information to the programmer.

The keyword const doesn't turn a variable into a constant! A symbol with the const
qualifier merely means that the symbol cannot be used for assignment. This makes the value 
re ad -onl y through that symbol; it does not prevent the value from being modified through 
some other means internal (or even external) to the program. It is pretty much useful only 
for qualifying a pointer parameter, to indicate that this function will not change the data that 
argument points to, but other functions may. This is perhaps the most common use of 
const in C and C++.

The combination of const and * is usually only used to simulate call-by-value for array 
parameters. It says, "I am giving you a pointer to this thing, but you may not change it."

char * cp; 
const char *ccp; 
ccp = cp; 
• The left operand is a pointer to "char qualified by const". 
• The right operand is a pointer to "char" unqualified. 
• ( IMP: )The type char is a compatible type with char, and the type pointed to by the left operand 
has all the qualifiers of the type pointed to by the right operand (none), plus one of its own 
(const). 
Note that the assignment cannot be made the other way around. Try it if you don't believe me. 
cp = ccp; /* results in a compilation warning */

let's say,
arr[5]={1,2,3,4,5}
what is difference between arr and &arr ? will arr+1 and &arr+1 will be diffrent ? is one pointer to first element in array and other pointer to whole array size ?
