stack size is affected by how deep the call stack is, that is by the number of functions called by our thread, and by the room occupied by each one of them. This space is essentially composed by local variables and passed parameters. Another relevant factor is the processor architecture, the compiler used and the optimization level chosen. Usually, the stack size of a thread is computed experimentally, and FreeRTOS offers a way to try to detect stack overflows.

FreeRTOS offers two ways to detect stack overflows. The first one consists in using the function:
	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask );
which returns the number of “unused” words of the thread stack. For example, assume a thread defined with a stack of 100 words (that is, 400 bytes on an STM32). Suppose that, in the worst scenario, the thread uses 90 words of its stack. Then the uxTaskGetStackHighWaterMark() returns the value 10. The TaskHandle_t type of the parameter xTask is nothing more than the osThreadId returned by the osThreadCreate() function, and if we call the uxTaskGetStackHighWaterMark() from the same thread we can pass NULL.

How does the uxTaskGetStackHighWaterMark() know how much stack has been used? FreeRTOS fills the stack of a thread with a “magic” number (defined by the macro tskSTACK_- FILL_BYTE inside the task.c file), as shown in Figure 23.15. This is a “watermark” used to derive the number of free memory locations (that is the number of locations through the end of the thread stack still containing that value). This is one of the most efficient techniques used to detect buffer overflows.

FreeRTOS offers two additional methods to detect at run-time a stack overflow. Both consist in setting the configCHECK_FOR_STACK_OVERFLOW macro in the FreeRTOSConfig.h file. If we set it to 1, then every time a thread runs out, FreeRTOS check for the value of the current stack pointer: if it is higher than the top of the thread stack, then it is likely that a stack overflow is happened. In this case, the callback function:
	void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed portCHAR *pcTaskName);
is automatically called. By defining this function in our application, we can detect the stack overflow and debug it. For example, during a debug session we could place a software breakpoint in it:
	void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed portCHAR *pcTaskName)
	{
		asm("BKPT #0"); /* If a stack overflow is detected then, the debugger stop the firmware execution here */
	}
This method is fast, but it could miss stack overflows that happen in the middle of a context switch.

This method is fast, but it could miss stack overflows that happen in the middle of a context switch. So, by configuring the macro configCHECK_FOR_STACK_OVERFLOW to 2, FreeRTOS will apply the same method of the function uxTaskGetStackHighWaterMark(), that is it will fill the stack with a watermark value and it will call the vApplicationStackOverflowHook in case the latest 20 bytes of the stack have changed from their expected value. Since FreeRTOS performs this check at every context switch, this mode impacts on overall performances, and it should be used only during the firmware development (especially for high tick frequencies).
